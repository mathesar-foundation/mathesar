{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mathesar Documentation \u00b6 Mathesar is a web application that makes working with PostgreSQL databases both simple and powerful. It empowers users of all technical skill levels to view, edit, query, and collaborate on data with a familiar spreadsheet-like interface\u2014no code needed. It has native database-level access control, can be deployed in minutes, and works directly with PostgreSQL databases, schemas, and tables without extra abstractions. The project is 100% open source and maintained by Mathesar Foundation, a 501(c)(3) nonprofit. Try Mathesar \u00b6 This is a quick way to play with Mathesar locally, but is not appropriate for saving data that you care about or setting up a long-term installation. With Docker installed, run: docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest Visit http://localhost:8000/ to set up an admin user account and create a database connection. Tips when trying Mathesar locally To open a psql shell within the container, run: docker exec -it mathesar sudo -u postgres psql To stop Mathesar, press Ctrl + C in the shell where it is running. To start again, run docker start mathesar . To remove the Docker container, run docker rm mathesar . \u26a0\ufe0f This will also delete the data that you\u2019ve saved within Mathesar! Install Mathesar \u00b6 You can self-host Mathesar by following one of the guides below: Install using Docker compose \u2014 a production setup with separate reverse-proxy and database containers. Install from scratch \u2014 an advanced setup that doesn\u2019t rely on Docker. Help out \u00b6 Make a donation - We\u2019re a non-profit organization and your donations help sustain our core team. Help build Mathesar - As an open source project, we actively encourage contribution!","title":"Introduction"},{"location":"#mathesar-documentation","text":"Mathesar is a web application that makes working with PostgreSQL databases both simple and powerful. It empowers users of all technical skill levels to view, edit, query, and collaborate on data with a familiar spreadsheet-like interface\u2014no code needed. It has native database-level access control, can be deployed in minutes, and works directly with PostgreSQL databases, schemas, and tables without extra abstractions. The project is 100% open source and maintained by Mathesar Foundation, a 501(c)(3) nonprofit.","title":"Mathesar Documentation"},{"location":"#try-mathesar","text":"This is a quick way to play with Mathesar locally, but is not appropriate for saving data that you care about or setting up a long-term installation. With Docker installed, run: docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest Visit http://localhost:8000/ to set up an admin user account and create a database connection. Tips when trying Mathesar locally To open a psql shell within the container, run: docker exec -it mathesar sudo -u postgres psql To stop Mathesar, press Ctrl + C in the shell where it is running. To start again, run docker start mathesar . To remove the Docker container, run docker rm mathesar . \u26a0\ufe0f This will also delete the data that you\u2019ve saved within Mathesar!","title":"Try Mathesar"},{"location":"#install-mathesar","text":"You can self-host Mathesar by following one of the guides below: Install using Docker compose \u2014 a production setup with separate reverse-proxy and database containers. Install from scratch \u2014 an advanced setup that doesn\u2019t rely on Docker.","title":"Install Mathesar"},{"location":"#help-out","text":"Make a donation - We\u2019re a non-profit organization and your donations help sustain our core team. Help build Mathesar - As an open source project, we actively encourage contribution!","title":"Help out"},{"location":"administration/debug/","text":"Debugging Mathesar \u00b6 Not for production Debug mode should not be enabled in production environments, where it can cause performance issues and potentially expose sensitive information. If your Mathesar installation isn\u2019t working as expected, you can prefix the docker command with DEBUG=true to add additional debugging output to the console and more verbose errors in the browser when something goes wrong. The additional information logged should help you or the Mathesar team diagnose any installation issues. With Docker Compose \u00b6 When debugging Mathesar\u2019s recommended docker compose installation method, add DEBUG=true to the beginning of the docker compose command: - docker compose -f docker-compose.yml up + DEBUG=true docker compose -f docker-compose.yml up With the basic Mathesar docker image \u00b6 If you are just trying the Mathesar Docker image directly as instructed in the introduction , you will follow the same approach of setting DEBUG=true : - docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest + DEBUG=true docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest Before version 0.2.1 \u00b6 Previous versions of Mathesar used a dedicated debugging image called mathesar/mathesar-debug . These images will not be supported or created for Mathesar versions 0.2.1 or higher.","title":"Debugging Mathesar"},{"location":"administration/debug/#debugging-mathesar","text":"Not for production Debug mode should not be enabled in production environments, where it can cause performance issues and potentially expose sensitive information. If your Mathesar installation isn\u2019t working as expected, you can prefix the docker command with DEBUG=true to add additional debugging output to the console and more verbose errors in the browser when something goes wrong. The additional information logged should help you or the Mathesar team diagnose any installation issues.","title":"Debugging Mathesar"},{"location":"administration/debug/#with-docker-compose","text":"When debugging Mathesar\u2019s recommended docker compose installation method, add DEBUG=true to the beginning of the docker compose command: - docker compose -f docker-compose.yml up + DEBUG=true docker compose -f docker-compose.yml up","title":"With Docker Compose"},{"location":"administration/debug/#with-the-basic-mathesar-docker-image","text":"If you are just trying the Mathesar Docker image directly as instructed in the introduction , you will follow the same approach of setting DEBUG=true : - docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest + DEBUG=true docker run -it --name mathesar -p 8000:8000 mathesar/mathesar:latest","title":"With the basic Mathesar docker image"},{"location":"administration/debug/#before-version-021","text":"Previous versions of Mathesar used a dedicated debugging image called mathesar/mathesar-debug . These images will not be supported or created for Mathesar versions 0.2.1 or higher.","title":"Before version 0.2.1"},{"location":"administration/environment-variables/","text":"Environment Variables for Configuration \u00b6 This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them. Backend configuration \u00b6 SECRET_KEY \u00b6 Description : A unique random string used by Django for cryptographic signing ( see Django docs ). It helps Mathesar secure user sessions and encrypt saved PostgreSQL passwords. Format : A 50 character string Additional information : To generate a secret key you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) ALLOWED_HOSTS \u00b6 Description : A set of strings representing the host/domain names that Django is allowed to serve. This is a security measure to prevent HTTP Host header attacks ( see Django docs ). Format : A set of host/domain names separated by a comma and a whitespace Default value : .localhost, 127.0.0.1, [::1] Internal Database configuration \u00b6 Info The database specified in this section will be used to store Mathesar\u2019s internal data. Additionally, it can be optionally repurposed via Mathesar\u2019s UI to store user data. POSTGRES_DB \u00b6 Description : Specifies a name for the database that will be created and used by Mathesar for managing internal data. Default value : mathesar_django POSTGRES_USER \u00b6 Description : Specifies creation of a user with superuser privileges and a database with the same name. Default value : mathesar POSTGRES_PASSWORD \u00b6 Description : Specifies the superuser password that is required to be set for the PostgreSQL docker image. Default value : mathesar POSTGRES_HOST \u00b6 Description : Specifies the host name on which portgres listen for connections from client applications. Default value : mathesar_db POSTGRES_PORT \u00b6 Description : Specifies the port on which portgres listen for connections from client applications. Default value : 5432 Caddy reverse proxy configuration \u00b6 Note These variables are only needed if you\u2019re using the Caddy configuration in our default Docker Compose file. DOMAIN_NAME \u00b6 Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com","title":"Environment variables"},{"location":"administration/environment-variables/#environment-variables-for-configuration","text":"This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them.","title":"Environment Variables for Configuration"},{"location":"administration/environment-variables/#backend","text":"","title":"Backend configuration"},{"location":"administration/environment-variables/#secret_key","text":"Description : A unique random string used by Django for cryptographic signing ( see Django docs ). It helps Mathesar secure user sessions and encrypt saved PostgreSQL passwords. Format : A 50 character string Additional information : To generate a secret key you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50)","title":"SECRET_KEY"},{"location":"administration/environment-variables/#allowed_hosts","text":"Description : A set of strings representing the host/domain names that Django is allowed to serve. This is a security measure to prevent HTTP Host header attacks ( see Django docs ). Format : A set of host/domain names separated by a comma and a whitespace Default value : .localhost, 127.0.0.1, [::1]","title":"ALLOWED_HOSTS"},{"location":"administration/environment-variables/#db","text":"Info The database specified in this section will be used to store Mathesar\u2019s internal data. Additionally, it can be optionally repurposed via Mathesar\u2019s UI to store user data.","title":"Internal Database configuration"},{"location":"administration/environment-variables/#postgres_db","text":"Description : Specifies a name for the database that will be created and used by Mathesar for managing internal data. Default value : mathesar_django","title":"POSTGRES_DB"},{"location":"administration/environment-variables/#postgres_user","text":"Description : Specifies creation of a user with superuser privileges and a database with the same name. Default value : mathesar","title":"POSTGRES_USER"},{"location":"administration/environment-variables/#postgres_password","text":"Description : Specifies the superuser password that is required to be set for the PostgreSQL docker image. Default value : mathesar","title":"POSTGRES_PASSWORD"},{"location":"administration/environment-variables/#postgres_host","text":"Description : Specifies the host name on which portgres listen for connections from client applications. Default value : mathesar_db","title":"POSTGRES_HOST"},{"location":"administration/environment-variables/#postgres_port","text":"Description : Specifies the port on which portgres listen for connections from client applications. Default value : 5432","title":"POSTGRES_PORT"},{"location":"administration/environment-variables/#caddy","text":"Note These variables are only needed if you\u2019re using the Caddy configuration in our default Docker Compose file.","title":"Caddy reverse proxy configuration"},{"location":"administration/environment-variables/#domain_name","text":"Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com","title":"DOMAIN_NAME"},{"location":"administration/install-from-scratch/","text":"Install Mathesar From Scratch on Linux \u00b6 For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Requirements \u00b6 System \u00b6 We recommend having at least 60 GB disk space and 4 GB of RAM. Operating System \u00b6 We\u2019ve tested this on Debian 12 , but we expect that it can be adapted for other Linux distributions as well. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following system packages before you install Mathesar: Python , along with the appropriate venv module. See version support . PostgreSQL 13 or newer (Verify by logging in, and running the query: SELECT version(); ). See version support . Caddy (Verify with caddy version ) git (Verify with git --version ) GNU gettext (Verify with gettext --version ) unzip A utility tool to de-archive .zip files (Verify with unzip -v ) Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Customizing this Guide \u00b6 Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name. Installation Steps \u00b6 Set up the database \u00b6 Open a psql shell. sudo -u postgres psql # Modify based on your Postgres installation. Let\u2019s create a Postgres user for Mathesar CREATE USER mathesar WITH ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. Your PostgreSQL user will either need to be a SUPERUSER or OWNER of the database. In this guide, we will be setting the user to be OWNER of the database as it is slightly restrictive compared to a SUPERUSER . CREATE DATABASE mathesar_django OWNER mathesar ; Press Ctrl + D to exit the psql shell. Set up your installation directory \u00b6 Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory. Set up the environment \u00b6 Clone the git repo into the installation directory. git clone https://github.com/mathesar-foundation/mathesar.git . Check out the tag of the release or build you\u2019d like to install, 0.2.1 . git checkout 0.2.1 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar. We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.13 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions. Install the Mathesar application \u00b6 Install Python dependencies pip install -r requirements.txt Set the environment variables Create .env file touch .env Edit your .env file, adding environment variables to configure Mathesar. Example Your .env file should look something like this SECRET_KEY=\"REPLACE_THIS_WITH_YOUR_50_CHAR_RANDOMLY_GENERATED_STRING\" ALLOWED_HOSTS=\"xDOMAIN_NAMEx\" DOMAIN_NAME=\"xDOMAIN_NAMEx\" POSTGRES_DB=\"mathesar_django\" POSTGRES_USER=\"mathesar\" POSTGRES_PASSWORD=\"REPLACE_THIS_WITH_APPROPRIATE_PASSWORD_FOR_THE_CHOSEN_POSTGRES_USER\" POSTGRES_HOST=\"localhost\" POSTGRES_PORT=\"5432\" Note Each value in the environment file must be enclosed in double quotes( \"\" ). Tip To generate a SECRET_KEY you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) Tip To host Mathesar on multiple domains/subdomains simply list the domain names separated by a comma and a whitespace to the following env variables: DOMAIN_NAME=\"xDOMAIN_NAMEx, xDOMAIN_NAMEx.example.org\" ALLOWED_HOSTS=\"xDOMAIN_NAMEx, xDOMAIN_NAMEx.example.org\" Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. set -a && source .env && set +a Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Download release static files and extract into the correct directory wget https://github.com/mathesar-foundation/mathesar/releases/download/0.2.1/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Create a media directory for storing user-uploaded media mkdir .media Run Django migrations and collect static files: python -m mathesar.install | tee /tmp/install.py.log Set up Gunicorn \u00b6 Elevated permissions needed Most of the commands below need to be run as a root user, or using sudo . If you try to run one of these commands, and see an error about \u201cpermission denied\u201d, use one of those methods. Create a user for running Gunicorn groupadd gunicorn && \\ useradd gunicorn -g gunicorn Make the gunicorn user the owner of the .media directory chown -R gunicorn:gunicorn .media/ Create the Gunicorn SystemD service file. touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload systemctl and start the Gunicorn socket systemctl daemon-reload systemctl start gunicorn.service systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors journalctl --unit=gunicorn.service Set up the Caddy reverse proxy \u00b6 We will use the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile {$DOMAIN_NAME} { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy groupadd caddy && \\ useradd caddy -g caddy Create the Caddy systemd service file. touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket systemctl daemon-reload && \\ systemctl start caddy.service && \\ systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors journalctl --unit=caddy.service Set up your user account \u00b6 Mathesar is now installed! You can use it by visiting the URL xDOMAIN_NAMEx . You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Follow the instructions on screen.","title":"Install from scratch"},{"location":"administration/install-from-scratch/#install-mathesar-from-scratch-on-linux","text":"For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file .","title":"Install Mathesar From Scratch on Linux"},{"location":"administration/install-from-scratch/#requirements","text":"","title":"Requirements"},{"location":"administration/install-from-scratch/#system","text":"We recommend having at least 60 GB disk space and 4 GB of RAM.","title":"System"},{"location":"administration/install-from-scratch/#operating-system","text":"We\u2019ve tested this on Debian 12 , but we expect that it can be adapted for other Linux distributions as well.","title":"Operating System"},{"location":"administration/install-from-scratch/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"administration/install-from-scratch/#software","text":"You\u2019ll need to install the following system packages before you install Mathesar: Python , along with the appropriate venv module. See version support . PostgreSQL 13 or newer (Verify by logging in, and running the query: SELECT version(); ). See version support . Caddy (Verify with caddy version ) git (Verify with git --version ) GNU gettext (Verify with gettext --version ) unzip A utility tool to de-archive .zip files (Verify with unzip -v )","title":"Software"},{"location":"administration/install-from-scratch/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"administration/install-from-scratch/#customizing-this-guide","text":"Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name.","title":"Customizing this Guide"},{"location":"administration/install-from-scratch/#installation-steps","text":"","title":"Installation Steps"},{"location":"administration/install-from-scratch/#set-up-the-database","text":"Open a psql shell. sudo -u postgres psql # Modify based on your Postgres installation. Let\u2019s create a Postgres user for Mathesar CREATE USER mathesar WITH ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. Your PostgreSQL user will either need to be a SUPERUSER or OWNER of the database. In this guide, we will be setting the user to be OWNER of the database as it is slightly restrictive compared to a SUPERUSER . CREATE DATABASE mathesar_django OWNER mathesar ; Press Ctrl + D to exit the psql shell.","title":"Set up the database"},{"location":"administration/install-from-scratch/#set-up-your-installation-directory","text":"Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory.","title":"Set up your installation directory"},{"location":"administration/install-from-scratch/#set-up-the-environment","text":"Clone the git repo into the installation directory. git clone https://github.com/mathesar-foundation/mathesar.git . Check out the tag of the release or build you\u2019d like to install, 0.2.1 . git checkout 0.2.1 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar. We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.13 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions.","title":"Set up the environment"},{"location":"administration/install-from-scratch/#install-the-mathesar-application","text":"Install Python dependencies pip install -r requirements.txt Set the environment variables Create .env file touch .env Edit your .env file, adding environment variables to configure Mathesar. Example Your .env file should look something like this SECRET_KEY=\"REPLACE_THIS_WITH_YOUR_50_CHAR_RANDOMLY_GENERATED_STRING\" ALLOWED_HOSTS=\"xDOMAIN_NAMEx\" DOMAIN_NAME=\"xDOMAIN_NAMEx\" POSTGRES_DB=\"mathesar_django\" POSTGRES_USER=\"mathesar\" POSTGRES_PASSWORD=\"REPLACE_THIS_WITH_APPROPRIATE_PASSWORD_FOR_THE_CHOSEN_POSTGRES_USER\" POSTGRES_HOST=\"localhost\" POSTGRES_PORT=\"5432\" Note Each value in the environment file must be enclosed in double quotes( \"\" ). Tip To generate a SECRET_KEY you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) Tip To host Mathesar on multiple domains/subdomains simply list the domain names separated by a comma and a whitespace to the following env variables: DOMAIN_NAME=\"xDOMAIN_NAMEx, xDOMAIN_NAMEx.example.org\" ALLOWED_HOSTS=\"xDOMAIN_NAMEx, xDOMAIN_NAMEx.example.org\" Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. set -a && source .env && set +a Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Download release static files and extract into the correct directory wget https://github.com/mathesar-foundation/mathesar/releases/download/0.2.1/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Create a media directory for storing user-uploaded media mkdir .media Run Django migrations and collect static files: python -m mathesar.install | tee /tmp/install.py.log","title":"Install the Mathesar application"},{"location":"administration/install-from-scratch/#set-up-gunicorn","text":"Elevated permissions needed Most of the commands below need to be run as a root user, or using sudo . If you try to run one of these commands, and see an error about \u201cpermission denied\u201d, use one of those methods. Create a user for running Gunicorn groupadd gunicorn && \\ useradd gunicorn -g gunicorn Make the gunicorn user the owner of the .media directory chown -R gunicorn:gunicorn .media/ Create the Gunicorn SystemD service file. touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload systemctl and start the Gunicorn socket systemctl daemon-reload systemctl start gunicorn.service systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors journalctl --unit=gunicorn.service","title":"Set up Gunicorn"},{"location":"administration/install-from-scratch/#set-up-the-caddy-reverse-proxy","text":"We will use the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile {$DOMAIN_NAME} { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy groupadd caddy && \\ useradd caddy -g caddy Create the Caddy systemd service file. touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket systemctl daemon-reload && \\ systemctl start caddy.service && \\ systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors journalctl --unit=caddy.service","title":"Set up the Caddy reverse proxy"},{"location":"administration/install-from-scratch/#set-up-your-user-account","text":"Mathesar is now installed! You can use it by visiting the URL xDOMAIN_NAMEx . You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Follow the instructions on screen.","title":"Set up your user account"},{"location":"administration/install-via-docker-compose/","text":"Install Mathesar via Docker Compose \u00b6 Prerequisites \u00b6 Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information Step-by-Step Guide \u00b6 Note Depending on your Docker setup, you may need to run docker commands with sudo . Download our docker-compose.yml file. wget https://github.com/mathesar-foundation/mathesar/raw/0.2.1/docker-compose.yml Open the downloaded docker-compose file using your text editor. Set the required environment variables in the x-config section of the docker compose file. Config x-config : &config # (REQUIRED) Replace '?' with '-' followed by a 50 character random string. # You can generate one at https://djecrety.ir/ or by running: # echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) SECRET_KEY : ${SECRET_KEY:?} # (Optional) Replace 'http://localhost' with custom domain(s) e.g. # 'yourdomain.com, 127.0.0.1' to manage the host(s) at which you want to # access Mathesar over http or https DOMAIN_NAME : ${DOMAIN_NAME:-http://localhost} # Edit the POSTGRES_* variables if you are not using the db service provided # below, or if you want to use a custom database user. # (Optional) Replace 'mathesar_django' with any custom name for the internal # database managed by mathesar web-service POSTGRES_DB : ${POSTGRES_DB:-mathesar_django} # (Optional) Replace 'mathesar' with any custom username for the # aforementioned database POSTGRES_USER : ${POSTGRES_USER:-mathesar} # (Optional) Replace 'mathesar' with any custom password for the # aforementioned database POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-mathesar} # (Optional) Replace 'mathesar_db' with the name of the host running postgres POSTGRES_HOST : ${POSTGRES_HOST:-mathesar_db} # (Optional) Replace '5432' with the port on which postgres is running POSTGRES_PORT : ${POSTGRES_PORT:-5432} Run the docker compose file using: docker compose -f docker-compose.yml up Set up your user account Mathesar is now installed! You can use it by visiting localhost or the domain you\u2019ve set up. You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Just follow the instructions on screen. Starting and stopping Mathesar \u00b6 The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: docker compose -f docker-compose.yml up -d Info Exclude the -d flag if you\u2019d like to see the container\u2019s logs. Stop Mathesar: docker compose -f docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Optional configurations \u00b6 Hosting Mathesar over a custom domain with https \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Ensure that the DNS for your domain or sub-domain is pointing to the public IP address of the machine that you\u2019re installing Mathesar on . Add your domain(s) or sub-domain(s) to the DOMAIN_NAME environment variable, in the CONFIG section of the docker-compose file. Example DOMAIN_NAME : ${DOMAIN_NAME:-yourdomain.org, yoursubdomain.example.org} Restart the docker containers for the configuration to take effect. Using an external PostgreSQL server for Mathesar\u2019s internal database \u00b6 If you\u2019d like to use an external PostgreSQL server for Mathesar\u2019s internal database, you\u2019ll need to do the following: On your PostgreSQL server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the internal database environment variables to point to the database you just created. Ensure that you change the default values for the user, password, and host.","title":"Install using Docker Compose"},{"location":"administration/install-via-docker-compose/#install-mathesar-via-docker-compose","text":"","title":"Install Mathesar via Docker Compose"},{"location":"administration/install-via-docker-compose/#prerequisites","text":"","title":"Prerequisites"},{"location":"administration/install-via-docker-compose/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"administration/install-via-docker-compose/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"administration/install-via-docker-compose/#steps","text":"Note Depending on your Docker setup, you may need to run docker commands with sudo . Download our docker-compose.yml file. wget https://github.com/mathesar-foundation/mathesar/raw/0.2.1/docker-compose.yml Open the downloaded docker-compose file using your text editor. Set the required environment variables in the x-config section of the docker compose file. Config x-config : &config # (REQUIRED) Replace '?' with '-' followed by a 50 character random string. # You can generate one at https://djecrety.ir/ or by running: # echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) SECRET_KEY : ${SECRET_KEY:?} # (Optional) Replace 'http://localhost' with custom domain(s) e.g. # 'yourdomain.com, 127.0.0.1' to manage the host(s) at which you want to # access Mathesar over http or https DOMAIN_NAME : ${DOMAIN_NAME:-http://localhost} # Edit the POSTGRES_* variables if you are not using the db service provided # below, or if you want to use a custom database user. # (Optional) Replace 'mathesar_django' with any custom name for the internal # database managed by mathesar web-service POSTGRES_DB : ${POSTGRES_DB:-mathesar_django} # (Optional) Replace 'mathesar' with any custom username for the # aforementioned database POSTGRES_USER : ${POSTGRES_USER:-mathesar} # (Optional) Replace 'mathesar' with any custom password for the # aforementioned database POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-mathesar} # (Optional) Replace 'mathesar_db' with the name of the host running postgres POSTGRES_HOST : ${POSTGRES_HOST:-mathesar_db} # (Optional) Replace '5432' with the port on which postgres is running POSTGRES_PORT : ${POSTGRES_PORT:-5432} Run the docker compose file using: docker compose -f docker-compose.yml up Set up your user account Mathesar is now installed! You can use it by visiting localhost or the domain you\u2019ve set up. You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Just follow the instructions on screen.","title":"Step-by-Step Guide"},{"location":"administration/install-via-docker-compose/#start-stop","text":"The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: docker compose -f docker-compose.yml up -d Info Exclude the -d flag if you\u2019d like to see the container\u2019s logs. Stop Mathesar: docker compose -f docker-compose.yml down This stops all Mathesar Docker containers and releases their ports.","title":"Starting and stopping Mathesar"},{"location":"administration/install-via-docker-compose/#optional-configurations","text":"","title":"Optional configurations"},{"location":"administration/install-via-docker-compose/#hosting-mathesar-over-a-custom-domain-with-https","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Ensure that the DNS for your domain or sub-domain is pointing to the public IP address of the machine that you\u2019re installing Mathesar on . Add your domain(s) or sub-domain(s) to the DOMAIN_NAME environment variable, in the CONFIG section of the docker-compose file. Example DOMAIN_NAME : ${DOMAIN_NAME:-yourdomain.org, yoursubdomain.example.org} Restart the docker containers for the configuration to take effect.","title":"Hosting Mathesar over a custom domain with https"},{"location":"administration/install-via-docker-compose/#using-an-external-postgresql-server-for-mathesars-internal-database","text":"If you\u2019d like to use an external PostgreSQL server for Mathesar\u2019s internal database, you\u2019ll need to do the following: On your PostgreSQL server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the internal database environment variables to point to the database you just created. Ensure that you change the default values for the user, password, and host.","title":"Using an external PostgreSQL server for Mathesar's internal database"},{"location":"administration/uninstall/","text":"Uninstall Mathesar \u00b6 The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed. Uninstall a Docker installation of Mathesar \u00b6 Note Depending on your Docker setup, you may need to run docker commands with sudo . Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media Uninstall a guided script or Docker compose installation of Mathesar \u00b6 Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Remove all Mathesar Docker images and containers. docker compose -f docker-compose.yml down --rmi all -v Remove configuration files. rm -rf xMATHESAR_INSTALLATION_DIRx # may need sudo, depending on location Uninstall a source installation of Mathesar \u00b6 Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Stop Caddy service systemctl disable caddy.service && systemctl stop caddy.service Remove Caddy service file and Caddyfile (requires sudo ) sudo rm /lib/systemd/system/caddy.service sudo rm /etc/caddy/Caddyfile Stop Gunicorn systemctl disable gunicorn.service systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory rm -r xMATHESAR_INSTALLATION_DIRx # May need sudo, depending on location Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ;","title":"Uninstall Mathesar"},{"location":"administration/uninstall/#uninstall-mathesar","text":"The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed.","title":"Uninstall Mathesar"},{"location":"administration/uninstall/#uninstall-a-docker-installation-of-mathesar","text":"Note Depending on your Docker setup, you may need to run docker commands with sudo . Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media","title":"Uninstall a Docker installation of Mathesar"},{"location":"administration/uninstall/#uninstall-a-guided-script-or-docker-compose-installation-of-mathesar","text":"Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Remove all Mathesar Docker images and containers. docker compose -f docker-compose.yml down --rmi all -v Remove configuration files. rm -rf xMATHESAR_INSTALLATION_DIRx # may need sudo, depending on location","title":"Uninstall a guided script or Docker compose installation of Mathesar"},{"location":"administration/uninstall/#uninstall-a-source-installation-of-mathesar","text":"Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Stop Caddy service systemctl disable caddy.service && systemctl stop caddy.service Remove Caddy service file and Caddyfile (requires sudo ) sudo rm /lib/systemd/system/caddy.service sudo rm /etc/caddy/Caddyfile Stop Gunicorn systemctl disable gunicorn.service systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory rm -r xMATHESAR_INSTALLATION_DIRx # May need sudo, depending on location Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ;","title":"Uninstall a source installation of Mathesar"},{"location":"administration/upgrade/","text":"Upgrade Mathesar \u00b6 Mathesar cannot be upgraded to version 0.2.0 You\u2019ll need to reinstall Mathesar to use Mathesar 0.2.0, our initial beta release. Upgrading from our alpha versions is not supported. The steps to upgrade Mathesar vary by release. First find the release notes for the version to which you\u2019d like to upgrade. Look at the bottom of the release notes for upgrade instructions.","title":"Upgrade Mathesar"},{"location":"administration/upgrade/#upgrade-mathesar","text":"Mathesar cannot be upgraded to version 0.2.0 You\u2019ll need to reinstall Mathesar to use Mathesar 0.2.0, our initial beta release. Upgrading from our alpha versions is not supported. The steps to upgrade Mathesar vary by release. First find the release notes for the version to which you\u2019d like to upgrade. Look at the bottom of the release notes for upgrade instructions.","title":"Upgrade Mathesar"},{"location":"administration/version-support/","text":"PostgreSQL and Python Version Support \u00b6 The general strategy of Mathesar is to support whichever versions of Python and PostgreSQL are supported upstream when each release is made. We will only remove support on minor version increases. The following table will be updated as future versions of Mathesar are released. Mathesar version Release Date Python Versions PostgreSQL versions 0.2.x 2025-01 3.9-3.13 13-17 Upstream EOL dates to note \u00b6 Python 3.9 is supported upstream until October 2025 PostgreSQL 13 is supported upstream until November 2025 Default Python and PostgreSQL versions for Mathesar 0.2.1 \u00b6 Mathesar\u2019s Docker image uses PostgreSQL 17. Mathesar\u2019s Docker image uses Python 3.13. The default PostgreSQL version provided in our example docker-compose.yml is 17. Regarding Python Support \u00b6 Python support is mostly only relevant for installations which followed the Install From Scratch instructions.","title":"Postgres & Python versions"},{"location":"administration/version-support/#postgresql-and-python-version-support","text":"The general strategy of Mathesar is to support whichever versions of Python and PostgreSQL are supported upstream when each release is made. We will only remove support on minor version increases. The following table will be updated as future versions of Mathesar are released. Mathesar version Release Date Python Versions PostgreSQL versions 0.2.x 2025-01 3.9-3.13 13-17","title":"PostgreSQL and Python Version Support"},{"location":"administration/version-support/#upstream-eol-dates-to-note","text":"Python 3.9 is supported upstream until October 2025 PostgreSQL 13 is supported upstream until November 2025","title":"Upstream EOL dates to note"},{"location":"administration/version-support/#default-python-and-postgresql-versions-for-mathesar-021","text":"Mathesar\u2019s Docker image uses PostgreSQL 17. Mathesar\u2019s Docker image uses Python 3.13. The default PostgreSQL version provided in our example docker-compose.yml is 17.","title":"Default Python and PostgreSQL versions for Mathesar 0.2.1"},{"location":"administration/version-support/#regarding-python-support","text":"Python support is mostly only relevant for installations which followed the Install From Scratch instructions.","title":"Regarding Python Support"},{"location":"api/","text":"Mathesar\u2019s API \u00b6 Mathesar has an API available at /api/rpc/v0/ which follows the JSON-RPC spec version 2.0. It has been built primarily for consumption by the Mathesar front end but theoretically could be used to build automation workflows and Mathesar integrations. Caveats \u00b6 The Mathesar API is not yet stable . If you build logic that depends on it, be mindful that future Mathesar versions will likely bring breaking changes to the API without warning or notice. This API documentation is still in its early stages and may contain inaccuracies or incomplete information. If you encounter any issues, please report them via GitHub. A small subset of functionality in Mathesar still relies on a legacy REST API which is gradually being phased out. It is not documented here. Usage \u00b6 You can find a full list of Mathesar\u2019s RPC methods on the API Methods page . Converting Functions to API requests The methods are shown as Python function definitions to make them easier to understand, but they need to be converted into JSON payloads for API calls. Here\u2019s how to convert a function call like this: tables.list_(*, database_id=None, **kwargs) into an API payload. The function name becomes the method path: tables.list_ converts to \"method\": \"tables.list\" Named parameters become part of the \"parameters\" object: { \"method\" : \"tables.list\" , \"parameters\" : { \"database_id\" : 1 } } Requests \u00b6 To use an RPC method: Call it with a dot path starting from its root path. Always use named parameters. Ensure that your request includes HTTP headers for valid session IDs, as well as CSRF cookies and tokens. Example To list information about tables for a schema, call the tables.list method with a payload like this: POST /api/rpc/v0/ { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"method\" : \"tables.list\" , \"params\" : { \"schema_oid\" : 47324 , \"database_id\" : 1 } } Success Responses \u00b6 Upon a successful RPC method call, the API will return a success object with the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"result\" : <a n y> } The result is whatever was returned by the underlying method. Error Responses \u00b6 When an RPC method call fails, it generates an error response of the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"error\" : { \"code\" : <i nt > , \"message\" : <s tr > } } The code is a negative integer. Some codes are produced according to the JSON-RPC spec . Other error codes are grouped according to the library that produced the Exception: builtins : -31xxx psycopg or psycopg2 : -30xxx django : -29xxx mathesar (our code): -28xxx db (our code): -27xxx sqlalchemy : -26xxx other: -25xxx Unrecognized errors from a given library return a \u201cround number\u201d code, so an unknown builtins error gets the code -31000.","title":"Overview"},{"location":"api/#mathesars-api","text":"Mathesar has an API available at /api/rpc/v0/ which follows the JSON-RPC spec version 2.0. It has been built primarily for consumption by the Mathesar front end but theoretically could be used to build automation workflows and Mathesar integrations.","title":"Mathesar's API"},{"location":"api/#caveats","text":"The Mathesar API is not yet stable . If you build logic that depends on it, be mindful that future Mathesar versions will likely bring breaking changes to the API without warning or notice. This API documentation is still in its early stages and may contain inaccuracies or incomplete information. If you encounter any issues, please report them via GitHub. A small subset of functionality in Mathesar still relies on a legacy REST API which is gradually being phased out. It is not documented here.","title":"Caveats"},{"location":"api/#usage","text":"You can find a full list of Mathesar\u2019s RPC methods on the API Methods page . Converting Functions to API requests The methods are shown as Python function definitions to make them easier to understand, but they need to be converted into JSON payloads for API calls. Here\u2019s how to convert a function call like this: tables.list_(*, database_id=None, **kwargs) into an API payload. The function name becomes the method path: tables.list_ converts to \"method\": \"tables.list\" Named parameters become part of the \"parameters\" object: { \"method\" : \"tables.list\" , \"parameters\" : { \"database_id\" : 1 } }","title":"Usage"},{"location":"api/#requests","text":"To use an RPC method: Call it with a dot path starting from its root path. Always use named parameters. Ensure that your request includes HTTP headers for valid session IDs, as well as CSRF cookies and tokens. Example To list information about tables for a schema, call the tables.list method with a payload like this: POST /api/rpc/v0/ { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"method\" : \"tables.list\" , \"params\" : { \"schema_oid\" : 47324 , \"database_id\" : 1 } }","title":"Requests"},{"location":"api/#success-responses","text":"Upon a successful RPC method call, the API will return a success object with the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"result\" : <a n y> } The result is whatever was returned by the underlying method.","title":"Success Responses"},{"location":"api/#error-responses","text":"When an RPC method call fails, it generates an error response of the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"error\" : { \"code\" : <i nt > , \"message\" : <s tr > } } The code is a negative integer. Some codes are produced according to the JSON-RPC spec . Other error codes are grouped according to the library that produced the Exception: builtins : -31xxx psycopg or psycopg2 : -30xxx django : -29xxx mathesar (our code): -28xxx db (our code): -27xxx sqlalchemy : -26xxx other: -25xxx Unrecognized errors from a given library return a \u201cround number\u201d code, so an unknown builtins error gets the code -31000.","title":"Error Responses"},{"location":"api/methods/","text":"API Methods \u00b6 Analytics \u00b6 Classes and functions exposed to the RPC endpoint for managing analytics. analytics.get_state \u00b6 get_state () Returns: Type Description AnalyticsState A boolean to identify if analytics is enabled. analytics.initialize \u00b6 initialize () Initialize analytics collection and reporting in Mathesar If initialized, analytics are gathered to a local model once per day, and uploaded. analytics.disable \u00b6 disable () Disable analytics collection and reporting in Mathesar Disabling analytics amounts to (for now) simply deleting the Installation ID, ensuring that it\u2019s impossible to save analytics reports. Any reports currently saved are removed when the Installation ID is deleted. analytics.view_report \u00b6 view_report () View an example analytics report, prepared with the same function that creates real reports that would be saved and uploaded. Returns: Type Description AnalyticsReport An analytics report. analytics.upload_feedback \u00b6 upload_feedback ( message ) Upload a feedback message to Mathesar\u2019s servers. Parameters: Name Type Description Default message str The feedback message to send. required analytics.AnalyticsReport \u00b6 Bases: TypedDict A report with some statistics about the data accessible by Mathesar. Attributes: Name Type Description installation_id Optional [ str ] A unique ID for this Mathesar installation. mathesar_version str The version of Mathesar. user_count int The number of configured users in Mathesar. active_user_count int The number of users who have recently logged in. configured_role_count int The number of DB roles configured. connected_database_count int The number of databases configured. connected_database_schema_count int The number of all schemas in all connected databases. connected_database_table_count int The total number of tables in all connected databasees. connected_database_record_count int The total number of records in all connected databasees (approximated) exploration_count int The number of explorations. analytics.AnalyticsState \u00b6 Bases: TypedDict Returns the current state of analytics. Attributes: Name Type Description enabled bool A boolean representing if analytics is enabled. Collaborators \u00b6 collaborators.list_ \u00b6 list_ ( * , database_id = None , ** kwargs ) List information about collaborators. Exposed as list . If called with no database_id , all collaborators for all databases are listed. Parameters: Name Type Description Default database_id int The Django id of the database associated with the collaborators. None Returns: Type Description list [ CollaboratorInfo ] A list of collaborators. collaborators.add \u00b6 add ( * , database_id , user_id , configured_role_id , ** kwargs ) Set up a new collaborator for a database. Parameters: Name Type Description Default database_id int The Django id of the Database to associate with the collaborator. required user_id int The Django id of the User model instance who\u2019d be the collaborator. required configured_role_id int The Django id of the ConfiguredRole model instance to associate with the collaborator. required collaborators.delete \u00b6 delete ( * , collaborator_id , ** kwargs ) Delete a collaborator from a database. Parameters: Name Type Description Default collaborator_id int The Django id of the UserDatabaseRoleMap model instance of the collaborator. required collaborators.set_role \u00b6 set_role ( * , collaborator_id , configured_role_id , ** kwargs ) Set the role of a collaborator for a database. Parameters: Name Type Description Default collaborator_id int The Django id of the UserDatabaseRoleMap model instance of the collaborator. required configured_role_id int The Django id of the ConfiguredRole model instance to associate with the collaborator. required collaborators.CollaboratorInfo \u00b6 Bases: TypedDict Information about a collaborator. Attributes: Name Type Description id int the Django ID of the UserDatabaseRoleMap model instance. user_id int The Django ID of the User model instance of the collaborator. database_id int the Django ID of the Database model instance for the collaborator. configured_role_id int The Django ID of the ConfiguredRole model instance for the collaborator. Columns \u00b6 columns.list_ \u00b6 list_ ( * , table_oid , database_id , ** kwargs ) List information about columns for a table. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ColumnInfo ] A list of column details. columns.add \u00b6 add ( * , column_data_list , table_oid , database_id , ** kwargs ) Add columns to a table. There are defaults for both the name and type of a column, and so passing [{}] for column_data_list would add a single column of type CHARACTER VARYING , with an auto-generated name. Parameters: Name Type Description Default column_data_list list [ CreatableColumnInfo ] A list describing desired columns to add. required table_oid int Identity of the table to which we\u2019ll add columns. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ int ] An array of the attnums of the new columns. columns.patch \u00b6 patch ( * , column_data_list , table_oid , database_id , ** kwargs ) Alter details of preexisting columns in a table. Does not support altering the type or type options of array columns. Parameters: Name Type Description Default column_data_list list [ SettableColumnInfo ] A list describing desired column alterations. required table_oid int Identity of the table whose columns we\u2019ll modify. required database_id int The Django id of the database containing the table. required Returns: Type Description int The number of columns altered. columns.delete \u00b6 delete ( * , column_attnums , table_oid , database_id , ** kwargs ) Delete columns from a table. Parameters: Name Type Description Default column_attnums list [ int ] A list of attnums of columns to delete. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description int The number of columns dropped. columns.list_with_metadata \u00b6 list_with_metadata ( * , table_oid , database_id , ** kwargs ) List information about columns for a table, along with the metadata associated with each column. Args: table_oid: Identity of the table in the user\u2019s database. database_id: The Django id of the database containing the table. Returns: A list of column details. columns.ColumnInfo \u00b6 Bases: TypedDict Information about a column. Extends the settable fields. Attributes: Name Type Description id int The attnum of the column in the table. name str The name of the column. type str The type of the column on the database. type_options TypeOptions The options applied to the column type. nullable bool Whether or not the column is nullable. primary_key bool Whether the column is in the primary key. default ColumnDefault The default value and whether it\u2019s dynamic. has_dependents bool Whether the column has dependent objects. description str The description of the column. current_role_priv list [ Literal ['SELECT', 'INSERT', 'UPDATE', 'REFERENCES']] The privileges available to the user for the column. valid_target_types list [ str ] A list of all types to which the column can be cast. columns.CreatableColumnInfo \u00b6 Bases: TypedDict Information needed to add a new column. No keys are required. Attributes: Name Type Description name Optional [ str ] The name of the column. type Optional [ str ] The type of the column on the database. type_options Optional [ TypeOptions ] The options applied to the column type. nullable Optional [ bool ] Whether or not the column is nullable. default Optional [ ColumnDefault ] The default value. description Optional [ str ] The description of the column. columns.PreviewableColumnInfo \u00b6 Bases: TypedDict Information needed to preview a column. Attributes: Name Type Description id int The attnum of the column in the table. type Optional [ str ] The new type to be applied to a column. type_options Optional [ TypeOptions ] The options to be applied to the column type. columns.SettableColumnInfo \u00b6 Bases: TypedDict Information about a column, restricted to settable fields. When possible, Passing null for a key will clear the underlying setting. E.g., default = null clears the column default setting. type_options = null clears the type options for the column. description = null clears the column description. Setting any of name , type , or nullable is a noop. Only the id key is required. Attributes: Name Type Description id int The attnum of the column in the table. name Optional [ str ] The name of the column. type Optional [ str ] The type of the column on the database. type_options Optional [ TypeOptions ] The options applied to the column type. nullable Optional [ bool ] Whether or not the column is nullable. default Optional [ ColumnDefault ] The default value. description Optional [ str ] The description of the column. columns.TypeOptions \u00b6 Bases: TypedDict Options applied to a type. All attributes are optional. Take special care with the difference between numeric and date/time types w.r.t. precision. The attribute has a different meaning depending on the type to which it\u2019s being applied. Attributes: Name Type Description precision int For numeric types, the number of significant digits. For date/time types, the number of fractional digits. scale int For numeric types, the number of fractional digits. fields str Which time fields are stored. See Postgres docs. length int The maximum length of a character-type field. item_type str The member type for arrays. columns.ColumnDefault \u00b6 Bases: TypedDict A dictionary describing the default value for a column. Attributes: Name Type Description value str An SQL expression giving the default value. is_dynamic bool Whether the value is possibly dynamic. Column Metadata \u00b6 Classes and functions exposed to the RPC endpoint for managing column metadata. columns.metadata.list_ \u00b6 list_ ( * , table_oid , database_id , ** kwargs ) List metadata associated with columns for a table. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ColumnMetaDataRecord ] A list of column meta data objects. columns.metadata.set_ \u00b6 set_ ( * , column_meta_data_list , table_oid , database_id , ** kwargs ) Set metadata associated with columns of a table for a database. Exposed as set . Parameters: Name Type Description Default column_meta_data_list list [ ColumnMetaDataBlob ] A list describing desired metadata alterations. required table_oid int Identity of the table whose metadata we\u2019ll modify. required database_id int The Django id of the database containing the table. required columns.metadata.ColumnMetaDataRecord \u00b6 Bases: TypedDict Metadata for a column in a table. Only the database , table_oid , and attnum keys are required. Attributes: Name Type Description database_id int The Django id of the database containing the table. table_oid int The OID of the table containing the column. attnum int The attnum of the column in the table. bool_input Optional [ Literal ['dropdown', 'checkbox']] How the input for a boolean column should be shown. bool_true Optional [ str ] A string to display for true values. bool_false Optional [ str ] A string to display for false values. num_min_frac_digits Optional [ int ] Minimum digits shown after the decimal point. num_max_frac_digits Optional [ int ] Maximum digits shown after the decimal point. num_grouping Optional [ str ] Specifies how grouping separators are displayed for numeric values. num_format Optional [ str ] Specifies the locale-specific format for displaying numeric values. mon_currency_symbol Optional [ str ] The currency symbol shown for money value. mon_currency_location Optional [ Literal ['after-minus', 'end-with-space']] Where the currency symbol should be shown. time_format Optional [ str ] A string representing the format of time values. date_format Optional [ str ] A string representing the format of date values. duration_min Optional [ str ] The smallest unit for displaying durations. duration_max Optional [ str ] The largest unit for displaying durations. display_width Optional [ int ] The pixel width of the column columns.metadata.ColumnMetaDataBlob \u00b6 Bases: TypedDict The metadata fields which can be set for a column in a table. Attributes: Name Type Description attnum int The attnum of the column in the table. bool_input Optional [ Literal ['dropdown', 'checkbox']] How the input for a boolean column should be shown. bool_true Optional [ str ] A string to display for true values. bool_false Optional [ str ] A string to display for false values. num_min_frac_digits Optional [ int ] Minimum digits shown after the decimal point. num_max_frac_digits Optional [ int ] Maximum digits shown after the decimal point. num_grouping Optional [ str ] Specifies how grouping separators are displayed for numeric values. num_format Optional [ str ] Specifies the locale-specific format for displaying numeric values. mon_currency_symbol Optional [ str ] The currency symbol shown for money value. mon_currency_location Optional [ Literal ['after-minus', 'end-with-space']] Where the currency symbol should be shown. time_format Optional [ str ] A string representing the format of time values. date_format Optional [ str ] A string representing the format of date values. duration_min Optional [ str ] The smallest unit for displaying durations. duration_max Optional [ str ] The largest unit for displaying durations. display_width Optional [ int ] The pixel width of the column Configured Databases \u00b6 databases.configured.list_ \u00b6 list_ ( * , server_id = None , ** kwargs ) List information about databases for a server. Exposed as list . If called with no server_id , all databases for all servers are listed. Parameters: Name Type Description Default server_id int The Django id of the server containing the databases. None Returns: Type Description list [ ConfiguredDatabaseInfo ] A list of database details. databases.configured.patch \u00b6 patch ( * , database_id , patch , ** kwargs ) Patch a configured database, given its id. Parameters: Name Type Description Default database_id int The Django id of the database required patch ConfiguredDatabasePatch An object containing the fields to update. required Returns: Type Description ConfiguredDatabaseInfo An object describing the database. databases.configured.disconnect \u00b6 disconnect ( * , database_id , schemas_to_remove = [ 'msar' , '__msar' , 'mathesar_types' ], strict = True , role_name = None , password = None , disconnect_db_server = False ) Disconnect a configured database, after removing Mathesar SQL from it. If no role_name and password are submitted, we will determine the role which owns the msar schema on the database, then use that role for the SQL removal. All removals are performed safely, and without CASCADE . This is to make sure the user can\u2019t accidentally lose data calling this function. Parameters: Name Type Description Default database_id int The Django id of the database. required schemas_to_remove list [ str ] Mathesar schemas we should remove SQL from. ['msar', '__msar', 'mathesar_types'] strict bool If True, we throw an exception and roll back changes if we fail to remove any objects which we expected to remove. True role_name str the username of the role used for upgrading. None password str the password of the role used for upgrading. None disconnect_db_server bool If True, will delete the stored server metadata(host, port, role credentials) from Mathesar. This is intended for optional use while disconnecting the last database on the server. False databases.configured.ConfiguredDatabaseInfo \u00b6 Bases: TypedDict Information about a database. Attributes: Name Type Description id int the Django ID of the database model instance. name str The name of the database on the server. server_id int the Django ID of the server model instance for the database. last_confirmed_sql_version str The last version of the SQL scripts which were confirmed to have been run on this database. needs_upgrade_attention bool This is True if the SQL version isn\u2019t the same as the service version. nickname Optional [ str ] A optional user-configurable name for the database. databases.configured.ConfiguredDatabasePatch \u00b6 Bases: TypedDict Information to be changed about a configured database Attributes: Name Type Description name Optional [ str ] The name of the database on the server. nickname Optional [ str ] A optional user-configurable name for the database. Constraints \u00b6 Classes and functions exposed to the RPC endpoint for managing table constraints. constraints.list_ \u00b6 list_ ( * , table_oid , database_id , ** kwargs ) List information about constraints in a table. Exposed as list . Parameters: Name Type Description Default table_oid int The oid of the table to list constraints for. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ConstraintInfo ] A list of constraint details. constraints.add \u00b6 add ( * , table_oid , constraint_def_list , database_id , ** kwargs ) Add constraint(s) on a table in bulk. Parameters: Name Type Description Default table_oid int Identity of the table to delete constraint for. required constraint_def_list CreatableConstraintInfo A list describing the constraints to add. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ int ] The oid(s) of all the constraints on the table. constraints.delete \u00b6 delete ( * , table_oid , constraint_oid , database_id , ** kwargs ) Delete a constraint from a table. Parameters: Name Type Description Default table_oid int Identity of the table to delete constraint for. required constraint_oid int The OID of the constraint to delete. required database_id int The Django id of the database containing the table. required Returns: Type Description str The name of the dropped constraint. constraints.ForeignKeyConstraint \u00b6 Bases: TypedDict Information about a foreign key constraint. Attributes: Name Type Description type str The type of the constraint( 'f' for foreign key constraint). columns list [ int ] List of columns to set a foreign key on. fkey_relation_id int The OID of the referent table. fkey_columns list [ int ] List of referent column(s). name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction. fkey_update_action Optional [ str ] Specifies what action should be taken when the referenced key is updated. Valid options include 'a'(no action) (default behavior), 'r'(restrict) , 'c'(cascade) , 'n'(set null) , 'd'(set default) fkey_delete_action Optional [ str ] Specifies what action should be taken when the referenced key is deleted. Valid options include 'a'(no action) (default behavior), 'r'(restrict) , 'c'(cascade) , 'n'(set null) , 'd'(set default) fkey_match_type Optional [ str ] Specifies how the foreign key matching should be performed. Valid options include 'f'(full match) , 's'(simple match) (default behavior). constraints.PrimaryKeyConstraint \u00b6 Bases: TypedDict Information about a primary key constraint. Attributes: Name Type Description type str The type of the constraint( 'p' for primary key constraint). columns list [ int ] List of columns to set a primary key on. name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction. constraints.UniqueConstraint \u00b6 Bases: TypedDict Information about a unique constraint. Attributes: Name Type Description type str The type of the constraint( 'u' for unique constraint). columns list [ int ] List of columns to set a unique constraint on. name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction. constraints.CreatableConstraintInfo module-attribute \u00b6 CreatableConstraintInfo = list [ Union [ ForeignKeyConstraint , PrimaryKeyConstraint , UniqueConstraint ]] Type alias for a list of creatable constraints which can be unique, primary key, or foreign key constraints. Data Modeling \u00b6 Classes and functions exposed to the RPC endpoint for managing data models. data_modeling.add_foreign_key_column \u00b6 add_foreign_key_column ( * , column_name , referrer_table_oid , referent_table_oid , database_id , ** kwargs ) Add a foreign key column to a table. The foreign key column will be newly created, and will reference the id column of the referent table. Parameters: Name Type Description Default column_name str The name of the column to create. required referrer_table_oid int The OID of the table getting the new column. required referent_table_oid int The OID of the table being referenced. required data_modeling.add_mapping_table \u00b6 add_mapping_table ( * , table_name , mapping_columns , schema_oid , database_id , ** kwargs ) Add a mapping table to give a many-to-many link between referents. The foreign key columns in the mapping table will reference the id column of the referent tables. Parameters: Name Type Description Default table_name str The name for the new mapping table. required schema_oid int The OID of the schema for the mapping table. required mapping_columns list [ MappingColumn ] The foreign key columns to create in the mapping table. required data_modeling.suggest_types \u00b6 suggest_types ( * , table_oid , database_id , ** kwargs ) Infer the best type for each column in the table. Currently we only suggest different types for columns which originate as type text . Parameters: Name Type Description Default table_oid int The OID of the table whose columns we\u2019re inferring types for. required database_id int The Django id of the database containing the table. required The response JSON will have attnum keys, and values will be the result of format_type for the inferred type of each column, i.e., the canonical string referring to the type. data_modeling.split_table \u00b6 split_table ( * , table_oid , column_attnums , extracted_table_name , database_id , relationship_fk_column_name = None , ** kwargs ) Extract columns from a table to create a new table, linked by a foreign key. Parameters: Name Type Description Default table_oid int The OID of the table whose columns we\u2019ll extract. required column_attnums list A list of the attnums of the columns to extract. required extracted_table_name str The name of the new table to be made from the extracted columns. required database_id int The Django id of the database containing the table. required relationship_fk_column_name str The name to give the new foreign key column in the remainder table (optional) None Returns: Type Description SplitTableInfo The SplitTableInfo object describing the details for the created table as a result of column extraction. data_modeling.move_columns \u00b6 move_columns ( * , source_table_oid , target_table_oid , move_column_attnums , database_id , ** kwargs ) Extract columns from a table to a referent table, linked by a foreign key. Parameters: Name Type Description Default source_table_oid int The OID of the source table whose column(s) we\u2019ll extract. required target_table_oid int The OID of the target table where the extracted column(s) will be added. required move_column_attnums list [ int ] The list of attnum(s) to move from source table to the target table. required database_id int The Django id of the database containing the table. required data_modeling.MappingColumn \u00b6 Bases: TypedDict An object defining a foreign key column in a mapping table. Attributes: Name Type Description column_name str The name of the foreign key column. referent_table_oid int The OID of the table the column references. data_modeling.SplitTableInfo \u00b6 Bases: TypedDict Information about a table, created from column extraction. Attributes: Name Type Description extracted_table_oid int The OID of the table that is created from column extraction. new_fkey_attnum int The attnum of the newly created foreign key column referring the extracted_table on the original table. Databases \u00b6 databases.get \u00b6 get ( * , database_id , ** kwargs ) Get information about a database. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description DatabaseInfo Information about the database, and the current user privileges. databases.delete \u00b6 delete ( * , database_oid , database_id , ** kwargs ) Drop a database from the server. Parameters: Name Type Description Default database_oid int The OID of the database to delete on the database. required database_id int The Django id of the database to connect to. required databases.upgrade_sql \u00b6 upgrade_sql ( * , database_id , username = None , password = None ) Install, Upgrade, or Reinstall the Mathesar SQL on a database. If no username and password are submitted, we will determine the role which owns the msar schema on the database, then use that role for the upgrade. Parameters: Name Type Description Default database_id int The Django id of the database. required username str The username of the role used for upgrading. None password str The password of the role used for upgrading. None databases.DatabaseInfo \u00b6 Bases: TypedDict Information about a database current user privileges on it. Attributes: Name Type Description oid int The oid of the database on the server. name str The name of the database on the server. owner_oid int The oid of the owner of the database. current_role_priv list [ Literal ['CONNECT', 'CREATE', 'TEMPORARY']] A list of privileges available to the user. current_role_owns bool Whether the user is an owner of the database. Database Privileges \u00b6 databases.privileges.list_direct \u00b6 list_direct ( * , database_id , ** kwargs ) List database privileges for non-inherited roles. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description list [ DBPrivileges ] A list of database privileges. databases.privileges.replace_for_roles \u00b6 replace_for_roles ( * , privileges , database_id , ** kwargs ) Replace direct database privileges for roles. Possible privileges are CONNECT , CREATE , and TEMPORARY . Only roles which are included in a passed DBPrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Attributes: Name Type Description privileges The new privilege sets for roles. database_id The Django id of the database. Returns: Type Description list [ DBPrivileges ] A list of all non-default privileges on the database after the list [ DBPrivileges ] operation. databases.privileges.transfer_ownership \u00b6 transfer_ownership ( * , new_owner_oid , database_id , ** kwargs ) Transfers ownership of the current database to a new owner. Attributes: Name Type Description new_owner_oid The OID of the role whom we want to be the new owner of the current database. database_id The Django id of the database whose ownership is to be transferred. To successfully transfer ownership of a database to a new owner the current user must: Be a Superuser/Owner of the current database. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATEDB privilege. Returns: Type Description DatabaseInfo Information about the database, and the current user privileges. databases.privileges.DBPrivileges \u00b6 Bases: TypedDict Information about database privileges. Attributes: Name Type Description role_oid int The oid of the role on the database server. direct list [ Literal ['CONNECT', 'CREATE', 'TEMPORARY']] A list of database privileges for the aforementioned role_oid. Database Setup \u00b6 RPC functions for setting up database connections. databases.setup.create_new \u00b6 create_new ( * , database , sample_data = [], nickname = None , ** kwargs ) Set up a new database on the internal server. The calling user will get access to that database using the default role stored in Django settings. Parameters: Name Type Description Default database str The name of the new database. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are: - \u2018bike_shop\u2019 - \u2018hardware_store\u2019 - \u2018ice_cream_employees\u2019 - \u2018library_management\u2019 - \u2018library_makerspace\u2019 - \u2018museum_exhibits\u2019 - \u2018nonprofit_grants\u2019 [] nickname Optional [ str ] An optional nickname for the database. None databases.setup.connect_existing \u00b6 connect_existing ( * , host , port , database , role , password , sample_data = [], nickname = None , ** kwargs ) Connect Mathesar to an existing database on a server. The calling user will get access to that database using the credentials passed to this function. Parameters: Name Type Description Default host str The host of the database server. required port int The port of the database server. required database str The name of the database on the server. required role str The role on the server to use for the connection. required password str A password valid for the role. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are: - \u2018bike_shop\u2019 - \u2018hardware_store\u2019 - \u2018ice_cream_employees\u2019 - \u2018library_management\u2019 - \u2018library_makerspace\u2019 - \u2018museum_exhibits\u2019 - \u2018nonprofit_grants\u2019 [] nickname Optional [ str ] An optional nickname for the database. None databases.setup.DatabaseConnectionResult \u00b6 Bases: TypedDict Info about the objects resulting from calling the setup functions. These functions will get or create an instance of the Server, Database, and ConfiguredRole models, as well as a UserDatabaseRoleMap entry. Attributes: Name Type Description server ConfiguredServerInfo Information on the Server model instance. database ConfiguredDatabaseInfo Information on the Database model instance. configured_role ConfiguredRoleInfo Information on the ConfiguredRole model instance. Explorations \u00b6 Classes and functions exposed to the RPC endpoint for managing explorations. explorations.list_ \u00b6 list_ ( * , database_id , schema_oid = None , ** kwargs ) List information about explorations for a database. Exposed as list . Parameters: Name Type Description Default database_id int The Django id of the database containing the explorations. required schema_oid int The OID of the schema containing the base table(s) of the exploration(s).(optional) None Returns: Type Description list [ ExplorationInfo ] A list of exploration details. explorations.get \u00b6 get ( * , exploration_id , ** kwargs ) List information about an exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration. required Returns: Type Description ExplorationInfo Exploration details for a given exploration_id. explorations.add \u00b6 add ( * , exploration_def ) Add a new exploration. Parameters: Name Type Description Default exploration_def ExplorationDef A dict describing the exploration to create. required Returns: Type Description ExplorationInfo The exploration details for the newly created exploration. explorations.delete \u00b6 delete ( * , exploration_id , ** kwargs ) Delete an exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration to delete. required explorations.replace \u00b6 replace ( * , new_exploration ) Replace a saved exploration. Parameters: Name Type Description Default new_exploration ExplorationInfo A dict describing the exploration to replace, including the updated fields. required Returns: Type Description ExplorationInfo The exploration details for the replaced exploration. explorations.run \u00b6 run ( * , exploration_def , limit = 100 , offset = 0 , ** kwargs ) Run an exploration. Parameters: Name Type Description Default exploration_def ExplorationDef A dict describing an exploration to run. required limit int The max number of rows to return.(default 100) 100 offset int The number of rows to skip.(default 0) 0 Returns: Type Description ExplorationResult The result of the exploration run. explorations.run_saved \u00b6 run_saved ( * , exploration_id , limit = 100 , offset = 0 , ** kwargs ) Run a saved exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration to run. required limit int The max number of rows to return.(default 100) 100 offset int The number of rows to skip.(default 0) 0 Returns: Type Description ExplorationResult The result of the exploration run. explorations.ExplorationInfo \u00b6 Bases: TypedDict Information about an exploration. Attributes: Name Type Description id int The Django id of an exploration. database_id int The Django id of the database containing the exploration. name str The name of the exploration. base_table_oid int The OID of the base table of the exploration on the database. schema_oid int The OID of the schema containing the base table of the exploration. initial_columns list A list describing the columns to be included in the exploration. transformations Optional [ list ] A list describing the transformations to be made on the included columns. display_options Optional [ list ] A list describing metadata for the columns in the explorations. display_names Optional [ dict ] A map between the actual column names on the database and the alias to be displayed(if any). description Optional [ str ] The description of the exploration. explorations.ExplorationDef \u00b6 Bases: TypedDict Definition about a runnable exploration. Attributes: Name Type Description database_id int The Django id of the database containing the exploration. name str The name of the exploration. base_table_oid int The OID of the base table of the exploration on the database. schema_oid int The OID of the schema containing the base table of the exploration. initial_columns list A list describing the columns to be included in the exploration. transformations Optional [ list ] A list describing the transformations to be made on the included columns. display_options Optional [ list ] A list describing metadata for the columns in the explorations. display_names Optional [ dict ] A map between the actual column names on the database and the alias to be displayed(if any). description Optional [ str ] The description of the exploration. explorations.ExplorationResult \u00b6 Bases: TypedDict Result of an exploration run. Attributes: Name Type Description query dict A dict describing the exploration that ran. records dict A dict describing the total count of records along with the contents of those records. output_columns tuple A tuple describing the names of the columns included in the exploration. column_metadata dict A dict describing the metadata applied to included columns. limit Optional [ int ] Specifies the max number of rows returned.(default 100) offset Optional [ int ] Specifies the number of rows skipped.(default 0) Records \u00b6 Classes and functions exposed to the RPC endpoint for managing table records. records.list_ \u00b6 list_ ( * , table_oid , database_id , limit = None , offset = None , order = None , filter = None , grouping = None , return_record_summaries = False , ** kwargs ) List records from a table, and its row count. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required limit int The maximum number of rows we\u2019ll return. None offset int The number of rows to skip before returning records from following rows. None order list [ OrderBy ] An array of ordering definition objects. None filter Filter An array of filter definition objects. None grouping Grouping An array of group definition objects. None return_record_summaries bool Whether to return summaries of retrieved records. False Returns: Type Description RecordList The requested records, along with some metadata. records.get \u00b6 get ( * , record_id , table_oid , database_id , return_record_summaries = False , table_record_summary_templates = None , ** kwargs ) Get single record from a table by its primary key. Parameters: Name Type Description Default record_id Any The primary key value of the record to be gotten. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the retrieved record. False table_record_summary_templates dict [ str , Any ] A dict of record summary templates. If none are provided, then the templates will be take from the Django metadata. Any templates provided will take precedence on a per-table basis over the stored metadata templates. The purpose of this function parameter is to allow clients to generate record summary previews without persisting any metadata. None Returns: The requested record, along with some metadata. records.add \u00b6 add ( * , record_def , table_oid , database_id , return_record_summaries = False , ** kwargs ) Add a single record to a table. The form of the record_def is determined by the underlying table. Keys should be attnums, and values should be the desired value for that column in the created record. Missing keys will use default values (if set on the DB), and explicit null values will set null for that value regardless of default (with obvious exceptions where that would violate some constraint) Parameters: Name Type Description Default record_def dict An object representing the record to be added. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the added record. False Returns: Type Description RecordAdded The created record, along with some metadata. records.patch \u00b6 patch ( * , record_def , record_id , table_oid , database_id , return_record_summaries = False , ** kwargs ) Modify a record in a table. The form of the record_def is determined by the underlying table. Keys should be attnums, and values should be the desired value for that column in the modified record. Explicit null values will set null for that value (with obvious exceptions where that would violate some constraint). Parameters: Name Type Description Default record_def dict An object representing the record to be added. required record_id Any The primary key value of the record to modify. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the modified record. False Returns: Type Description RecordAdded The modified record, along with some metadata. records.delete \u00b6 delete ( * , record_ids , table_oid , database_id , ** kwargs ) Delete records from a table by primary key. Parameters: Name Type Description Default record_ids list [ Any ] The primary key values of the records to be deleted. required table_oid int The identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description Optional [ int ] The number of records deleted. records.search \u00b6 search ( * , table_oid , database_id , search_params = [], limit = 10 , return_record_summaries = False , ** kwargs ) List records from a table according to search_params . Literals will be searched for in a basic way in string-like columns, but will have to match exactly in non-string-like columns. Records are assigned a score based on how many matches, and of what quality, they have with the passed search parameters. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required search_params list [ SearchParam ] Results are ranked and filtered according to the objects passed here. [] limit int The maximum number of rows we\u2019ll return. 10 Returns: Type Description RecordList The requested records, along with some metadata. records.RecordList \u00b6 Bases: TypedDict Records from a table, along with some meta data The form of the objects in the results array is determined by the underlying records being listed. The keys of each object are the attnums of the retrieved columns. The values are the value for the given row, for the given column. Attributes: Name Type Description count int The total number of records in the table. results list [ dict ] An array of record objects. grouping GroupingResponse Information for displaying grouped records. linked_record_smmaries GroupingResponse Information for previewing foreign key values, provides a map of foreign key to a text summary. record_summaries dict [ str , str ] Information for previewing returned records. records.RecordAdded \u00b6 Bases: TypedDict Record from a table, along with some meta data The form of the object in the results array is determined by the underlying records being listed. The keys of each object are the attnums of the retrieved columns. The values are the value for the given row, for the given column. Attributes: Name Type Description results list [ dict ] An array of a single record objects (the one added). linked_record_summaries dict [ str , dict [ str , str ]] Information for previewing foreign key values, provides a map of foreign key to a text summary. record_summaries dict [ str , str ] Information for previewing an added record. records.OrderBy \u00b6 Bases: TypedDict An object defining an ORDER BY clause. Attributes: Name Type Description attnum int The attnum of the column to order by. direction Literal ['asc', 'desc'] The direction to order by. records.Filter \u00b6 Bases: TypedDict An object defining a filter to be used in a WHERE clause. For valid type values, see the msar.filter_templates table defined in mathesar/db/sql/05_msar.sql . Attributes: Name Type Description type str a function or operator to be used in filtering. args list [ Union [ Filter , FilterAttnum , FilterLiteral ]] The ordered arguments for the function or operator. records.FilterAttnum \u00b6 Bases: TypedDict An object choosing a column for a filter. Attributes: Name Type Description type Literal ['attnum'] Must be \"attnum\" value int The attnum of the column to filter by records.FilterLiteral \u00b6 Bases: TypedDict An object defining a literal for an argument to a filter. Attributes: Name Type Description type Literal ['literal'] must be \"literal\" . value Any The value of the literal. records.Grouping \u00b6 Bases: TypedDict Grouping definition. The table involved must have a single column primary key. Attributes: Name Type Description columns list [ int ] The columns to be grouped by. preproc list [ str ] The preprocessing functions to apply (if any). records.Group \u00b6 Bases: TypedDict Group definition. Note that the count is over all rows in the group, whether returned or not. However, result_indices is restricted to only the rows returned. This is to avoid potential problems if there are many rows in the group (e.g., the whole table), but we only return a few. Attributes: Name Type Description id int The id of the group. Consistent for same input. count int The number of items in the group. results_eq list [ dict ] The value the results of the group equal. result_indices list [ int ] The 0-indexed positions of group members in the results array. records.GroupingResponse \u00b6 Bases: TypedDict Grouping response object. Extends Grouping with actual groups. Attributes: Name Type Description columns list [ int ] The columns to be grouped by. preproc list [ str ] The preprocessing functions to apply (if any). groups list [ Group ] The groups applicable to the records being returned. records.SearchParam \u00b6 Bases: TypedDict Search definition for a single column. Attributes: Name Type Description attnum int The attnum of the column in the table. literal Any The literal to search for in the column. Roles \u00b6 roles.list_ \u00b6 list_ ( * , database_id , ** kwargs ) List information about roles for a database server. Exposed as list . Requires a database id inorder to connect to the server. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description list [ RoleInfo ] A list of roles present on the database server. roles.add \u00b6 add ( * , rolename , database_id , password = None , login = None , ** kwargs ) Add a new login/non-login role on a database server. Parameters: Name Type Description Default rolename str The name of the role to be created. required database_id int The Django id of the database. required password str The password for the rolename to set. None login bool Whether the role to be created could login. None Returns: Type Description RoleInfo A dict describing the created role. roles.delete \u00b6 delete ( * , role_oid , database_id , ** kwargs ) Drop a role on a database server. Parameters: Name Type Description Default role_oid int The OID of the role to drop on the database. required database_id int The Django id of the database. required roles.get_current_role \u00b6 get_current_role ( * , database_id , ** kwargs ) Get information about the current role and all the parent role(s) whose privileges are immediately available to current role without doing SET ROLE. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description dict A dict describing the current role. roles.set_members \u00b6 set_members ( * , parent_role_oid , members , database_id , ** kwargs ) Grant/Revoke direct membership to/from roles. Parameters: Name Type Description Default parent_role_oid int The OID of role whose membership will be granted/revoked to/from other roles. required members list An array of role OID(s) whom we want to grant direct membership of the parent role. Only the OID(s) present in the array will be granted membership of parent role, Membership will be revoked for existing members not present in this array. required Returns: Type Description RoleInfo A dict describing the updated information of the parent role. roles.RoleInfo \u00b6 Bases: TypedDict Information about a role. Attributes: Name Type Description oid int The OID of the role. name str Name of the role. super bool Whether the role has SUPERUSER status. inherits bool Whether the role has INHERIT attribute. create_role bool Whether the role has CREATEROLE attribute. create_db bool Whether the role has CREATEDB attribute. login bool Whether the role has LOGIN attribute. description Optional [ str ] A description of the role members Optional [ list [ RoleMember ]] The member roles that directly inherit the role. Refer PostgreSQL documentation on pg_roles table . Role attributes Role membership roles.RoleMember \u00b6 Bases: TypedDict Information about a member role of a directly inherited role. Attributes: Name Type Description oid int The OID of the member role. admin bool Whether the member role has ADMIN option on the inherited role. Roles Configured \u00b6 roles.configured.list_ \u00b6 list_ ( * , server_id , ** kwargs ) List information about roles configured in Mathesar. Exposed as list . Parameters: Name Type Description Default server_id int The Django id of the Server containing the configured roles. required Returns: Type Description list [ ConfiguredRoleInfo ] A list of configured roles. roles.configured.add \u00b6 add ( * , server_id , name , password , ** kwargs ) Configure a role in Mathesar for a database server. Parameters: Name Type Description Default server_id int The Django id of the Server to contain the configured role. required name str The name of the role. required password str The password for the role. required Returns: Type Description ConfiguredRoleInfo The newly configured role. roles.configured.delete \u00b6 delete ( * , configured_role_id , ** kwargs ) Delete a configured role for a server. Parameters: Name Type Description Default configured_role_id int The Django id of the ConfiguredRole model instance. required roles.configured.set_password \u00b6 set_password ( * , configured_role_id , password , ** kwargs ) Set the password of a configured role for a server. Parameters: Name Type Description Default configured_role_id int The Django id of the ConfiguredRole model instance. required password str The password for the role. required roles.configured.ConfiguredRoleInfo \u00b6 Bases: TypedDict Information about a role configured in Mathesar. Attributes: Name Type Description id int the Django ID of the ConfiguredRole model instance. name str The name of the role. server_id int The Django ID of the Server model instance for the role. Schemas \u00b6 schemas.list_ \u00b6 list_ ( * , database_id , ** kwargs ) List information about schemas in a database. Exposed as list . Parameters: Name Type Description Default database_id int The Django id of the database containing the table. required Returns: Type Description list [ SchemaInfo ] A list of SchemaInfo objects schemas.get \u00b6 get ( * , schema_oid , database_id , ** kwargs ) Get information about a schema in a database. Parameters: Name Type Description Default schema_oid int The OID of the schema to get. required database_id int The Django id of the database containing the table. required Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database. schemas.add \u00b6 add ( * , name , database_id , owner_oid = None , description = None , ** kwargs ) Add a schema Parameters: Name Type Description Default name str The name of the schema to add. required database_id int The Django id of the database containing the schema. required owner_oid int The OID of the role who will own the new schema. If owner_oid is None, the current role will be the owner of the new schema. None description Optional [ str ] A description of the schema None Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database. schemas.delete \u00b6 delete ( * , schema_oids , database_id , ** kwargs ) Safely drop all objects in each schema, then the schemas themselves. Does not work on the internal msar schema. If any passed schema doesn\u2019t exist, an exception will be raised. If any object exists in a schema which isn\u2019t passed, but which depends on an object in a passed schema, an exception will be raised. Parameters: Name Type Description Default schema_oids list [ int ] The OIDs of the schemas to delete. required database_id int The Django id of the database containing the schema. required schemas.patch \u00b6 patch ( * , schema_oid , database_id , patch , ** kwargs ) Patch a schema, given its OID. Parameters: Name Type Description Default schema_oid int The OID of the schema to delete. required database_id int The Django id of the database containing the schema. required patch SchemaPatch A SchemaPatch object containing the fields to update. required Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database. schemas.SchemaInfo \u00b6 Bases: TypedDict Information about a schema Attributes: Name Type Description oid int The OID of the schema name str The name of the schema description Optional [ str ] A description of the schema owner_oid int The OID of the owner of the schema current_role_priv list [ Literal ['USAGE', 'CREATE']] All privileges available to the calling role on the schema. current_role_owns bool Whether the current role is the owner of the schema (even indirectly). table_count int The number of tables in the schema schemas.SchemaPatch \u00b6 Bases: TypedDict Attributes: Name Type Description name Optional [ str ] The name of the schema description Optional [ str ] A description of the schema Schema Privileges \u00b6 schemas.privileges.list_direct \u00b6 list_direct ( * , schema_oid , database_id , ** kwargs ) List direct schema privileges for roles. Parameters: Name Type Description Default schema_oid int The OID of the schema whose privileges we\u2019ll list. required database_id int The Django id of the database containing the schema. required Returns: Type Description list [ SchemaPrivileges ] A list of schema privileges. schemas.privileges.replace_for_roles \u00b6 replace_for_roles ( * , privileges , schema_oid , database_id , ** kwargs ) Replace direct schema privileges for roles. Possible privileges are USAGE and CREATE . Only roles which are included in a passed SchemaPrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Parameters: Name Type Description Default privileges list [ SchemaPrivileges ] The new privilege sets for roles. required schema_oid int The OID of the affected schema. required database_id int The Django id of the database containing the schema. required Returns: Type Description list [ SchemaPrivileges ] A list of all non-default privileges on the schema after the list [ SchemaPrivileges ] operation. schemas.privileges.transfer_ownership \u00b6 transfer_ownership ( * , schema_oid , new_owner_oid , database_id , ** kwargs ) Transfers ownership of a given schema to a new owner. Attributes: Name Type Description schema_oid The OID of the schema to transfer. new_owner_oid The OID of the role whom we want to be the new owner of the schema. To successfully transfer ownership of a schema to a new owner the current user must: Be a Superuser/Owner of the schema. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATE privilege for the database. Returns: Type Description SchemaInfo Information about the schema, and the current user privileges. schemas.privileges.SchemaPrivileges \u00b6 Bases: TypedDict Information about schema privileges for a role. Attributes: Name Type Description role_oid int The oid of the role. direct list [ Literal ['USAGE', 'CREATE']] A list of schema privileges for the aforementioned role_oid. Servers \u00b6 Tables \u00b6 tables.list_ \u00b6 list_ ( * , schema_oid , database_id , ** kwargs ) List information about tables for a schema. Exposed as list . Parameters: Name Type Description Default schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ TableInfo ] A list of table details. tables.get \u00b6 get ( * , table_oid , database_id , ** kwargs ) List information about a table for a schema. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description TableInfo Table details for a given table oid. tables.add \u00b6 add ( * , schema_oid , database_id , table_name = None , column_data_list = [], constraint_data_list = [], owner_oid = None , comment = None , ** kwargs ) Add a table with a default id column. Parameters: Name Type Description Default schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required table_name str Name of the table to be created. None column_data_list list [ CreatableColumnInfo ] A list describing columns to be created for the new table, in order. [] constraint_data_list list [ CreatableConstraintInfo ] A list describing constraints to be created for the new table. [] owner_oid int The OID of the role who will own the new table. If owner_oid is None, the current role will be the owner of the new table. None comment str The comment for the new table. None Returns: Type Description AddedTableInfo The oid & name of the created table. tables.delete \u00b6 delete ( * , table_oid , database_id , cascade = False , ** kwargs ) Delete a table from a schema. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required cascade bool Whether to drop the dependent objects. False Returns: Type Description str The name of the dropped table. tables.patch \u00b6 patch ( * , table_oid , table_data_dict , database_id , ** kwargs ) Alter details of a preexisting table in a database. Parameters: Name Type Description Default table_oid str Identity of the table whose name, description or columns we\u2019ll modify. required table_data_dict SettableTableInfo A list describing desired table alterations. required database_id int The Django id of the database containing the table. required Returns: Type Description str The name of the altered table. tables.import_ \u00b6 import_ ( * , data_file_id , schema_oid , database_id , table_name = None , comment = None , ** kwargs ) Import a CSV/TSV into a table. Parameters: Name Type Description Default data_file_id int The Django id of the DataFile containing desired CSV/TSV. required schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required table_name str Name of the table to be imported. None comment str The comment for the new table. None Returns: Type Description AddedTableInfo The oid and name of the created table. tables.get_import_preview \u00b6 get_import_preview ( * , table_oid , columns , database_id , limit = 20 , ** kwargs ) Preview an imported table. Parameters: Name Type Description Default table_oid int Identity of the imported table in the user\u2019s database. required columns list [ PreviewableColumnInfo ] List of settings describing the casts to be applied to the columns. required database_id int The Django id of the database containing the table. required limit int The upper limit for the number of records to return. 20 Returns: Type Description list [ dict ] The records from the specified columns of the table. tables.list_joinable \u00b6 list_joinable ( * , table_oid , database_id , max_depth = 3 , ** kwargs ) List details for joinable tables. Parameters: Name Type Description Default table_oid int Identity of the table to get joinable tables for. required database_id int The Django id of the database containing the table. required max_depth int Specifies how far to search for joinable tables. 3 Returns: Type Description JoinableTableInfo Joinable table details for a given table. tables.list_with_metadata \u00b6 list_with_metadata ( * , schema_oid , database_id , ** kwargs ) List tables in a schema, along with the metadata associated with each table Parameters: Name Type Description Default schema_oid int PostgreSQL OID of the schema containing the tables. required database_id int The Django id of the database containing the table. required Returns: Type Description list A list of table details along with metadata. tables.get_with_metadata \u00b6 get_with_metadata ( * , table_oid , database_id , ** kwargs ) Get information about a table in a schema, along with the associated table metadata. Parameters: Name Type Description Default table_oid int The OID of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description dict A dict describing table details along with its metadata. tables.TableInfo \u00b6 Bases: TypedDict Information about a table. Attributes: Name Type Description oid int The oid of the table in the schema. name str The name of the table. schema int The oid of the schema where the table lives. description Optional [ str ] The description of the table. owner_oid int The OID of the direct owner of the table. current_role_priv list [ Literal ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES', 'TRIGGER']] The privileges available to the user on the table. current_role_owns bool Whether the current role owns the table. tables.AddedTableInfo \u00b6 Bases: TypedDict Information about a newly created table. Attributes: Name Type Description oid int The oid of the table in the schema. name str The name of the table. tables.SettableTableInfo \u00b6 Bases: TypedDict Information about a table, restricted to settable fields. When possible, Passing null for a key will clear the underlying setting. E.g., description = null clears the table description. Setting any of name , columns to null is a noop. Attributes: Name Type Description name Optional [ str ] The new name of the table. description Optional [ str ] The description of the table. columns Optional [ list [ SettableColumnInfo ]] A list describing desired column alterations. tables.JoinableTableRecord \u00b6 Bases: TypedDict Information about a singular joinable table. Attributes: Name Type Description base int The OID of the table from which the paths start target int The OID of the table where the paths end. join_path list A list describing joinable paths in the following form: [ [[L_oid0, L_attnum0], [R_oid0, R_attnum0]], [[L_oid1, L_attnum1], [R_oid1, R_attnum1]], [[L_oid2, L_attnum2], [R_oid2, R_attnum2]], \u2026 ] Here, [L_oidN, L_attnumN] represents the left column of a join, and [R_oidN, R_attnumN] the right. fkey_path list Same as join_path expressed in terms of foreign key constraints in the following form: [ [constraint_id0, reversed], [constraint_id1, reversed], ] In this form, constraint_idN is a foreign key constraint, and reversed is a boolean giving whether to travel from referrer to referent (when False) or from referent to referrer (when True). depth int Specifies how far to search for joinable tables. multiple_results bool Specifies whether the path included is reversed. tables.JoinableTableInfo \u00b6 Bases: TypedDict Information about joinable table(s). Attributes: Name Type Description joinable_tables list [ JoinableTableRecord ] List of reachable joinable table(s) from a base table. target_table_info list Additional info about target table(s) and its column(s). Table Metadata \u00b6 Classes and functions exposed to the RPC endpoint for managing table metadata. tables.metadata.list_ \u00b6 list_ ( * , database_id , ** kwargs ) List metadata associated with tables for a database. Parameters: Name Type Description Default database_id int The Django id of the database containing the table. required Returns: Type Description list [ TableMetaDataRecord ] Metadata object for a given table oid. tables.metadata.set_ \u00b6 set_ ( * , table_oid , metadata , database_id , ** kwargs ) Set metadata for a table. Parameters: Name Type Description Default table_oid int The PostgreSQL OID of the table. required metadata TableMetaDataBlob A TableMetaDataBlob object describing desired table metadata to set. required database_id int The Django id of the database containing the table. required tables.metadata.TableMetaDataBlob \u00b6 Bases: TypedDict The metadata fields which can be set on a table Attributes: Name Type Description data_file_id Optional [ int ] Specifies the DataFile model id used for the import. import_verified Optional [ bool ] Specifies whether a file has been successfully imported into a table. column_order Optional [ list [ int ]] The order in which columns of a table are displayed. record_summary_template Optional [ dict [ str , Union [ str , list [ int ]]]] The record summary template tables.metadata.TableMetaDataRecord \u00b6 Bases: TypedDict Metadata for a table in a database. Only the database and table_oid keys are required. Attributes: Name Type Description id int The Django id of the TableMetaData object. database_id int The Django id of the database containing the table. table_oid int The OID of the table in the database. data_file_id Optional [ int ] Specifies the DataFile model id used for the import. import_verified Optional [ bool ] Specifies whether a file has been successfully imported into a table. column_order Optional [ list [ int ]] The order in which columns of a table are displayed. record_summary_template Optional [ dict [ str , Union [ str , list [ int ]]]] The record summary template Table Privileges \u00b6 tables.privileges.list_direct \u00b6 list_direct ( * , table_oid , database_id , ** kwargs ) List direct table privileges for roles. Args: table_oid: The OID of the table whose privileges we\u2019ll list. database_id: The Django id of the database containing the table. Returns: A list of table privileges. tables.privileges.replace_for_roles \u00b6 replace_for_roles ( * , privileges , table_oid , database_id , ** kwargs ) Replace direct table privileges for roles. Possible privileges are INSERT , SELECT , UPDATE , DELETE , TRUNCATE , REFERENCES and TRIGGER . Only roles which are included in a passed TablePrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Parameters: Name Type Description Default privileges list [ TablePrivileges ] The new privilege sets for roles. required table_oid int The OID of the affected table. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ TablePrivileges ] A list of all non-default privileges on the table after the list [ TablePrivileges ] operation. tables.privileges.transfer_ownership \u00b6 transfer_ownership ( * , table_oid , new_owner_oid , database_id , ** kwargs ) Transfers ownership of a given table to a new owner. Attributes: Name Type Description table_oid The OID of the table to transfer. new_owner_oid The OID of the role whom we want to be the new owner of the table. To successfully transfer ownership of a table to a new owner the current user must: Be a Superuser/Owner of the table. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATE privilege on the table\u2019s schema. Returns: Type Description TableInfo Information about the table, and the current user privileges. tables.privileges.TablePrivileges \u00b6 Bases: TypedDict Information about table privileges for a role. Attributes: role_oid: The oid of the role. direct: A list of table privileges for the aforementioned role_oid. Users \u00b6 Classes and functions exposed to the RPC endpoint for managing mathesar users. users.list_ \u00b6 list_ () List information about all mathesar users. Exposed as list . Returns: Type Description list [ UserInfo ] A list of information about mathesar users. users.get \u00b6 get ( * , user_id ) List information about a mathesar user. Parameters: Name Type Description Default user_id int The Django id of the user. required Returns: Type Description UserInfo User information for a given user_id. users.add \u00b6 add ( * , user_def ) Add a new mathesar user. Parameters: Name Type Description Default user_def UserDef A dict describing the user to create. required Privileges This endpoint requires the caller to be a superuser. Returns: Type Description UserInfo The information of the created user. users.delete \u00b6 delete ( * , user_id ) Delete a mathesar user. Parameters: Name Type Description Default user_id int The Django id of the user to delete. required Privileges This endpoint requires the caller to be a superuser. users.patch_self \u00b6 patch_self ( * , username , email , full_name , display_language , ** kwargs ) Alter details of currently logged in mathesar user. Parameters: Name Type Description Default username str The username of the user. required email str The email of the user. required full_name str The full name of the user. required display_language str Specifies the display language for the user, can be set to either en or ja . required Returns: Type Description UserInfo Updated user information of the caller. users.patch_other \u00b6 patch_other ( * , user_id , username , is_superuser , email , full_name , display_language ) Alter details of a mathesar user, given its user_id. Parameters: Name Type Description Default user_id int The Django id of the user. required username str The username of the user. required email str The email of the user. required is_superuser bool Specifies whether to set the user as a superuser. required full_name str The full name of the user. required display_language str Specifies the display language for the user, can be set to either en or ja . required Privileges This endpoint requires the caller to be a superuser. Returns: Type Description UserInfo Updated user information for a given user_id. users.replace_own \u00b6 replace_own ( * , old_password , new_password , ** kwargs ) Alter password of currently logged in mathesar user. Parameters: Name Type Description Default old_password str Old password of the currently logged in user. required new_password str New password of the user to set. required users.revoke \u00b6 revoke ( * , user_id , new_password ) Alter password of a mathesar user, given its user_id. Parameters: Name Type Description Default user_id int The Django id of the user. required new_password str New password of the user to set. required Privileges This endpoint requires the caller to be a superuser. users.UserInfo \u00b6 Bases: TypedDict Information about a mathesar user. Attributes: Name Type Description id int The Django id of the user. username str The username of the user. is_superuser bool Specifies whether the user is a superuser. email str The email of the user. full_name str The full name of the user. display_language str Specifies the display language for the user, can be either en or ja . users.UserDef \u00b6 Bases: TypedDict Definition for creating a mathesar user. Attributes: Name Type Description username str The username of the user. password str The password of the user. is_superuser bool Whether the user is a superuser. email Optional [ str ] The email of the user. full_name Optional [ str ] The full name of the user. display_language Optional [ str ] Specifies the display language for the user, can be set to either en or ja .","title":"Methods"},{"location":"api/methods/#api-methods","text":"","title":"API Methods"},{"location":"api/methods/#analytics","text":"Classes and functions exposed to the RPC endpoint for managing analytics.","title":"Analytics"},{"location":"api/methods/#analytics.get_state","text":"get_state () Returns: Type Description AnalyticsState A boolean to identify if analytics is enabled.","title":"get_state"},{"location":"api/methods/#analytics.initialize","text":"initialize () Initialize analytics collection and reporting in Mathesar If initialized, analytics are gathered to a local model once per day, and uploaded.","title":"initialize"},{"location":"api/methods/#analytics.disable","text":"disable () Disable analytics collection and reporting in Mathesar Disabling analytics amounts to (for now) simply deleting the Installation ID, ensuring that it\u2019s impossible to save analytics reports. Any reports currently saved are removed when the Installation ID is deleted.","title":"disable"},{"location":"api/methods/#analytics.view_report","text":"view_report () View an example analytics report, prepared with the same function that creates real reports that would be saved and uploaded. Returns: Type Description AnalyticsReport An analytics report.","title":"view_report"},{"location":"api/methods/#analytics.upload_feedback","text":"upload_feedback ( message ) Upload a feedback message to Mathesar\u2019s servers. Parameters: Name Type Description Default message str The feedback message to send. required","title":"upload_feedback"},{"location":"api/methods/#analytics.AnalyticsReport","text":"Bases: TypedDict A report with some statistics about the data accessible by Mathesar. Attributes: Name Type Description installation_id Optional [ str ] A unique ID for this Mathesar installation. mathesar_version str The version of Mathesar. user_count int The number of configured users in Mathesar. active_user_count int The number of users who have recently logged in. configured_role_count int The number of DB roles configured. connected_database_count int The number of databases configured. connected_database_schema_count int The number of all schemas in all connected databases. connected_database_table_count int The total number of tables in all connected databasees. connected_database_record_count int The total number of records in all connected databasees (approximated) exploration_count int The number of explorations.","title":"AnalyticsReport"},{"location":"api/methods/#analytics.AnalyticsState","text":"Bases: TypedDict Returns the current state of analytics. Attributes: Name Type Description enabled bool A boolean representing if analytics is enabled.","title":"AnalyticsState"},{"location":"api/methods/#collaborators","text":"","title":"Collaborators"},{"location":"api/methods/#collaborators.list_","text":"list_ ( * , database_id = None , ** kwargs ) List information about collaborators. Exposed as list . If called with no database_id , all collaborators for all databases are listed. Parameters: Name Type Description Default database_id int The Django id of the database associated with the collaborators. None Returns: Type Description list [ CollaboratorInfo ] A list of collaborators.","title":"list_"},{"location":"api/methods/#collaborators.add","text":"add ( * , database_id , user_id , configured_role_id , ** kwargs ) Set up a new collaborator for a database. Parameters: Name Type Description Default database_id int The Django id of the Database to associate with the collaborator. required user_id int The Django id of the User model instance who\u2019d be the collaborator. required configured_role_id int The Django id of the ConfiguredRole model instance to associate with the collaborator. required","title":"add"},{"location":"api/methods/#collaborators.delete","text":"delete ( * , collaborator_id , ** kwargs ) Delete a collaborator from a database. Parameters: Name Type Description Default collaborator_id int The Django id of the UserDatabaseRoleMap model instance of the collaborator. required","title":"delete"},{"location":"api/methods/#collaborators.set_role","text":"set_role ( * , collaborator_id , configured_role_id , ** kwargs ) Set the role of a collaborator for a database. Parameters: Name Type Description Default collaborator_id int The Django id of the UserDatabaseRoleMap model instance of the collaborator. required configured_role_id int The Django id of the ConfiguredRole model instance to associate with the collaborator. required","title":"set_role"},{"location":"api/methods/#collaborators.CollaboratorInfo","text":"Bases: TypedDict Information about a collaborator. Attributes: Name Type Description id int the Django ID of the UserDatabaseRoleMap model instance. user_id int The Django ID of the User model instance of the collaborator. database_id int the Django ID of the Database model instance for the collaborator. configured_role_id int The Django ID of the ConfiguredRole model instance for the collaborator.","title":"CollaboratorInfo"},{"location":"api/methods/#columns","text":"","title":"Columns"},{"location":"api/methods/#columns.list_","text":"list_ ( * , table_oid , database_id , ** kwargs ) List information about columns for a table. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ColumnInfo ] A list of column details.","title":"list_"},{"location":"api/methods/#columns.add","text":"add ( * , column_data_list , table_oid , database_id , ** kwargs ) Add columns to a table. There are defaults for both the name and type of a column, and so passing [{}] for column_data_list would add a single column of type CHARACTER VARYING , with an auto-generated name. Parameters: Name Type Description Default column_data_list list [ CreatableColumnInfo ] A list describing desired columns to add. required table_oid int Identity of the table to which we\u2019ll add columns. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ int ] An array of the attnums of the new columns.","title":"add"},{"location":"api/methods/#columns.patch","text":"patch ( * , column_data_list , table_oid , database_id , ** kwargs ) Alter details of preexisting columns in a table. Does not support altering the type or type options of array columns. Parameters: Name Type Description Default column_data_list list [ SettableColumnInfo ] A list describing desired column alterations. required table_oid int Identity of the table whose columns we\u2019ll modify. required database_id int The Django id of the database containing the table. required Returns: Type Description int The number of columns altered.","title":"patch"},{"location":"api/methods/#columns.delete","text":"delete ( * , column_attnums , table_oid , database_id , ** kwargs ) Delete columns from a table. Parameters: Name Type Description Default column_attnums list [ int ] A list of attnums of columns to delete. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description int The number of columns dropped.","title":"delete"},{"location":"api/methods/#columns.list_with_metadata","text":"list_with_metadata ( * , table_oid , database_id , ** kwargs ) List information about columns for a table, along with the metadata associated with each column. Args: table_oid: Identity of the table in the user\u2019s database. database_id: The Django id of the database containing the table. Returns: A list of column details.","title":"list_with_metadata"},{"location":"api/methods/#columns.ColumnInfo","text":"Bases: TypedDict Information about a column. Extends the settable fields. Attributes: Name Type Description id int The attnum of the column in the table. name str The name of the column. type str The type of the column on the database. type_options TypeOptions The options applied to the column type. nullable bool Whether or not the column is nullable. primary_key bool Whether the column is in the primary key. default ColumnDefault The default value and whether it\u2019s dynamic. has_dependents bool Whether the column has dependent objects. description str The description of the column. current_role_priv list [ Literal ['SELECT', 'INSERT', 'UPDATE', 'REFERENCES']] The privileges available to the user for the column. valid_target_types list [ str ] A list of all types to which the column can be cast.","title":"ColumnInfo"},{"location":"api/methods/#columns.CreatableColumnInfo","text":"Bases: TypedDict Information needed to add a new column. No keys are required. Attributes: Name Type Description name Optional [ str ] The name of the column. type Optional [ str ] The type of the column on the database. type_options Optional [ TypeOptions ] The options applied to the column type. nullable Optional [ bool ] Whether or not the column is nullable. default Optional [ ColumnDefault ] The default value. description Optional [ str ] The description of the column.","title":"CreatableColumnInfo"},{"location":"api/methods/#columns.PreviewableColumnInfo","text":"Bases: TypedDict Information needed to preview a column. Attributes: Name Type Description id int The attnum of the column in the table. type Optional [ str ] The new type to be applied to a column. type_options Optional [ TypeOptions ] The options to be applied to the column type.","title":"PreviewableColumnInfo"},{"location":"api/methods/#columns.SettableColumnInfo","text":"Bases: TypedDict Information about a column, restricted to settable fields. When possible, Passing null for a key will clear the underlying setting. E.g., default = null clears the column default setting. type_options = null clears the type options for the column. description = null clears the column description. Setting any of name , type , or nullable is a noop. Only the id key is required. Attributes: Name Type Description id int The attnum of the column in the table. name Optional [ str ] The name of the column. type Optional [ str ] The type of the column on the database. type_options Optional [ TypeOptions ] The options applied to the column type. nullable Optional [ bool ] Whether or not the column is nullable. default Optional [ ColumnDefault ] The default value. description Optional [ str ] The description of the column.","title":"SettableColumnInfo"},{"location":"api/methods/#columns.TypeOptions","text":"Bases: TypedDict Options applied to a type. All attributes are optional. Take special care with the difference between numeric and date/time types w.r.t. precision. The attribute has a different meaning depending on the type to which it\u2019s being applied. Attributes: Name Type Description precision int For numeric types, the number of significant digits. For date/time types, the number of fractional digits. scale int For numeric types, the number of fractional digits. fields str Which time fields are stored. See Postgres docs. length int The maximum length of a character-type field. item_type str The member type for arrays.","title":"TypeOptions"},{"location":"api/methods/#columns.ColumnDefault","text":"Bases: TypedDict A dictionary describing the default value for a column. Attributes: Name Type Description value str An SQL expression giving the default value. is_dynamic bool Whether the value is possibly dynamic.","title":"ColumnDefault"},{"location":"api/methods/#column-metadata","text":"Classes and functions exposed to the RPC endpoint for managing column metadata.","title":"Column Metadata"},{"location":"api/methods/#columns.metadata.list_","text":"list_ ( * , table_oid , database_id , ** kwargs ) List metadata associated with columns for a table. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ColumnMetaDataRecord ] A list of column meta data objects.","title":"list_"},{"location":"api/methods/#columns.metadata.set_","text":"set_ ( * , column_meta_data_list , table_oid , database_id , ** kwargs ) Set metadata associated with columns of a table for a database. Exposed as set . Parameters: Name Type Description Default column_meta_data_list list [ ColumnMetaDataBlob ] A list describing desired metadata alterations. required table_oid int Identity of the table whose metadata we\u2019ll modify. required database_id int The Django id of the database containing the table. required","title":"set_"},{"location":"api/methods/#columns.metadata.ColumnMetaDataRecord","text":"Bases: TypedDict Metadata for a column in a table. Only the database , table_oid , and attnum keys are required. Attributes: Name Type Description database_id int The Django id of the database containing the table. table_oid int The OID of the table containing the column. attnum int The attnum of the column in the table. bool_input Optional [ Literal ['dropdown', 'checkbox']] How the input for a boolean column should be shown. bool_true Optional [ str ] A string to display for true values. bool_false Optional [ str ] A string to display for false values. num_min_frac_digits Optional [ int ] Minimum digits shown after the decimal point. num_max_frac_digits Optional [ int ] Maximum digits shown after the decimal point. num_grouping Optional [ str ] Specifies how grouping separators are displayed for numeric values. num_format Optional [ str ] Specifies the locale-specific format for displaying numeric values. mon_currency_symbol Optional [ str ] The currency symbol shown for money value. mon_currency_location Optional [ Literal ['after-minus', 'end-with-space']] Where the currency symbol should be shown. time_format Optional [ str ] A string representing the format of time values. date_format Optional [ str ] A string representing the format of date values. duration_min Optional [ str ] The smallest unit for displaying durations. duration_max Optional [ str ] The largest unit for displaying durations. display_width Optional [ int ] The pixel width of the column","title":"ColumnMetaDataRecord"},{"location":"api/methods/#columns.metadata.ColumnMetaDataBlob","text":"Bases: TypedDict The metadata fields which can be set for a column in a table. Attributes: Name Type Description attnum int The attnum of the column in the table. bool_input Optional [ Literal ['dropdown', 'checkbox']] How the input for a boolean column should be shown. bool_true Optional [ str ] A string to display for true values. bool_false Optional [ str ] A string to display for false values. num_min_frac_digits Optional [ int ] Minimum digits shown after the decimal point. num_max_frac_digits Optional [ int ] Maximum digits shown after the decimal point. num_grouping Optional [ str ] Specifies how grouping separators are displayed for numeric values. num_format Optional [ str ] Specifies the locale-specific format for displaying numeric values. mon_currency_symbol Optional [ str ] The currency symbol shown for money value. mon_currency_location Optional [ Literal ['after-minus', 'end-with-space']] Where the currency symbol should be shown. time_format Optional [ str ] A string representing the format of time values. date_format Optional [ str ] A string representing the format of date values. duration_min Optional [ str ] The smallest unit for displaying durations. duration_max Optional [ str ] The largest unit for displaying durations. display_width Optional [ int ] The pixel width of the column","title":"ColumnMetaDataBlob"},{"location":"api/methods/#configured-databases","text":"","title":"Configured Databases"},{"location":"api/methods/#databases.configured.list_","text":"list_ ( * , server_id = None , ** kwargs ) List information about databases for a server. Exposed as list . If called with no server_id , all databases for all servers are listed. Parameters: Name Type Description Default server_id int The Django id of the server containing the databases. None Returns: Type Description list [ ConfiguredDatabaseInfo ] A list of database details.","title":"list_"},{"location":"api/methods/#databases.configured.patch","text":"patch ( * , database_id , patch , ** kwargs ) Patch a configured database, given its id. Parameters: Name Type Description Default database_id int The Django id of the database required patch ConfiguredDatabasePatch An object containing the fields to update. required Returns: Type Description ConfiguredDatabaseInfo An object describing the database.","title":"patch"},{"location":"api/methods/#databases.configured.disconnect","text":"disconnect ( * , database_id , schemas_to_remove = [ 'msar' , '__msar' , 'mathesar_types' ], strict = True , role_name = None , password = None , disconnect_db_server = False ) Disconnect a configured database, after removing Mathesar SQL from it. If no role_name and password are submitted, we will determine the role which owns the msar schema on the database, then use that role for the SQL removal. All removals are performed safely, and without CASCADE . This is to make sure the user can\u2019t accidentally lose data calling this function. Parameters: Name Type Description Default database_id int The Django id of the database. required schemas_to_remove list [ str ] Mathesar schemas we should remove SQL from. ['msar', '__msar', 'mathesar_types'] strict bool If True, we throw an exception and roll back changes if we fail to remove any objects which we expected to remove. True role_name str the username of the role used for upgrading. None password str the password of the role used for upgrading. None disconnect_db_server bool If True, will delete the stored server metadata(host, port, role credentials) from Mathesar. This is intended for optional use while disconnecting the last database on the server. False","title":"disconnect"},{"location":"api/methods/#databases.configured.ConfiguredDatabaseInfo","text":"Bases: TypedDict Information about a database. Attributes: Name Type Description id int the Django ID of the database model instance. name str The name of the database on the server. server_id int the Django ID of the server model instance for the database. last_confirmed_sql_version str The last version of the SQL scripts which were confirmed to have been run on this database. needs_upgrade_attention bool This is True if the SQL version isn\u2019t the same as the service version. nickname Optional [ str ] A optional user-configurable name for the database.","title":"ConfiguredDatabaseInfo"},{"location":"api/methods/#databases.configured.ConfiguredDatabasePatch","text":"Bases: TypedDict Information to be changed about a configured database Attributes: Name Type Description name Optional [ str ] The name of the database on the server. nickname Optional [ str ] A optional user-configurable name for the database.","title":"ConfiguredDatabasePatch"},{"location":"api/methods/#constraints","text":"Classes and functions exposed to the RPC endpoint for managing table constraints.","title":"Constraints"},{"location":"api/methods/#constraints.list_","text":"list_ ( * , table_oid , database_id , ** kwargs ) List information about constraints in a table. Exposed as list . Parameters: Name Type Description Default table_oid int The oid of the table to list constraints for. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ ConstraintInfo ] A list of constraint details.","title":"list_"},{"location":"api/methods/#constraints.add","text":"add ( * , table_oid , constraint_def_list , database_id , ** kwargs ) Add constraint(s) on a table in bulk. Parameters: Name Type Description Default table_oid int Identity of the table to delete constraint for. required constraint_def_list CreatableConstraintInfo A list describing the constraints to add. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ int ] The oid(s) of all the constraints on the table.","title":"add"},{"location":"api/methods/#constraints.delete","text":"delete ( * , table_oid , constraint_oid , database_id , ** kwargs ) Delete a constraint from a table. Parameters: Name Type Description Default table_oid int Identity of the table to delete constraint for. required constraint_oid int The OID of the constraint to delete. required database_id int The Django id of the database containing the table. required Returns: Type Description str The name of the dropped constraint.","title":"delete"},{"location":"api/methods/#constraints.ForeignKeyConstraint","text":"Bases: TypedDict Information about a foreign key constraint. Attributes: Name Type Description type str The type of the constraint( 'f' for foreign key constraint). columns list [ int ] List of columns to set a foreign key on. fkey_relation_id int The OID of the referent table. fkey_columns list [ int ] List of referent column(s). name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction. fkey_update_action Optional [ str ] Specifies what action should be taken when the referenced key is updated. Valid options include 'a'(no action) (default behavior), 'r'(restrict) , 'c'(cascade) , 'n'(set null) , 'd'(set default) fkey_delete_action Optional [ str ] Specifies what action should be taken when the referenced key is deleted. Valid options include 'a'(no action) (default behavior), 'r'(restrict) , 'c'(cascade) , 'n'(set null) , 'd'(set default) fkey_match_type Optional [ str ] Specifies how the foreign key matching should be performed. Valid options include 'f'(full match) , 's'(simple match) (default behavior).","title":"ForeignKeyConstraint"},{"location":"api/methods/#constraints.PrimaryKeyConstraint","text":"Bases: TypedDict Information about a primary key constraint. Attributes: Name Type Description type str The type of the constraint( 'p' for primary key constraint). columns list [ int ] List of columns to set a primary key on. name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction.","title":"PrimaryKeyConstraint"},{"location":"api/methods/#constraints.UniqueConstraint","text":"Bases: TypedDict Information about a unique constraint. Attributes: Name Type Description type str The type of the constraint( 'u' for unique constraint). columns list [ int ] List of columns to set a unique constraint on. name Optional [ str ] The name of the constraint. deferrable Optional [ bool ] Whether to postpone constraint checking until the end of the transaction.","title":"UniqueConstraint"},{"location":"api/methods/#constraints.CreatableConstraintInfo","text":"CreatableConstraintInfo = list [ Union [ ForeignKeyConstraint , PrimaryKeyConstraint , UniqueConstraint ]] Type alias for a list of creatable constraints which can be unique, primary key, or foreign key constraints.","title":"CreatableConstraintInfo"},{"location":"api/methods/#data-modeling","text":"Classes and functions exposed to the RPC endpoint for managing data models.","title":"Data Modeling"},{"location":"api/methods/#data_modeling.add_foreign_key_column","text":"add_foreign_key_column ( * , column_name , referrer_table_oid , referent_table_oid , database_id , ** kwargs ) Add a foreign key column to a table. The foreign key column will be newly created, and will reference the id column of the referent table. Parameters: Name Type Description Default column_name str The name of the column to create. required referrer_table_oid int The OID of the table getting the new column. required referent_table_oid int The OID of the table being referenced. required","title":"add_foreign_key_column"},{"location":"api/methods/#data_modeling.add_mapping_table","text":"add_mapping_table ( * , table_name , mapping_columns , schema_oid , database_id , ** kwargs ) Add a mapping table to give a many-to-many link between referents. The foreign key columns in the mapping table will reference the id column of the referent tables. Parameters: Name Type Description Default table_name str The name for the new mapping table. required schema_oid int The OID of the schema for the mapping table. required mapping_columns list [ MappingColumn ] The foreign key columns to create in the mapping table. required","title":"add_mapping_table"},{"location":"api/methods/#data_modeling.suggest_types","text":"suggest_types ( * , table_oid , database_id , ** kwargs ) Infer the best type for each column in the table. Currently we only suggest different types for columns which originate as type text . Parameters: Name Type Description Default table_oid int The OID of the table whose columns we\u2019re inferring types for. required database_id int The Django id of the database containing the table. required The response JSON will have attnum keys, and values will be the result of format_type for the inferred type of each column, i.e., the canonical string referring to the type.","title":"suggest_types"},{"location":"api/methods/#data_modeling.split_table","text":"split_table ( * , table_oid , column_attnums , extracted_table_name , database_id , relationship_fk_column_name = None , ** kwargs ) Extract columns from a table to create a new table, linked by a foreign key. Parameters: Name Type Description Default table_oid int The OID of the table whose columns we\u2019ll extract. required column_attnums list A list of the attnums of the columns to extract. required extracted_table_name str The name of the new table to be made from the extracted columns. required database_id int The Django id of the database containing the table. required relationship_fk_column_name str The name to give the new foreign key column in the remainder table (optional) None Returns: Type Description SplitTableInfo The SplitTableInfo object describing the details for the created table as a result of column extraction.","title":"split_table"},{"location":"api/methods/#data_modeling.move_columns","text":"move_columns ( * , source_table_oid , target_table_oid , move_column_attnums , database_id , ** kwargs ) Extract columns from a table to a referent table, linked by a foreign key. Parameters: Name Type Description Default source_table_oid int The OID of the source table whose column(s) we\u2019ll extract. required target_table_oid int The OID of the target table where the extracted column(s) will be added. required move_column_attnums list [ int ] The list of attnum(s) to move from source table to the target table. required database_id int The Django id of the database containing the table. required","title":"move_columns"},{"location":"api/methods/#data_modeling.MappingColumn","text":"Bases: TypedDict An object defining a foreign key column in a mapping table. Attributes: Name Type Description column_name str The name of the foreign key column. referent_table_oid int The OID of the table the column references.","title":"MappingColumn"},{"location":"api/methods/#data_modeling.SplitTableInfo","text":"Bases: TypedDict Information about a table, created from column extraction. Attributes: Name Type Description extracted_table_oid int The OID of the table that is created from column extraction. new_fkey_attnum int The attnum of the newly created foreign key column referring the extracted_table on the original table.","title":"SplitTableInfo"},{"location":"api/methods/#databases","text":"","title":"Databases"},{"location":"api/methods/#databases.get","text":"get ( * , database_id , ** kwargs ) Get information about a database. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description DatabaseInfo Information about the database, and the current user privileges.","title":"get"},{"location":"api/methods/#databases.delete","text":"delete ( * , database_oid , database_id , ** kwargs ) Drop a database from the server. Parameters: Name Type Description Default database_oid int The OID of the database to delete on the database. required database_id int The Django id of the database to connect to. required","title":"delete"},{"location":"api/methods/#databases.upgrade_sql","text":"upgrade_sql ( * , database_id , username = None , password = None ) Install, Upgrade, or Reinstall the Mathesar SQL on a database. If no username and password are submitted, we will determine the role which owns the msar schema on the database, then use that role for the upgrade. Parameters: Name Type Description Default database_id int The Django id of the database. required username str The username of the role used for upgrading. None password str The password of the role used for upgrading. None","title":"upgrade_sql"},{"location":"api/methods/#databases.DatabaseInfo","text":"Bases: TypedDict Information about a database current user privileges on it. Attributes: Name Type Description oid int The oid of the database on the server. name str The name of the database on the server. owner_oid int The oid of the owner of the database. current_role_priv list [ Literal ['CONNECT', 'CREATE', 'TEMPORARY']] A list of privileges available to the user. current_role_owns bool Whether the user is an owner of the database.","title":"DatabaseInfo"},{"location":"api/methods/#database-privileges","text":"","title":"Database Privileges"},{"location":"api/methods/#databases.privileges.list_direct","text":"list_direct ( * , database_id , ** kwargs ) List database privileges for non-inherited roles. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description list [ DBPrivileges ] A list of database privileges.","title":"list_direct"},{"location":"api/methods/#databases.privileges.replace_for_roles","text":"replace_for_roles ( * , privileges , database_id , ** kwargs ) Replace direct database privileges for roles. Possible privileges are CONNECT , CREATE , and TEMPORARY . Only roles which are included in a passed DBPrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Attributes: Name Type Description privileges The new privilege sets for roles. database_id The Django id of the database. Returns: Type Description list [ DBPrivileges ] A list of all non-default privileges on the database after the list [ DBPrivileges ] operation.","title":"replace_for_roles"},{"location":"api/methods/#databases.privileges.transfer_ownership","text":"transfer_ownership ( * , new_owner_oid , database_id , ** kwargs ) Transfers ownership of the current database to a new owner. Attributes: Name Type Description new_owner_oid The OID of the role whom we want to be the new owner of the current database. database_id The Django id of the database whose ownership is to be transferred. To successfully transfer ownership of a database to a new owner the current user must: Be a Superuser/Owner of the current database. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATEDB privilege. Returns: Type Description DatabaseInfo Information about the database, and the current user privileges.","title":"transfer_ownership"},{"location":"api/methods/#databases.privileges.DBPrivileges","text":"Bases: TypedDict Information about database privileges. Attributes: Name Type Description role_oid int The oid of the role on the database server. direct list [ Literal ['CONNECT', 'CREATE', 'TEMPORARY']] A list of database privileges for the aforementioned role_oid.","title":"DBPrivileges"},{"location":"api/methods/#database-setup","text":"RPC functions for setting up database connections.","title":"Database Setup"},{"location":"api/methods/#databases.setup.create_new","text":"create_new ( * , database , sample_data = [], nickname = None , ** kwargs ) Set up a new database on the internal server. The calling user will get access to that database using the default role stored in Django settings. Parameters: Name Type Description Default database str The name of the new database. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are: - \u2018bike_shop\u2019 - \u2018hardware_store\u2019 - \u2018ice_cream_employees\u2019 - \u2018library_management\u2019 - \u2018library_makerspace\u2019 - \u2018museum_exhibits\u2019 - \u2018nonprofit_grants\u2019 [] nickname Optional [ str ] An optional nickname for the database. None","title":"create_new"},{"location":"api/methods/#databases.setup.connect_existing","text":"connect_existing ( * , host , port , database , role , password , sample_data = [], nickname = None , ** kwargs ) Connect Mathesar to an existing database on a server. The calling user will get access to that database using the credentials passed to this function. Parameters: Name Type Description Default host str The host of the database server. required port int The port of the database server. required database str The name of the database on the server. required role str The role on the server to use for the connection. required password str A password valid for the role. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are: - \u2018bike_shop\u2019 - \u2018hardware_store\u2019 - \u2018ice_cream_employees\u2019 - \u2018library_management\u2019 - \u2018library_makerspace\u2019 - \u2018museum_exhibits\u2019 - \u2018nonprofit_grants\u2019 [] nickname Optional [ str ] An optional nickname for the database. None","title":"connect_existing"},{"location":"api/methods/#databases.setup.DatabaseConnectionResult","text":"Bases: TypedDict Info about the objects resulting from calling the setup functions. These functions will get or create an instance of the Server, Database, and ConfiguredRole models, as well as a UserDatabaseRoleMap entry. Attributes: Name Type Description server ConfiguredServerInfo Information on the Server model instance. database ConfiguredDatabaseInfo Information on the Database model instance. configured_role ConfiguredRoleInfo Information on the ConfiguredRole model instance.","title":"DatabaseConnectionResult"},{"location":"api/methods/#explorations","text":"Classes and functions exposed to the RPC endpoint for managing explorations.","title":"Explorations"},{"location":"api/methods/#explorations.list_","text":"list_ ( * , database_id , schema_oid = None , ** kwargs ) List information about explorations for a database. Exposed as list . Parameters: Name Type Description Default database_id int The Django id of the database containing the explorations. required schema_oid int The OID of the schema containing the base table(s) of the exploration(s).(optional) None Returns: Type Description list [ ExplorationInfo ] A list of exploration details.","title":"list_"},{"location":"api/methods/#explorations.get","text":"get ( * , exploration_id , ** kwargs ) List information about an exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration. required Returns: Type Description ExplorationInfo Exploration details for a given exploration_id.","title":"get"},{"location":"api/methods/#explorations.add","text":"add ( * , exploration_def ) Add a new exploration. Parameters: Name Type Description Default exploration_def ExplorationDef A dict describing the exploration to create. required Returns: Type Description ExplorationInfo The exploration details for the newly created exploration.","title":"add"},{"location":"api/methods/#explorations.delete","text":"delete ( * , exploration_id , ** kwargs ) Delete an exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration to delete. required","title":"delete"},{"location":"api/methods/#explorations.replace","text":"replace ( * , new_exploration ) Replace a saved exploration. Parameters: Name Type Description Default new_exploration ExplorationInfo A dict describing the exploration to replace, including the updated fields. required Returns: Type Description ExplorationInfo The exploration details for the replaced exploration.","title":"replace"},{"location":"api/methods/#explorations.run","text":"run ( * , exploration_def , limit = 100 , offset = 0 , ** kwargs ) Run an exploration. Parameters: Name Type Description Default exploration_def ExplorationDef A dict describing an exploration to run. required limit int The max number of rows to return.(default 100) 100 offset int The number of rows to skip.(default 0) 0 Returns: Type Description ExplorationResult The result of the exploration run.","title":"run"},{"location":"api/methods/#explorations.run_saved","text":"run_saved ( * , exploration_id , limit = 100 , offset = 0 , ** kwargs ) Run a saved exploration. Parameters: Name Type Description Default exploration_id int The Django id of the exploration to run. required limit int The max number of rows to return.(default 100) 100 offset int The number of rows to skip.(default 0) 0 Returns: Type Description ExplorationResult The result of the exploration run.","title":"run_saved"},{"location":"api/methods/#explorations.ExplorationInfo","text":"Bases: TypedDict Information about an exploration. Attributes: Name Type Description id int The Django id of an exploration. database_id int The Django id of the database containing the exploration. name str The name of the exploration. base_table_oid int The OID of the base table of the exploration on the database. schema_oid int The OID of the schema containing the base table of the exploration. initial_columns list A list describing the columns to be included in the exploration. transformations Optional [ list ] A list describing the transformations to be made on the included columns. display_options Optional [ list ] A list describing metadata for the columns in the explorations. display_names Optional [ dict ] A map between the actual column names on the database and the alias to be displayed(if any). description Optional [ str ] The description of the exploration.","title":"ExplorationInfo"},{"location":"api/methods/#explorations.ExplorationDef","text":"Bases: TypedDict Definition about a runnable exploration. Attributes: Name Type Description database_id int The Django id of the database containing the exploration. name str The name of the exploration. base_table_oid int The OID of the base table of the exploration on the database. schema_oid int The OID of the schema containing the base table of the exploration. initial_columns list A list describing the columns to be included in the exploration. transformations Optional [ list ] A list describing the transformations to be made on the included columns. display_options Optional [ list ] A list describing metadata for the columns in the explorations. display_names Optional [ dict ] A map between the actual column names on the database and the alias to be displayed(if any). description Optional [ str ] The description of the exploration.","title":"ExplorationDef"},{"location":"api/methods/#explorations.ExplorationResult","text":"Bases: TypedDict Result of an exploration run. Attributes: Name Type Description query dict A dict describing the exploration that ran. records dict A dict describing the total count of records along with the contents of those records. output_columns tuple A tuple describing the names of the columns included in the exploration. column_metadata dict A dict describing the metadata applied to included columns. limit Optional [ int ] Specifies the max number of rows returned.(default 100) offset Optional [ int ] Specifies the number of rows skipped.(default 0)","title":"ExplorationResult"},{"location":"api/methods/#records","text":"Classes and functions exposed to the RPC endpoint for managing table records.","title":"Records"},{"location":"api/methods/#records.list_","text":"list_ ( * , table_oid , database_id , limit = None , offset = None , order = None , filter = None , grouping = None , return_record_summaries = False , ** kwargs ) List records from a table, and its row count. Exposed as list . Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required limit int The maximum number of rows we\u2019ll return. None offset int The number of rows to skip before returning records from following rows. None order list [ OrderBy ] An array of ordering definition objects. None filter Filter An array of filter definition objects. None grouping Grouping An array of group definition objects. None return_record_summaries bool Whether to return summaries of retrieved records. False Returns: Type Description RecordList The requested records, along with some metadata.","title":"list_"},{"location":"api/methods/#records.get","text":"get ( * , record_id , table_oid , database_id , return_record_summaries = False , table_record_summary_templates = None , ** kwargs ) Get single record from a table by its primary key. Parameters: Name Type Description Default record_id Any The primary key value of the record to be gotten. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the retrieved record. False table_record_summary_templates dict [ str , Any ] A dict of record summary templates. If none are provided, then the templates will be take from the Django metadata. Any templates provided will take precedence on a per-table basis over the stored metadata templates. The purpose of this function parameter is to allow clients to generate record summary previews without persisting any metadata. None Returns: The requested record, along with some metadata.","title":"get"},{"location":"api/methods/#records.add","text":"add ( * , record_def , table_oid , database_id , return_record_summaries = False , ** kwargs ) Add a single record to a table. The form of the record_def is determined by the underlying table. Keys should be attnums, and values should be the desired value for that column in the created record. Missing keys will use default values (if set on the DB), and explicit null values will set null for that value regardless of default (with obvious exceptions where that would violate some constraint) Parameters: Name Type Description Default record_def dict An object representing the record to be added. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the added record. False Returns: Type Description RecordAdded The created record, along with some metadata.","title":"add"},{"location":"api/methods/#records.patch","text":"patch ( * , record_def , record_id , table_oid , database_id , return_record_summaries = False , ** kwargs ) Modify a record in a table. The form of the record_def is determined by the underlying table. Keys should be attnums, and values should be the desired value for that column in the modified record. Explicit null values will set null for that value (with obvious exceptions where that would violate some constraint). Parameters: Name Type Description Default record_def dict An object representing the record to be added. required record_id Any The primary key value of the record to modify. required table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required return_record_summaries bool Whether to return summaries of the modified record. False Returns: Type Description RecordAdded The modified record, along with some metadata.","title":"patch"},{"location":"api/methods/#records.delete","text":"delete ( * , record_ids , table_oid , database_id , ** kwargs ) Delete records from a table by primary key. Parameters: Name Type Description Default record_ids list [ Any ] The primary key values of the records to be deleted. required table_oid int The identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description Optional [ int ] The number of records deleted.","title":"delete"},{"location":"api/methods/#records.search","text":"search ( * , table_oid , database_id , search_params = [], limit = 10 , return_record_summaries = False , ** kwargs ) List records from a table according to search_params . Literals will be searched for in a basic way in string-like columns, but will have to match exactly in non-string-like columns. Records are assigned a score based on how many matches, and of what quality, they have with the passed search parameters. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required search_params list [ SearchParam ] Results are ranked and filtered according to the objects passed here. [] limit int The maximum number of rows we\u2019ll return. 10 Returns: Type Description RecordList The requested records, along with some metadata.","title":"search"},{"location":"api/methods/#records.RecordList","text":"Bases: TypedDict Records from a table, along with some meta data The form of the objects in the results array is determined by the underlying records being listed. The keys of each object are the attnums of the retrieved columns. The values are the value for the given row, for the given column. Attributes: Name Type Description count int The total number of records in the table. results list [ dict ] An array of record objects. grouping GroupingResponse Information for displaying grouped records. linked_record_smmaries GroupingResponse Information for previewing foreign key values, provides a map of foreign key to a text summary. record_summaries dict [ str , str ] Information for previewing returned records.","title":"RecordList"},{"location":"api/methods/#records.RecordAdded","text":"Bases: TypedDict Record from a table, along with some meta data The form of the object in the results array is determined by the underlying records being listed. The keys of each object are the attnums of the retrieved columns. The values are the value for the given row, for the given column. Attributes: Name Type Description results list [ dict ] An array of a single record objects (the one added). linked_record_summaries dict [ str , dict [ str , str ]] Information for previewing foreign key values, provides a map of foreign key to a text summary. record_summaries dict [ str , str ] Information for previewing an added record.","title":"RecordAdded"},{"location":"api/methods/#records.OrderBy","text":"Bases: TypedDict An object defining an ORDER BY clause. Attributes: Name Type Description attnum int The attnum of the column to order by. direction Literal ['asc', 'desc'] The direction to order by.","title":"OrderBy"},{"location":"api/methods/#records.Filter","text":"Bases: TypedDict An object defining a filter to be used in a WHERE clause. For valid type values, see the msar.filter_templates table defined in mathesar/db/sql/05_msar.sql . Attributes: Name Type Description type str a function or operator to be used in filtering. args list [ Union [ Filter , FilterAttnum , FilterLiteral ]] The ordered arguments for the function or operator.","title":"Filter"},{"location":"api/methods/#records.FilterAttnum","text":"Bases: TypedDict An object choosing a column for a filter. Attributes: Name Type Description type Literal ['attnum'] Must be \"attnum\" value int The attnum of the column to filter by","title":"FilterAttnum"},{"location":"api/methods/#records.FilterLiteral","text":"Bases: TypedDict An object defining a literal for an argument to a filter. Attributes: Name Type Description type Literal ['literal'] must be \"literal\" . value Any The value of the literal.","title":"FilterLiteral"},{"location":"api/methods/#records.Grouping","text":"Bases: TypedDict Grouping definition. The table involved must have a single column primary key. Attributes: Name Type Description columns list [ int ] The columns to be grouped by. preproc list [ str ] The preprocessing functions to apply (if any).","title":"Grouping"},{"location":"api/methods/#records.Group","text":"Bases: TypedDict Group definition. Note that the count is over all rows in the group, whether returned or not. However, result_indices is restricted to only the rows returned. This is to avoid potential problems if there are many rows in the group (e.g., the whole table), but we only return a few. Attributes: Name Type Description id int The id of the group. Consistent for same input. count int The number of items in the group. results_eq list [ dict ] The value the results of the group equal. result_indices list [ int ] The 0-indexed positions of group members in the results array.","title":"Group"},{"location":"api/methods/#records.GroupingResponse","text":"Bases: TypedDict Grouping response object. Extends Grouping with actual groups. Attributes: Name Type Description columns list [ int ] The columns to be grouped by. preproc list [ str ] The preprocessing functions to apply (if any). groups list [ Group ] The groups applicable to the records being returned.","title":"GroupingResponse"},{"location":"api/methods/#records.SearchParam","text":"Bases: TypedDict Search definition for a single column. Attributes: Name Type Description attnum int The attnum of the column in the table. literal Any The literal to search for in the column.","title":"SearchParam"},{"location":"api/methods/#roles","text":"","title":"Roles"},{"location":"api/methods/#roles.list_","text":"list_ ( * , database_id , ** kwargs ) List information about roles for a database server. Exposed as list . Requires a database id inorder to connect to the server. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description list [ RoleInfo ] A list of roles present on the database server.","title":"list_"},{"location":"api/methods/#roles.add","text":"add ( * , rolename , database_id , password = None , login = None , ** kwargs ) Add a new login/non-login role on a database server. Parameters: Name Type Description Default rolename str The name of the role to be created. required database_id int The Django id of the database. required password str The password for the rolename to set. None login bool Whether the role to be created could login. None Returns: Type Description RoleInfo A dict describing the created role.","title":"add"},{"location":"api/methods/#roles.delete","text":"delete ( * , role_oid , database_id , ** kwargs ) Drop a role on a database server. Parameters: Name Type Description Default role_oid int The OID of the role to drop on the database. required database_id int The Django id of the database. required","title":"delete"},{"location":"api/methods/#roles.get_current_role","text":"get_current_role ( * , database_id , ** kwargs ) Get information about the current role and all the parent role(s) whose privileges are immediately available to current role without doing SET ROLE. Parameters: Name Type Description Default database_id int The Django id of the database. required Returns: Type Description dict A dict describing the current role.","title":"get_current_role"},{"location":"api/methods/#roles.set_members","text":"set_members ( * , parent_role_oid , members , database_id , ** kwargs ) Grant/Revoke direct membership to/from roles. Parameters: Name Type Description Default parent_role_oid int The OID of role whose membership will be granted/revoked to/from other roles. required members list An array of role OID(s) whom we want to grant direct membership of the parent role. Only the OID(s) present in the array will be granted membership of parent role, Membership will be revoked for existing members not present in this array. required Returns: Type Description RoleInfo A dict describing the updated information of the parent role.","title":"set_members"},{"location":"api/methods/#roles.RoleInfo","text":"Bases: TypedDict Information about a role. Attributes: Name Type Description oid int The OID of the role. name str Name of the role. super bool Whether the role has SUPERUSER status. inherits bool Whether the role has INHERIT attribute. create_role bool Whether the role has CREATEROLE attribute. create_db bool Whether the role has CREATEDB attribute. login bool Whether the role has LOGIN attribute. description Optional [ str ] A description of the role members Optional [ list [ RoleMember ]] The member roles that directly inherit the role. Refer PostgreSQL documentation on pg_roles table . Role attributes Role membership","title":"RoleInfo"},{"location":"api/methods/#roles.RoleMember","text":"Bases: TypedDict Information about a member role of a directly inherited role. Attributes: Name Type Description oid int The OID of the member role. admin bool Whether the member role has ADMIN option on the inherited role.","title":"RoleMember"},{"location":"api/methods/#roles-configured","text":"","title":"Roles Configured"},{"location":"api/methods/#roles.configured.list_","text":"list_ ( * , server_id , ** kwargs ) List information about roles configured in Mathesar. Exposed as list . Parameters: Name Type Description Default server_id int The Django id of the Server containing the configured roles. required Returns: Type Description list [ ConfiguredRoleInfo ] A list of configured roles.","title":"list_"},{"location":"api/methods/#roles.configured.add","text":"add ( * , server_id , name , password , ** kwargs ) Configure a role in Mathesar for a database server. Parameters: Name Type Description Default server_id int The Django id of the Server to contain the configured role. required name str The name of the role. required password str The password for the role. required Returns: Type Description ConfiguredRoleInfo The newly configured role.","title":"add"},{"location":"api/methods/#roles.configured.delete","text":"delete ( * , configured_role_id , ** kwargs ) Delete a configured role for a server. Parameters: Name Type Description Default configured_role_id int The Django id of the ConfiguredRole model instance. required","title":"delete"},{"location":"api/methods/#roles.configured.set_password","text":"set_password ( * , configured_role_id , password , ** kwargs ) Set the password of a configured role for a server. Parameters: Name Type Description Default configured_role_id int The Django id of the ConfiguredRole model instance. required password str The password for the role. required","title":"set_password"},{"location":"api/methods/#roles.configured.ConfiguredRoleInfo","text":"Bases: TypedDict Information about a role configured in Mathesar. Attributes: Name Type Description id int the Django ID of the ConfiguredRole model instance. name str The name of the role. server_id int The Django ID of the Server model instance for the role.","title":"ConfiguredRoleInfo"},{"location":"api/methods/#schemas","text":"","title":"Schemas"},{"location":"api/methods/#schemas.list_","text":"list_ ( * , database_id , ** kwargs ) List information about schemas in a database. Exposed as list . Parameters: Name Type Description Default database_id int The Django id of the database containing the table. required Returns: Type Description list [ SchemaInfo ] A list of SchemaInfo objects","title":"list_"},{"location":"api/methods/#schemas.get","text":"get ( * , schema_oid , database_id , ** kwargs ) Get information about a schema in a database. Parameters: Name Type Description Default schema_oid int The OID of the schema to get. required database_id int The Django id of the database containing the table. required Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database.","title":"get"},{"location":"api/methods/#schemas.add","text":"add ( * , name , database_id , owner_oid = None , description = None , ** kwargs ) Add a schema Parameters: Name Type Description Default name str The name of the schema to add. required database_id int The Django id of the database containing the schema. required owner_oid int The OID of the role who will own the new schema. If owner_oid is None, the current role will be the owner of the new schema. None description Optional [ str ] A description of the schema None Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database.","title":"add"},{"location":"api/methods/#schemas.delete","text":"delete ( * , schema_oids , database_id , ** kwargs ) Safely drop all objects in each schema, then the schemas themselves. Does not work on the internal msar schema. If any passed schema doesn\u2019t exist, an exception will be raised. If any object exists in a schema which isn\u2019t passed, but which depends on an object in a passed schema, an exception will be raised. Parameters: Name Type Description Default schema_oids list [ int ] The OIDs of the schemas to delete. required database_id int The Django id of the database containing the schema. required","title":"delete"},{"location":"api/methods/#schemas.patch","text":"patch ( * , schema_oid , database_id , patch , ** kwargs ) Patch a schema, given its OID. Parameters: Name Type Description Default schema_oid int The OID of the schema to delete. required database_id int The Django id of the database containing the schema. required patch SchemaPatch A SchemaPatch object containing the fields to update. required Returns: Type Description SchemaInfo The SchemaInfo describing the user-defined schema in the database.","title":"patch"},{"location":"api/methods/#schemas.SchemaInfo","text":"Bases: TypedDict Information about a schema Attributes: Name Type Description oid int The OID of the schema name str The name of the schema description Optional [ str ] A description of the schema owner_oid int The OID of the owner of the schema current_role_priv list [ Literal ['USAGE', 'CREATE']] All privileges available to the calling role on the schema. current_role_owns bool Whether the current role is the owner of the schema (even indirectly). table_count int The number of tables in the schema","title":"SchemaInfo"},{"location":"api/methods/#schemas.SchemaPatch","text":"Bases: TypedDict Attributes: Name Type Description name Optional [ str ] The name of the schema description Optional [ str ] A description of the schema","title":"SchemaPatch"},{"location":"api/methods/#schema-privileges","text":"","title":"Schema Privileges"},{"location":"api/methods/#schemas.privileges.list_direct","text":"list_direct ( * , schema_oid , database_id , ** kwargs ) List direct schema privileges for roles. Parameters: Name Type Description Default schema_oid int The OID of the schema whose privileges we\u2019ll list. required database_id int The Django id of the database containing the schema. required Returns: Type Description list [ SchemaPrivileges ] A list of schema privileges.","title":"list_direct"},{"location":"api/methods/#schemas.privileges.replace_for_roles","text":"replace_for_roles ( * , privileges , schema_oid , database_id , ** kwargs ) Replace direct schema privileges for roles. Possible privileges are USAGE and CREATE . Only roles which are included in a passed SchemaPrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Parameters: Name Type Description Default privileges list [ SchemaPrivileges ] The new privilege sets for roles. required schema_oid int The OID of the affected schema. required database_id int The Django id of the database containing the schema. required Returns: Type Description list [ SchemaPrivileges ] A list of all non-default privileges on the schema after the list [ SchemaPrivileges ] operation.","title":"replace_for_roles"},{"location":"api/methods/#schemas.privileges.transfer_ownership","text":"transfer_ownership ( * , schema_oid , new_owner_oid , database_id , ** kwargs ) Transfers ownership of a given schema to a new owner. Attributes: Name Type Description schema_oid The OID of the schema to transfer. new_owner_oid The OID of the role whom we want to be the new owner of the schema. To successfully transfer ownership of a schema to a new owner the current user must: Be a Superuser/Owner of the schema. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATE privilege for the database. Returns: Type Description SchemaInfo Information about the schema, and the current user privileges.","title":"transfer_ownership"},{"location":"api/methods/#schemas.privileges.SchemaPrivileges","text":"Bases: TypedDict Information about schema privileges for a role. Attributes: Name Type Description role_oid int The oid of the role. direct list [ Literal ['USAGE', 'CREATE']] A list of schema privileges for the aforementioned role_oid.","title":"SchemaPrivileges"},{"location":"api/methods/#servers","text":"","title":"Servers"},{"location":"api/methods/#tables","text":"","title":"Tables"},{"location":"api/methods/#tables.list_","text":"list_ ( * , schema_oid , database_id , ** kwargs ) List information about tables for a schema. Exposed as list . Parameters: Name Type Description Default schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ TableInfo ] A list of table details.","title":"list_"},{"location":"api/methods/#tables.get","text":"get ( * , table_oid , database_id , ** kwargs ) List information about a table for a schema. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description TableInfo Table details for a given table oid.","title":"get"},{"location":"api/methods/#tables.add","text":"add ( * , schema_oid , database_id , table_name = None , column_data_list = [], constraint_data_list = [], owner_oid = None , comment = None , ** kwargs ) Add a table with a default id column. Parameters: Name Type Description Default schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required table_name str Name of the table to be created. None column_data_list list [ CreatableColumnInfo ] A list describing columns to be created for the new table, in order. [] constraint_data_list list [ CreatableConstraintInfo ] A list describing constraints to be created for the new table. [] owner_oid int The OID of the role who will own the new table. If owner_oid is None, the current role will be the owner of the new table. None comment str The comment for the new table. None Returns: Type Description AddedTableInfo The oid & name of the created table.","title":"add"},{"location":"api/methods/#tables.delete","text":"delete ( * , table_oid , database_id , cascade = False , ** kwargs ) Delete a table from a schema. Parameters: Name Type Description Default table_oid int Identity of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required cascade bool Whether to drop the dependent objects. False Returns: Type Description str The name of the dropped table.","title":"delete"},{"location":"api/methods/#tables.patch","text":"patch ( * , table_oid , table_data_dict , database_id , ** kwargs ) Alter details of a preexisting table in a database. Parameters: Name Type Description Default table_oid str Identity of the table whose name, description or columns we\u2019ll modify. required table_data_dict SettableTableInfo A list describing desired table alterations. required database_id int The Django id of the database containing the table. required Returns: Type Description str The name of the altered table.","title":"patch"},{"location":"api/methods/#tables.import_","text":"import_ ( * , data_file_id , schema_oid , database_id , table_name = None , comment = None , ** kwargs ) Import a CSV/TSV into a table. Parameters: Name Type Description Default data_file_id int The Django id of the DataFile containing desired CSV/TSV. required schema_oid int Identity of the schema in the user\u2019s database. required database_id int The Django id of the database containing the table. required table_name str Name of the table to be imported. None comment str The comment for the new table. None Returns: Type Description AddedTableInfo The oid and name of the created table.","title":"import_"},{"location":"api/methods/#tables.get_import_preview","text":"get_import_preview ( * , table_oid , columns , database_id , limit = 20 , ** kwargs ) Preview an imported table. Parameters: Name Type Description Default table_oid int Identity of the imported table in the user\u2019s database. required columns list [ PreviewableColumnInfo ] List of settings describing the casts to be applied to the columns. required database_id int The Django id of the database containing the table. required limit int The upper limit for the number of records to return. 20 Returns: Type Description list [ dict ] The records from the specified columns of the table.","title":"get_import_preview"},{"location":"api/methods/#tables.list_joinable","text":"list_joinable ( * , table_oid , database_id , max_depth = 3 , ** kwargs ) List details for joinable tables. Parameters: Name Type Description Default table_oid int Identity of the table to get joinable tables for. required database_id int The Django id of the database containing the table. required max_depth int Specifies how far to search for joinable tables. 3 Returns: Type Description JoinableTableInfo Joinable table details for a given table.","title":"list_joinable"},{"location":"api/methods/#tables.list_with_metadata","text":"list_with_metadata ( * , schema_oid , database_id , ** kwargs ) List tables in a schema, along with the metadata associated with each table Parameters: Name Type Description Default schema_oid int PostgreSQL OID of the schema containing the tables. required database_id int The Django id of the database containing the table. required Returns: Type Description list A list of table details along with metadata.","title":"list_with_metadata"},{"location":"api/methods/#tables.get_with_metadata","text":"get_with_metadata ( * , table_oid , database_id , ** kwargs ) Get information about a table in a schema, along with the associated table metadata. Parameters: Name Type Description Default table_oid int The OID of the table in the user\u2019s database. required database_id int The Django id of the database containing the table. required Returns: Type Description dict A dict describing table details along with its metadata.","title":"get_with_metadata"},{"location":"api/methods/#tables.TableInfo","text":"Bases: TypedDict Information about a table. Attributes: Name Type Description oid int The oid of the table in the schema. name str The name of the table. schema int The oid of the schema where the table lives. description Optional [ str ] The description of the table. owner_oid int The OID of the direct owner of the table. current_role_priv list [ Literal ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES', 'TRIGGER']] The privileges available to the user on the table. current_role_owns bool Whether the current role owns the table.","title":"TableInfo"},{"location":"api/methods/#tables.AddedTableInfo","text":"Bases: TypedDict Information about a newly created table. Attributes: Name Type Description oid int The oid of the table in the schema. name str The name of the table.","title":"AddedTableInfo"},{"location":"api/methods/#tables.SettableTableInfo","text":"Bases: TypedDict Information about a table, restricted to settable fields. When possible, Passing null for a key will clear the underlying setting. E.g., description = null clears the table description. Setting any of name , columns to null is a noop. Attributes: Name Type Description name Optional [ str ] The new name of the table. description Optional [ str ] The description of the table. columns Optional [ list [ SettableColumnInfo ]] A list describing desired column alterations.","title":"SettableTableInfo"},{"location":"api/methods/#tables.JoinableTableRecord","text":"Bases: TypedDict Information about a singular joinable table. Attributes: Name Type Description base int The OID of the table from which the paths start target int The OID of the table where the paths end. join_path list A list describing joinable paths in the following form: [ [[L_oid0, L_attnum0], [R_oid0, R_attnum0]], [[L_oid1, L_attnum1], [R_oid1, R_attnum1]], [[L_oid2, L_attnum2], [R_oid2, R_attnum2]], \u2026 ] Here, [L_oidN, L_attnumN] represents the left column of a join, and [R_oidN, R_attnumN] the right. fkey_path list Same as join_path expressed in terms of foreign key constraints in the following form: [ [constraint_id0, reversed], [constraint_id1, reversed], ] In this form, constraint_idN is a foreign key constraint, and reversed is a boolean giving whether to travel from referrer to referent (when False) or from referent to referrer (when True). depth int Specifies how far to search for joinable tables. multiple_results bool Specifies whether the path included is reversed.","title":"JoinableTableRecord"},{"location":"api/methods/#tables.JoinableTableInfo","text":"Bases: TypedDict Information about joinable table(s). Attributes: Name Type Description joinable_tables list [ JoinableTableRecord ] List of reachable joinable table(s) from a base table. target_table_info list Additional info about target table(s) and its column(s).","title":"JoinableTableInfo"},{"location":"api/methods/#table-metadata","text":"Classes and functions exposed to the RPC endpoint for managing table metadata.","title":"Table Metadata"},{"location":"api/methods/#tables.metadata.list_","text":"list_ ( * , database_id , ** kwargs ) List metadata associated with tables for a database. Parameters: Name Type Description Default database_id int The Django id of the database containing the table. required Returns: Type Description list [ TableMetaDataRecord ] Metadata object for a given table oid.","title":"list_"},{"location":"api/methods/#tables.metadata.set_","text":"set_ ( * , table_oid , metadata , database_id , ** kwargs ) Set metadata for a table. Parameters: Name Type Description Default table_oid int The PostgreSQL OID of the table. required metadata TableMetaDataBlob A TableMetaDataBlob object describing desired table metadata to set. required database_id int The Django id of the database containing the table. required","title":"set_"},{"location":"api/methods/#tables.metadata.TableMetaDataBlob","text":"Bases: TypedDict The metadata fields which can be set on a table Attributes: Name Type Description data_file_id Optional [ int ] Specifies the DataFile model id used for the import. import_verified Optional [ bool ] Specifies whether a file has been successfully imported into a table. column_order Optional [ list [ int ]] The order in which columns of a table are displayed. record_summary_template Optional [ dict [ str , Union [ str , list [ int ]]]] The record summary template","title":"TableMetaDataBlob"},{"location":"api/methods/#tables.metadata.TableMetaDataRecord","text":"Bases: TypedDict Metadata for a table in a database. Only the database and table_oid keys are required. Attributes: Name Type Description id int The Django id of the TableMetaData object. database_id int The Django id of the database containing the table. table_oid int The OID of the table in the database. data_file_id Optional [ int ] Specifies the DataFile model id used for the import. import_verified Optional [ bool ] Specifies whether a file has been successfully imported into a table. column_order Optional [ list [ int ]] The order in which columns of a table are displayed. record_summary_template Optional [ dict [ str , Union [ str , list [ int ]]]] The record summary template","title":"TableMetaDataRecord"},{"location":"api/methods/#table-privileges","text":"","title":"Table Privileges"},{"location":"api/methods/#tables.privileges.list_direct","text":"list_direct ( * , table_oid , database_id , ** kwargs ) List direct table privileges for roles. Args: table_oid: The OID of the table whose privileges we\u2019ll list. database_id: The Django id of the database containing the table. Returns: A list of table privileges.","title":"list_direct"},{"location":"api/methods/#tables.privileges.replace_for_roles","text":"replace_for_roles ( * , privileges , table_oid , database_id , ** kwargs ) Replace direct table privileges for roles. Possible privileges are INSERT , SELECT , UPDATE , DELETE , TRUNCATE , REFERENCES and TRIGGER . Only roles which are included in a passed TablePrivileges object are affected. WARNING: Any privilege included in the direct list for a role is GRANTed, and any privilege not included is REVOKEd. Parameters: Name Type Description Default privileges list [ TablePrivileges ] The new privilege sets for roles. required table_oid int The OID of the affected table. required database_id int The Django id of the database containing the table. required Returns: Type Description list [ TablePrivileges ] A list of all non-default privileges on the table after the list [ TablePrivileges ] operation.","title":"replace_for_roles"},{"location":"api/methods/#tables.privileges.transfer_ownership","text":"transfer_ownership ( * , table_oid , new_owner_oid , database_id , ** kwargs ) Transfers ownership of a given table to a new owner. Attributes: Name Type Description table_oid The OID of the table to transfer. new_owner_oid The OID of the role whom we want to be the new owner of the table. To successfully transfer ownership of a table to a new owner the current user must: Be a Superuser/Owner of the table. Be a MEMBER of the new owning role. i.e. The current role should be able to SET ROLE to the new owning role. Have CREATE privilege on the table\u2019s schema. Returns: Type Description TableInfo Information about the table, and the current user privileges.","title":"transfer_ownership"},{"location":"api/methods/#tables.privileges.TablePrivileges","text":"Bases: TypedDict Information about table privileges for a role. Attributes: role_oid: The oid of the role. direct: A list of table privileges for the aforementioned role_oid.","title":"TablePrivileges"},{"location":"api/methods/#users","text":"Classes and functions exposed to the RPC endpoint for managing mathesar users.","title":"Users"},{"location":"api/methods/#users.list_","text":"list_ () List information about all mathesar users. Exposed as list . Returns: Type Description list [ UserInfo ] A list of information about mathesar users.","title":"list_"},{"location":"api/methods/#users.get","text":"get ( * , user_id ) List information about a mathesar user. Parameters: Name Type Description Default user_id int The Django id of the user. required Returns: Type Description UserInfo User information for a given user_id.","title":"get"},{"location":"api/methods/#users.add","text":"add ( * , user_def ) Add a new mathesar user. Parameters: Name Type Description Default user_def UserDef A dict describing the user to create. required Privileges This endpoint requires the caller to be a superuser. Returns: Type Description UserInfo The information of the created user.","title":"add"},{"location":"api/methods/#users.delete","text":"delete ( * , user_id ) Delete a mathesar user. Parameters: Name Type Description Default user_id int The Django id of the user to delete. required Privileges This endpoint requires the caller to be a superuser.","title":"delete"},{"location":"api/methods/#users.patch_self","text":"patch_self ( * , username , email , full_name , display_language , ** kwargs ) Alter details of currently logged in mathesar user. Parameters: Name Type Description Default username str The username of the user. required email str The email of the user. required full_name str The full name of the user. required display_language str Specifies the display language for the user, can be set to either en or ja . required Returns: Type Description UserInfo Updated user information of the caller.","title":"patch_self"},{"location":"api/methods/#users.patch_other","text":"patch_other ( * , user_id , username , is_superuser , email , full_name , display_language ) Alter details of a mathesar user, given its user_id. Parameters: Name Type Description Default user_id int The Django id of the user. required username str The username of the user. required email str The email of the user. required is_superuser bool Specifies whether to set the user as a superuser. required full_name str The full name of the user. required display_language str Specifies the display language for the user, can be set to either en or ja . required Privileges This endpoint requires the caller to be a superuser. Returns: Type Description UserInfo Updated user information for a given user_id.","title":"patch_other"},{"location":"api/methods/#users.replace_own","text":"replace_own ( * , old_password , new_password , ** kwargs ) Alter password of currently logged in mathesar user. Parameters: Name Type Description Default old_password str Old password of the currently logged in user. required new_password str New password of the user to set. required","title":"replace_own"},{"location":"api/methods/#users.revoke","text":"revoke ( * , user_id , new_password ) Alter password of a mathesar user, given its user_id. Parameters: Name Type Description Default user_id int The Django id of the user. required new_password str New password of the user to set. required Privileges This endpoint requires the caller to be a superuser.","title":"revoke"},{"location":"api/methods/#users.UserInfo","text":"Bases: TypedDict Information about a mathesar user. Attributes: Name Type Description id int The Django id of the user. username str The username of the user. is_superuser bool Specifies whether the user is a superuser. email str The email of the user. full_name str The full name of the user. display_language str Specifies the display language for the user, can be either en or ja .","title":"UserInfo"},{"location":"api/methods/#users.UserDef","text":"Bases: TypedDict Definition for creating a mathesar user. Attributes: Name Type Description username str The username of the user. password str The password of the user. is_superuser bool Whether the user is a superuser. email Optional [ str ] The email of the user. full_name Optional [ str ] The full name of the user. display_language Optional [ str ] Specifies the display language for the user, can be set to either en or ja .","title":"UserDef"},{"location":"releases/","text":"Release notes \u00b6 This is developer documentation to help with release notes. It is not published in our docs guide. Requirements \u00b6 Install DuckDB . On Macs, the easiest way to do this is via Homebrew : brew install duckdb . Install the GitHub CLI . On Macs, the easiest way to do this is via Homebrew : brew install gh . How to generate release notes \u00b6 Run the find_missing_prs.sh script, passing the release version number as the only argument. ./find_missing_prs.sh 1.2.3 You can run this any time during the development cycle. If there is not yet a release branch, the script will compare develop to the previous release. If you haven\u2019t yet created a release notes file for this release, it will create one for you. The script will find PRs which have been merged but not yet included in the release notes file. Open the release notes file and find a new section at the end titled (TO CATEGORIZE) . Incorporate PRs listed within this section into the release notes as you see fit. Rewrite the title text that appears directly in the markdown. Leave the titles as-written within the quotes (these will appear within hover text). Save the release notes and commit them. Edit mkdocs.yml , adding the newly-generated release notes file to the nav menu. Re-run the script as needed.","title":"Release notes"},{"location":"releases/#release-notes","text":"This is developer documentation to help with release notes. It is not published in our docs guide.","title":"Release notes"},{"location":"releases/#requirements","text":"Install DuckDB . On Macs, the easiest way to do this is via Homebrew : brew install duckdb . Install the GitHub CLI . On Macs, the easiest way to do this is via Homebrew : brew install gh .","title":"Requirements"},{"location":"releases/#how-to-generate-release-notes","text":"Run the find_missing_prs.sh script, passing the release version number as the only argument. ./find_missing_prs.sh 1.2.3 You can run this any time during the development cycle. If there is not yet a release branch, the script will compare develop to the previous release. If you haven\u2019t yet created a release notes file for this release, it will create one for you. The script will find PRs which have been merged but not yet included in the release notes file. Open the release notes file and find a new section at the end titled (TO CATEGORIZE) . Incorporate PRs listed within this section into the release notes as you see fit. Rewrite the title text that appears directly in the markdown. Leave the titles as-written within the quotes (these will appear within hover text). Save the release notes and commit them. Edit mkdocs.yml , adding the newly-generated release notes file to the nav menu. Re-run the script as needed.","title":"How to generate release notes"},{"location":"releases/0.1.0/","text":"Mathesar 0.1.0 (alpha release) \u00b6 Mathesar\u2019s first alpha release! Features: Built on Postgres : Connect to an existing Postgres database or set one up from scratch. Set up your data models : Easily create and update Postgres schemas and tables. Data entry : Use our spreadsheet-like interface to view, create, update, and delete table records. Filter, sort, and group : Quickly slice your data in different ways. Query builder : Use our Data Explorer to build queries without knowing anything about SQL or joins. Schema migrations : Transfer columns between tables in two clicks. Uses Postgres features : Mathesar uses and manipulates Postgres schemas, primary keys, foreign keys, constraints and data types. e.g. \u201cLinks\u201d in the UI are foreign keys in the database. Custom data types : Custom data types for emails and URLs (more coming soon), validated at the database level. Basic access control : Users can have Viewer (read-only), Editor (can only edit data, but not data structure), or Manager (can edit both data and its structure) roles. Basic documentation : Users can install Mathesar using Docker Compose, and tricky product features are documented. Full Changelog","title":"0.1.0"},{"location":"releases/0.1.0/#mathesar-010-alpha-release","text":"Mathesar\u2019s first alpha release! Features: Built on Postgres : Connect to an existing Postgres database or set one up from scratch. Set up your data models : Easily create and update Postgres schemas and tables. Data entry : Use our spreadsheet-like interface to view, create, update, and delete table records. Filter, sort, and group : Quickly slice your data in different ways. Query builder : Use our Data Explorer to build queries without knowing anything about SQL or joins. Schema migrations : Transfer columns between tables in two clicks. Uses Postgres features : Mathesar uses and manipulates Postgres schemas, primary keys, foreign keys, constraints and data types. e.g. \u201cLinks\u201d in the UI are foreign keys in the database. Custom data types : Custom data types for emails and URLs (more coming soon), validated at the database level. Basic access control : Users can have Viewer (read-only), Editor (can only edit data, but not data structure), or Manager (can edit both data and its structure) roles. Basic documentation : Users can install Mathesar using Docker Compose, and tricky product features are documented. Full Changelog","title":"Mathesar 0.1.0 (alpha release)"},{"location":"releases/0.1.1/","text":"Mathesar 0.1.1 (alpha release) \u00b6 This is a minor release focused on addressing bugs and improving user experience. Bug fixes \u00b6 The UI now supports non-ASCII characters in column names and column settings. The record page works when the primary key is not an integer. Mathesar can now support primary keys that are UUIDs. Access level permissions presented on the UI are now consistent with the API access levels. Deleting newly created records immediately no longer results in getting stuck in a loading screen. Empty columns are now inferred as text instead of boolean during import. The UI now displays an appropriate failure message when failing to delete rows. Mathesar no longer crashes when attempting to order rows by non-orderable columns. Row selection gets cleared correctly when a placeholder cell is selected. Improvements \u00b6 The UI cancels edits when users press the Esc key in table cells. Group headers with record summaries now have links to allow users to navigate to the associated record. Dropdown positioning is improved across the app, so that they do not overflow the browser window. A bunch of smaller visual and UX improvements made by our Google Summer of Code (GSoC) applicants. Full Changelog","title":"0.1.1"},{"location":"releases/0.1.1/#mathesar-011-alpha-release","text":"This is a minor release focused on addressing bugs and improving user experience.","title":"Mathesar 0.1.1 (alpha release)"},{"location":"releases/0.1.1/#bug-fixes","text":"The UI now supports non-ASCII characters in column names and column settings. The record page works when the primary key is not an integer. Mathesar can now support primary keys that are UUIDs. Access level permissions presented on the UI are now consistent with the API access levels. Deleting newly created records immediately no longer results in getting stuck in a loading screen. Empty columns are now inferred as text instead of boolean during import. The UI now displays an appropriate failure message when failing to delete rows. Mathesar no longer crashes when attempting to order rows by non-orderable columns. Row selection gets cleared correctly when a placeholder cell is selected.","title":"Bug fixes"},{"location":"releases/0.1.1/#improvements","text":"The UI cancels edits when users press the Esc key in table cells. Group headers with record summaries now have links to allow users to navigate to the associated record. Dropdown positioning is improved across the app, so that they do not overflow the browser window. A bunch of smaller visual and UX improvements made by our Google Summer of Code (GSoC) applicants. Full Changelog","title":"Improvements"},{"location":"releases/0.1.2/","text":"Mathesar 0.1.2 (alpha release) \u00b6 This release focuses on documenting additional options for installing Mathesar, some improvements to the user experience, and some bug fixes. We\u2019ve also added support for switching between multiple databases in the UI. Improvements to the UI \u00b6 Mathesar now supports switching between multiple databases using the UI. ( #2847 ) You can now copy data from the Mathesar UI to paste into other applications. ( #2773 ) The first non-primary key column is now highlighted when a new record is created. ( #2515 ) Form inputs are disabled when the form is being submitted. ( #2762 ) Action pane sidebars are now resizable. ( #2808 ) Table deletion now requires you to enter the table\u2019s name (to prevent accidental deletion). ( #2858 ) Long table names are now truncated and the full name is shown on hover. ( #2825 ) We\u2019ve disabled setting columns to JSON List and Map types using the UI until we have a better editing experience for cells of those types. ( #2772 ) Filter conditions can now be added and removed via the column header menu ( #2782 ) Cell level context menus now also show menu items related to the row and column. ( #2803 ) Improvements to installation \u00b6 We have documented additional installation options for Mathesar. Visit the Mathesar docs site to explore these options. ( #2809 #2826 #2824 ) A reference for Mathesar configuration options has been added to our documentation. ( #2824 ) We have documented connecting to databases running on localhost outside of Docker. ( #2819 ) The Mathesar Docker image is now standalone and can be started using the docker run command. ( #2848 ) Superuser and database passwords are now validated when using the guided install script. ( #2625 ) Bug fixes \u00b6 Mathesar no longer crashes when importing tables with long column names. ( #2725 ) Static default values can no longer be assigned to a dynamic default column. ( #2780 ) Column names no longer overlap when the browser window is resized. ( #2856 ) Databases removed from the configuration environment file won\u2019t show up in the UI anymore. ( #2891 ) Fixed inconsistencies with the foreign key column icon. ( #2768 ) API changes \u00b6 The URL for the database page has been moved from /<db_name>/ to /db/<db_name>/ to avoid conflicts with other Mathesar URLs. ( #2791 ) Maintenance \u00b6 A \u201csponsors\u201d section has been added to the README. ( #2710 ) Full Changelog","title":"0.1.2"},{"location":"releases/0.1.2/#mathesar-012-alpha-release","text":"This release focuses on documenting additional options for installing Mathesar, some improvements to the user experience, and some bug fixes. We\u2019ve also added support for switching between multiple databases in the UI.","title":"Mathesar 0.1.2 (alpha release)"},{"location":"releases/0.1.2/#improvements-to-the-ui","text":"Mathesar now supports switching between multiple databases using the UI. ( #2847 ) You can now copy data from the Mathesar UI to paste into other applications. ( #2773 ) The first non-primary key column is now highlighted when a new record is created. ( #2515 ) Form inputs are disabled when the form is being submitted. ( #2762 ) Action pane sidebars are now resizable. ( #2808 ) Table deletion now requires you to enter the table\u2019s name (to prevent accidental deletion). ( #2858 ) Long table names are now truncated and the full name is shown on hover. ( #2825 ) We\u2019ve disabled setting columns to JSON List and Map types using the UI until we have a better editing experience for cells of those types. ( #2772 ) Filter conditions can now be added and removed via the column header menu ( #2782 ) Cell level context menus now also show menu items related to the row and column. ( #2803 )","title":"Improvements to the UI"},{"location":"releases/0.1.2/#improvements-to-installation","text":"We have documented additional installation options for Mathesar. Visit the Mathesar docs site to explore these options. ( #2809 #2826 #2824 ) A reference for Mathesar configuration options has been added to our documentation. ( #2824 ) We have documented connecting to databases running on localhost outside of Docker. ( #2819 ) The Mathesar Docker image is now standalone and can be started using the docker run command. ( #2848 ) Superuser and database passwords are now validated when using the guided install script. ( #2625 )","title":"Improvements to installation"},{"location":"releases/0.1.2/#bug-fixes","text":"Mathesar no longer crashes when importing tables with long column names. ( #2725 ) Static default values can no longer be assigned to a dynamic default column. ( #2780 ) Column names no longer overlap when the browser window is resized. ( #2856 ) Databases removed from the configuration environment file won\u2019t show up in the UI anymore. ( #2891 ) Fixed inconsistencies with the foreign key column icon. ( #2768 )","title":"Bug fixes"},{"location":"releases/0.1.2/#api-changes","text":"The URL for the database page has been moved from /<db_name>/ to /db/<db_name>/ to avoid conflicts with other Mathesar URLs. ( #2791 )","title":"API changes"},{"location":"releases/0.1.2/#maintenance","text":"A \u201csponsors\u201d section has been added to the README. ( #2710 ) Full Changelog","title":"Maintenance"},{"location":"releases/0.1.3/","text":"Mathesar 0.1.3 (alpha release) \u00b6 This release: makes improvements to the installation process, adds support for sharing tables and explorations publicly, begins a framework for internationalization and translation of UI elements, moves DDL (SQL) logic to DB-layer functions to increase performance and reduce complexity, Improves summarization behavior in the data explorer, Adds support for importing JSON and Excel files, fixes user-reported issues, improves developer experience, fixes numerous small backend issues, fixes numerous small frontend issues, improves the user documentation, and improves the API documentation. What\u2019s Changed \u00b6 Installation improvements \u00b6 Add superuser creation page ( #3088 ) Create superuser page\u2019s stylings ( #3131 ) Remove the documented steps for creating a superuser from the command line ( #3134 ) Sharing tables and explorations \u00b6 Shareable links backend - Models, APIs, bypass auth for table requests ( #3092 ) Shareable links frontend - shared table consumer view ( #3093 ) Shared queries - Auth handling for query requests, frontend consumer view, API tests ( #3113 ) UI for creating & managing shares for tables and explorations ( #3127 ) Shares - regenerate link, general fixes ( #3133 ) Internationalization \u00b6 Install typesafe-i18n & translates one component ( #3099 ) RichText component ( #3100 ) Django templates translatable ( #3101 ) RSQLA1: Move DDL Operations to SQL functions \u00b6 Sql test setup ( #2903 ) Add SQL for column adding ( #2923 ) Move constraint creation to SQL ( #2952 ) Cleaner consolidated logic for adding constraints ( #2976 ) Column creation and duplication DDL 2 ( #2978 ) SQL for links creation ( #2986 ) Table create ddl ( #3016 ) Add DDL functions for altering columns ( #3097 ) SQL tests for schema ddl ( #3098 ) Remove pglast , use SQL function instead ( #3107 ) Move table splitting logic to SQL ( #3119 ) Tests for links & constraints ddl ( #3120 ) Properly detect identity columns ( #3125 ) Wiring sql functions for links and tables ( #3130 ) Tests for alter table ( #3139 ) Add constraint copying to column extraction logic ( #3168 ) Summarization improvements \u00b6 Fix SQL Syntax error while summarizing Money, URI, Email column ( #2911 ) Add Sum aggregation function ( #2893 ) Add max aggregation function ( #2912 ) Add min aggregation function ( #2914 ) Add mean aggregation function ( #2916 ) Add median aggregation function ( #2932 ) Add Mode aggregation function ( #2940 ) Add Percentage True aggregation function ( #2945 ) Add Peak Time aggregation function. ( #2981 ) Add Peak Day of Week aggregation function. ( #3004 ) Add Peak Month aggregation function. ( #3006 ) Fix NaN:NaN error while aggregating duration column ( #3136 ) JSON and Excel file improvements \u00b6 Updated datafile model to store file type ( #2890 ) Added methods to import a perfect JSON ( #2906 ) Removed code duplication while importing datafiles ( #2926 ) Added tests to check importing json feature ( #2933 ) Added pandas and JSON normalization code ( #2968 ) Added api tests for importing JSON feature ( #2977 ) Added documentation for importing data into tables ( #2992 ) Extended import via copy-paste for JSON and updated UI ( #3008 ) Updated documentation navigation to show importing data doc ( #3023 ) Added max_level param for JSON import feature in the backend ( #3039 ) Added functionality to import perfect Excel ( #3059 ) Fixes for user-reported issues \u00b6 Help text: \u201cits linked tables\u201d (possessive adjective) ( #3086 ) DX improvements \u00b6 Remove .env from developer guide. ( #2925 ) Add SQL files to the pytest workflow ( #3082 ) New linting rule ( #3116 ) Repeat failed tests ( #3118 ) Add pldebugger to dev db ( #3126 ) Backend fixes and improvements \u00b6 Fix migrations ( #2899 ) Remove lazydict dependency ( #2993 ) Add API tests for multi-column primary key constraints ( #3025 ) Support unknown types (backend) ( #3040 ) Allow usage of local.py for untracked settings ( #3064 ) Fix the error when list aggregation on mathesar custom array ( #3106 ) Merge db list demo mode commits into release 0.1.3 ( #3171 ) Frontend fixes and improvements \u00b6 Schema updates in database page without reloading. Fixes #2736 ( #2745 ) Make columns re-orderable ( #2831 ) Fix caret out of view when using Input on Chrome ( #2836 ) Improve TSV serialization when copying cells ( #2867 ) Add max_split=1 to retrieve the column name ( #2956 ) Fix default value input stealing focus ( #2957 ) Auto-focus input when editing number/money cells ( #2975 ) Updated frontend to send a single bulk delete request instead of one request for each record ( #2985 ) Added margin between breadcrumb selector and bottom of the veiwport ( #3014 ) Date Input closes now on tab ( #3038 ) Scroll sheet all the way down when clicking the New Record button ( #3045 ) Use Truncate component in Record Selector table cells ( #3077 ) Copy formatted cell values to clipboard instead of raw values ( #3094 ) Fix regression: Move UserProfile to the App level context from Route level context ( #3175 ) Documentation \u00b6 Update README.md with troubleshooting instructions ( #2751 ) Update documentation styles for active and hover ( #2937 ) Added the command that generates the API documentation schema file to\u2026 ( #2970 ) Added the command to copy the .env file, to the DEVELOPER GUIDE ( #2972 ) Update demo\u2019s documentation ( #2996 ) Fix typo error in DEVELOPER_GUIDE.md ( #2999 ) Update build from source documentation ( #3029 ) Clean up import docs ( #3042 ) API documentation \u00b6 Integrated drf-spectacular library ( #2939 ) Improved the operationIds by implementing a post hook function ( #3021 ) Added OpenAPI spec for datafiles endpoint ( #3044 ) Added OpenAPI specification for databases endpoint ( #3047 ) Added OpenAPI specification for /schemas/ endpoint ( #3074 ) Full Changelog","title":"0.1.3"},{"location":"releases/0.1.3/#mathesar-013-alpha-release","text":"This release: makes improvements to the installation process, adds support for sharing tables and explorations publicly, begins a framework for internationalization and translation of UI elements, moves DDL (SQL) logic to DB-layer functions to increase performance and reduce complexity, Improves summarization behavior in the data explorer, Adds support for importing JSON and Excel files, fixes user-reported issues, improves developer experience, fixes numerous small backend issues, fixes numerous small frontend issues, improves the user documentation, and improves the API documentation.","title":"Mathesar 0.1.3 (alpha release)"},{"location":"releases/0.1.3/#whats-changed","text":"","title":"What's Changed"},{"location":"releases/0.1.3/#installation-improvements","text":"Add superuser creation page ( #3088 ) Create superuser page\u2019s stylings ( #3131 ) Remove the documented steps for creating a superuser from the command line ( #3134 )","title":"Installation improvements"},{"location":"releases/0.1.3/#sharing-tables-and-explorations","text":"Shareable links backend - Models, APIs, bypass auth for table requests ( #3092 ) Shareable links frontend - shared table consumer view ( #3093 ) Shared queries - Auth handling for query requests, frontend consumer view, API tests ( #3113 ) UI for creating & managing shares for tables and explorations ( #3127 ) Shares - regenerate link, general fixes ( #3133 )","title":"Sharing tables and explorations"},{"location":"releases/0.1.3/#internationalization","text":"Install typesafe-i18n & translates one component ( #3099 ) RichText component ( #3100 ) Django templates translatable ( #3101 )","title":"Internationalization"},{"location":"releases/0.1.3/#rsqla1-move-ddl-operations-to-sql-functions","text":"Sql test setup ( #2903 ) Add SQL for column adding ( #2923 ) Move constraint creation to SQL ( #2952 ) Cleaner consolidated logic for adding constraints ( #2976 ) Column creation and duplication DDL 2 ( #2978 ) SQL for links creation ( #2986 ) Table create ddl ( #3016 ) Add DDL functions for altering columns ( #3097 ) SQL tests for schema ddl ( #3098 ) Remove pglast , use SQL function instead ( #3107 ) Move table splitting logic to SQL ( #3119 ) Tests for links & constraints ddl ( #3120 ) Properly detect identity columns ( #3125 ) Wiring sql functions for links and tables ( #3130 ) Tests for alter table ( #3139 ) Add constraint copying to column extraction logic ( #3168 )","title":"RSQLA1: Move DDL Operations to SQL functions"},{"location":"releases/0.1.3/#summarization-improvements","text":"Fix SQL Syntax error while summarizing Money, URI, Email column ( #2911 ) Add Sum aggregation function ( #2893 ) Add max aggregation function ( #2912 ) Add min aggregation function ( #2914 ) Add mean aggregation function ( #2916 ) Add median aggregation function ( #2932 ) Add Mode aggregation function ( #2940 ) Add Percentage True aggregation function ( #2945 ) Add Peak Time aggregation function. ( #2981 ) Add Peak Day of Week aggregation function. ( #3004 ) Add Peak Month aggregation function. ( #3006 ) Fix NaN:NaN error while aggregating duration column ( #3136 )","title":"Summarization improvements"},{"location":"releases/0.1.3/#json-and-excel-file-improvements","text":"Updated datafile model to store file type ( #2890 ) Added methods to import a perfect JSON ( #2906 ) Removed code duplication while importing datafiles ( #2926 ) Added tests to check importing json feature ( #2933 ) Added pandas and JSON normalization code ( #2968 ) Added api tests for importing JSON feature ( #2977 ) Added documentation for importing data into tables ( #2992 ) Extended import via copy-paste for JSON and updated UI ( #3008 ) Updated documentation navigation to show importing data doc ( #3023 ) Added max_level param for JSON import feature in the backend ( #3039 ) Added functionality to import perfect Excel ( #3059 )","title":"JSON and Excel file improvements"},{"location":"releases/0.1.3/#fixes-for-user-reported-issues","text":"Help text: \u201cits linked tables\u201d (possessive adjective) ( #3086 )","title":"Fixes for user-reported issues"},{"location":"releases/0.1.3/#dx-improvements","text":"Remove .env from developer guide. ( #2925 ) Add SQL files to the pytest workflow ( #3082 ) New linting rule ( #3116 ) Repeat failed tests ( #3118 ) Add pldebugger to dev db ( #3126 )","title":"DX improvements"},{"location":"releases/0.1.3/#backend-fixes-and-improvements","text":"Fix migrations ( #2899 ) Remove lazydict dependency ( #2993 ) Add API tests for multi-column primary key constraints ( #3025 ) Support unknown types (backend) ( #3040 ) Allow usage of local.py for untracked settings ( #3064 ) Fix the error when list aggregation on mathesar custom array ( #3106 ) Merge db list demo mode commits into release 0.1.3 ( #3171 )","title":"Backend fixes and improvements"},{"location":"releases/0.1.3/#frontend-fixes-and-improvements","text":"Schema updates in database page without reloading. Fixes #2736 ( #2745 ) Make columns re-orderable ( #2831 ) Fix caret out of view when using Input on Chrome ( #2836 ) Improve TSV serialization when copying cells ( #2867 ) Add max_split=1 to retrieve the column name ( #2956 ) Fix default value input stealing focus ( #2957 ) Auto-focus input when editing number/money cells ( #2975 ) Updated frontend to send a single bulk delete request instead of one request for each record ( #2985 ) Added margin between breadcrumb selector and bottom of the veiwport ( #3014 ) Date Input closes now on tab ( #3038 ) Scroll sheet all the way down when clicking the New Record button ( #3045 ) Use Truncate component in Record Selector table cells ( #3077 ) Copy formatted cell values to clipboard instead of raw values ( #3094 ) Fix regression: Move UserProfile to the App level context from Route level context ( #3175 )","title":"Frontend fixes and improvements"},{"location":"releases/0.1.3/#documentation","text":"Update README.md with troubleshooting instructions ( #2751 ) Update documentation styles for active and hover ( #2937 ) Added the command that generates the API documentation schema file to\u2026 ( #2970 ) Added the command to copy the .env file, to the DEVELOPER GUIDE ( #2972 ) Update demo\u2019s documentation ( #2996 ) Fix typo error in DEVELOPER_GUIDE.md ( #2999 ) Update build from source documentation ( #3029 ) Clean up import docs ( #3042 )","title":"Documentation"},{"location":"releases/0.1.3/#api-documentation","text":"Integrated drf-spectacular library ( #2939 ) Improved the operationIds by implementing a post hook function ( #3021 ) Added OpenAPI spec for datafiles endpoint ( #3044 ) Added OpenAPI specification for databases endpoint ( #3047 ) Added OpenAPI specification for /schemas/ endpoint ( #3074 ) Full Changelog","title":"API documentation"},{"location":"releases/0.1.4/","text":"Mathesar 0.1.4 \u00b6 Summary \u00b6 Mathesar 0.1.4 focuses on improving the installation and setup experience. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release. New Features \u00b6 UI for configuring database connections \u00b6 Now you can add, edit, and delete connections to multiple databases from within Mathesar\u2019s UI. Previously this was only possible via editing text-based configuration. #3170 #3223 #3299 #3309 #3319 #3326 #3341 #3348 #3349 #3352 #3354 #3356 #3368 #3377 #3387 Sample data loader \u00b6 When adding a new database connection, you can choose to load sample data into that database. Sample data will be contained within specific schemas and may be useful to help new users play with Mathesar\u2019s features. #3368 PostgreSQL column COMMENTs \u00b6 PostgreSQL COMMENT values on columns are now exposed via a read/write \u201cdescription\u201d field within Mathesar. This feature was previously available for schemas and tables and is now available for columns too. #3186 #3219 Text-only imports \u00b6 When importing CSV data, Mathesar now gives you the option to use TEXT as the database type for all columns. This choice speeds up the import for larger data sets by skipping the process of guessing column types. #3050 We are still considering additional ways to improve performance when importing \u2014 especially for data sets with lots of columns. Reduced database privilege installations \u00b6 Mathesar can now be installed as long as the database role used during the installation has at least CONNECT and CREATE privileges on the database targeted by the installation. If you want to create a new database for Mathesar\u2019s use, the installation will (naturally) require a role with the CREATEDB privilege. #3117 Unified Mathesar Docker image \u00b6 The published Mathesar Docker image now contains a PostgreSQL server. This is used to provide a database backend in cases where Mathesar is started via Docker without being configured to connect to any other database. #3121 #3212 Metadata storage within SQLite \u00b6 We\u2019ve added experimental SQLite support for the storage of Mathesar metadata. This will allow brave (or foolish) users to run Mathesar with this lighter-weight DB when installing from scratch on Linux. #3203 #3225 #2778 Improved PostgreSQL compatibility \u00b6 Mathesar now officially supports, and is tested against, Postgres versions 13, 14, and 15. It\u2019s also possible (but not yet recommended) to run Mathesar using Postgres 16. #3206 Easier modification of sorting precedence \u00b6 When you have multiple sorting conditions applied to a table, you can now rearrange them via drag and drop to adjust the precedence of the sorting conditions. #3316 Cell values displayed within sidebar \u00b6 The table sidebar features a new \u201cCell\u201d tab to show the content of cells, simplifying the process of viewing large text cells. Groundwork \u00b6 We made significant progress towards internationalizing Mathesar\u2019s user interface. We expect to our next release to offer users the ability to toggle between English and Japanese. Subsequent releases will continue to add additional languages. #3102 #3103 #3104 #3302 #3321 #3337 #3340 #3350 #3389 We began some work that will help us eventually distribute Mathesar via a Debian .deb package. Some additional work remains but we hope to introduce this installation method in a future version. #3189 #3225 We implemented the backend side of a new feature to import Excel and JSON files through Mathesar\u2019s import UI. More work still remains to implement the frontend side of this feature. #3083 #3195 #3132 We took some baby steps towards building a system to automatically generate human-readable documentation for all our API endpoints. Significant work still remains. #3271 #3146 Documentation \u00b6 We improved and updated our documentation for installing and updating Mathesar. ( #3227 ) Bug fixes \u00b6 Tables having CHECK constraints are now usable within Mathesar. ( #3243 ) Records can now be inserted into tables without primary keys. ( #3252 ) We fixed inconsistent state when selecting a different column while editing a column\u2019s name. ( #3219 ) URL cells now retain their focus after a contained hyperlink is clicked. ( #3012 ) Searching for a record via a partially-entered date string no longer gives an error. ( #3343 ) The Database Page now shows loading and error indicators. ( #3351 ) The Schema Page now displays more detailed information about errors encountered when loading tables and explorations. ( #3323 ) Exclusion constraint violations now produce more helpful error messages. ( #3200 ) Files with missing or duplicate id values can now be imported without error. ( #3155 ) The record selector can now be closed by clicking on the overlay outside its modal. ( #3220 ) Help text for foreign key column data types is now more accurate. ( #3260 ) Users of Mathesar\u2019s public demo site will no longer see database connections listed for other demo users. ( #3129 ) More UI elements have visually distinctive focus states. ( #3313 ) Date formatting is applied to arrays of date values. ( #3325 ) On the record page, values within foreign key columns can now be set to NULL more intuitively. ( #3310 ) A visual layout overflow bug on the record page is fixed. ( #3303 ) Foreign keys referencing non-primary-key columns now display properly. ( #3239 ) Maintenance \u00b6 We made our CI pipeline more robust. ( #3254 ) We made some updates to our workflows and developer documentation to support improvements to our issue labeling scheme. ( #3338 #3298 #3280 #3336 ) We made some routine upgrades to dependencies and small adjustments to development tooling. ( #3214 #3353 #3334 #3201 #3295 #3156 #3234 #3229 #3317 ) We addressed regressions from work during this release. ( #3197 ) We improved error handling by preventing storing non-positive IDs for certain objects. ( #3177 ) We clarified the API behavior by specifying JSON-only requests ( #3090 ) We improved testing against DB objects with long names ( #3140 ) We updated our org name to reflect a change from \u201cCenter of Complex Interventions\u201d to \u201cMathesar Foundation\u201d. ( #3312 ) We made some improvements to our developer documentation. ( #3300 #3210 #3279 ) We improved our process for generating release notes. ( #3427 ) We resolved some merge conflicts after finalizing our previous release. ( #3190 ) Upgrading to 0.1.4 \u00b6 The 0.1.4 release requires more upgrade steps than we hope to have for future releases! If you run into any trouble, we encourage you to open an issue or contact us for help. For installations using Docker Compose \u00b6 If you followed our Docker Compose installation instructions , then use these steps to upgrade your installation to 0.1.4. Note Depending on your setup, you may need to run some commands with sudo . Find needed parts Find your .env and docker-compose.yml files. Run docker inspect mathesar_service and look for the value of the \"com.docker.compose.project.config_files\" key in the resulting JSON to find the path to the docker-compose.yml file. The .env file should be in the same directory. If you have jq installed, you can run docker inspect mathesar_service \\ | jq '.[0].Config.Labels.\"com.docker.compose.project.config_files\"' and get the path directly. The .env file should be in the same directory. Copy the path of the directory containing docker-compose.yml and .env into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the configuration directory. If you are using a Docker container for your PostgreSQL database, Run docker volume inspect mathesar_postgresql_data and look for the \"Mountpoint\" in the resulting JSON. Copy the path of the directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the PostgreSQL data directory. Stop Mathesar, remove old images docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down --rmi all Set up new configuration Warning MATHESAR_DATABASES has been deprecated as of v0.1.4 and will be removed entirely in future releases of Mathesar. If you end up deleting the variable from your .env file before starting up Mathesar after the upgrade, you can still add the connections manually through Mathesar\u2019s UI. Back up the old configuration files: mv xMATHESAR_INSTALLATION_DIRx/docker-compose.yml xMATHESAR_INSTALLATION_DIRx/docker-compose.yml.backup cp xMATHESAR_INSTALLATION_DIRx/.env xMATHESAR_INSTALLATION_DIRx/env.backup (We\u2019ll modify the old file, so we copy instead of moving it.) Download the new docker compose file: curl -sfL -o xMATHESAR_INSTALLATION_DIRx/docker-compose.yml https://raw.githubusercontent.com/mathesar-foundation/mathesar/0.1.4/docker-compose.yml Edit the xMATHESAR_INSTALLATION_DIRx/.env file to break the DJANGO_DATABASE_URL variable into its parts. This variable should have the form: DJANGO_DATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database> You should edit the .env file to have the variables: POSTGRES_USER=<username> POSTGRES_PASSWORD=<password> POSTGRES_HOST=<host> POSTGRES_PORT=<port> POSTGRES_DB=<database> If you don\u2019t want to set those environment variables (e.g., if they\u2019re otherwise used), you can instead edit the docker-compose.yml file directly to add those variables. Double-check the rest of the configuration: You should have your SECRET_KEY variable defined. If hosting on the internet, you should have a DOMAIN_NAME variable defined. Initialize new Mathesar installation docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d This will pull new images, and start the Mathesar containers. Wait a few minutes, then run docker ps to verify that you have mathesar_service , mathesar-caddy-reverse-proxy-1 , and mathesar_db running and that the service is healthy. The services should not be reporting errors. If you were not using Docker volumes for your Mathesar PostgreSQL data, you\u2019re done, and you can login to Mathesar via your usual method. If you\u2019re not sure, try to login to Mathesar. If you\u2019re presented with a screen instructing you to create an Admin user, you likely need to proceed to the next step. Move your PostgreSQL directory Bring down the services: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down Remove scaffold database data, copy your old PostgreSQL volume to the new location: rm -r xMATHESAR_INSTALLATION_DIRx/msar/pgdata cp -r xMATHESAR_PG_DIRx xMATHESAR_INSTALLATION_DIRx/msar/pgdata Bring the services back up: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d If things look good, then you can try to login at the usual address using your normal username and password, and you should see your data. For installations done via our guided script \u00b6 If you installed Mathesar with our (now deprecated) guided script, then you have a Docker Compose installation. See the Docker Compose upgrade steps . For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.4. Warning These steps have not yet been tested extensively. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.4 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.4 Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm ci --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size=4096 Update Mathesar functions on the database: python mathesar/install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"0.1.4"},{"location":"releases/0.1.4/#mathesar-014","text":"","title":"Mathesar 0.1.4"},{"location":"releases/0.1.4/#summary","text":"Mathesar 0.1.4 focuses on improving the installation and setup experience. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.4/#new-features","text":"","title":"New Features"},{"location":"releases/0.1.4/#ui-for-configuring-database-connections","text":"Now you can add, edit, and delete connections to multiple databases from within Mathesar\u2019s UI. Previously this was only possible via editing text-based configuration. #3170 #3223 #3299 #3309 #3319 #3326 #3341 #3348 #3349 #3352 #3354 #3356 #3368 #3377 #3387","title":"UI for configuring database connections"},{"location":"releases/0.1.4/#sample-data-loader","text":"When adding a new database connection, you can choose to load sample data into that database. Sample data will be contained within specific schemas and may be useful to help new users play with Mathesar\u2019s features. #3368","title":"Sample data loader"},{"location":"releases/0.1.4/#postgresql-column-comments","text":"PostgreSQL COMMENT values on columns are now exposed via a read/write \u201cdescription\u201d field within Mathesar. This feature was previously available for schemas and tables and is now available for columns too. #3186 #3219","title":"PostgreSQL column COMMENTs"},{"location":"releases/0.1.4/#text-only-imports","text":"When importing CSV data, Mathesar now gives you the option to use TEXT as the database type for all columns. This choice speeds up the import for larger data sets by skipping the process of guessing column types. #3050 We are still considering additional ways to improve performance when importing \u2014 especially for data sets with lots of columns.","title":"Text-only imports"},{"location":"releases/0.1.4/#reduced-database-privilege-installations","text":"Mathesar can now be installed as long as the database role used during the installation has at least CONNECT and CREATE privileges on the database targeted by the installation. If you want to create a new database for Mathesar\u2019s use, the installation will (naturally) require a role with the CREATEDB privilege. #3117","title":"Reduced database privilege installations"},{"location":"releases/0.1.4/#unified-mathesar-docker-image","text":"The published Mathesar Docker image now contains a PostgreSQL server. This is used to provide a database backend in cases where Mathesar is started via Docker without being configured to connect to any other database. #3121 #3212","title":"Unified Mathesar Docker image"},{"location":"releases/0.1.4/#metadata-storage-within-sqlite","text":"We\u2019ve added experimental SQLite support for the storage of Mathesar metadata. This will allow brave (or foolish) users to run Mathesar with this lighter-weight DB when installing from scratch on Linux. #3203 #3225 #2778","title":"Metadata storage within SQLite"},{"location":"releases/0.1.4/#improved-postgresql-compatibility","text":"Mathesar now officially supports, and is tested against, Postgres versions 13, 14, and 15. It\u2019s also possible (but not yet recommended) to run Mathesar using Postgres 16. #3206","title":"Improved PostgreSQL compatibility"},{"location":"releases/0.1.4/#easier-modification-of-sorting-precedence","text":"When you have multiple sorting conditions applied to a table, you can now rearrange them via drag and drop to adjust the precedence of the sorting conditions. #3316","title":"Easier modification of sorting precedence"},{"location":"releases/0.1.4/#cell-values-displayed-within-sidebar","text":"The table sidebar features a new \u201cCell\u201d tab to show the content of cells, simplifying the process of viewing large text cells.","title":"Cell values displayed within sidebar"},{"location":"releases/0.1.4/#groundwork","text":"We made significant progress towards internationalizing Mathesar\u2019s user interface. We expect to our next release to offer users the ability to toggle between English and Japanese. Subsequent releases will continue to add additional languages. #3102 #3103 #3104 #3302 #3321 #3337 #3340 #3350 #3389 We began some work that will help us eventually distribute Mathesar via a Debian .deb package. Some additional work remains but we hope to introduce this installation method in a future version. #3189 #3225 We implemented the backend side of a new feature to import Excel and JSON files through Mathesar\u2019s import UI. More work still remains to implement the frontend side of this feature. #3083 #3195 #3132 We took some baby steps towards building a system to automatically generate human-readable documentation for all our API endpoints. Significant work still remains. #3271 #3146","title":"Groundwork"},{"location":"releases/0.1.4/#documentation","text":"We improved and updated our documentation for installing and updating Mathesar. ( #3227 )","title":"Documentation"},{"location":"releases/0.1.4/#bug-fixes","text":"Tables having CHECK constraints are now usable within Mathesar. ( #3243 ) Records can now be inserted into tables without primary keys. ( #3252 ) We fixed inconsistent state when selecting a different column while editing a column\u2019s name. ( #3219 ) URL cells now retain their focus after a contained hyperlink is clicked. ( #3012 ) Searching for a record via a partially-entered date string no longer gives an error. ( #3343 ) The Database Page now shows loading and error indicators. ( #3351 ) The Schema Page now displays more detailed information about errors encountered when loading tables and explorations. ( #3323 ) Exclusion constraint violations now produce more helpful error messages. ( #3200 ) Files with missing or duplicate id values can now be imported without error. ( #3155 ) The record selector can now be closed by clicking on the overlay outside its modal. ( #3220 ) Help text for foreign key column data types is now more accurate. ( #3260 ) Users of Mathesar\u2019s public demo site will no longer see database connections listed for other demo users. ( #3129 ) More UI elements have visually distinctive focus states. ( #3313 ) Date formatting is applied to arrays of date values. ( #3325 ) On the record page, values within foreign key columns can now be set to NULL more intuitively. ( #3310 ) A visual layout overflow bug on the record page is fixed. ( #3303 ) Foreign keys referencing non-primary-key columns now display properly. ( #3239 )","title":"Bug fixes"},{"location":"releases/0.1.4/#maintenance","text":"We made our CI pipeline more robust. ( #3254 ) We made some updates to our workflows and developer documentation to support improvements to our issue labeling scheme. ( #3338 #3298 #3280 #3336 ) We made some routine upgrades to dependencies and small adjustments to development tooling. ( #3214 #3353 #3334 #3201 #3295 #3156 #3234 #3229 #3317 ) We addressed regressions from work during this release. ( #3197 ) We improved error handling by preventing storing non-positive IDs for certain objects. ( #3177 ) We clarified the API behavior by specifying JSON-only requests ( #3090 ) We improved testing against DB objects with long names ( #3140 ) We updated our org name to reflect a change from \u201cCenter of Complex Interventions\u201d to \u201cMathesar Foundation\u201d. ( #3312 ) We made some improvements to our developer documentation. ( #3300 #3210 #3279 ) We improved our process for generating release notes. ( #3427 ) We resolved some merge conflicts after finalizing our previous release. ( #3190 )","title":"Maintenance"},{"location":"releases/0.1.4/#upgrading","text":"The 0.1.4 release requires more upgrade steps than we hope to have for future releases! If you run into any trouble, we encourage you to open an issue or contact us for help.","title":"Upgrading to 0.1.4"},{"location":"releases/0.1.4/#docker-compose","text":"If you followed our Docker Compose installation instructions , then use these steps to upgrade your installation to 0.1.4. Note Depending on your setup, you may need to run some commands with sudo . Find needed parts Find your .env and docker-compose.yml files. Run docker inspect mathesar_service and look for the value of the \"com.docker.compose.project.config_files\" key in the resulting JSON to find the path to the docker-compose.yml file. The .env file should be in the same directory. If you have jq installed, you can run docker inspect mathesar_service \\ | jq '.[0].Config.Labels.\"com.docker.compose.project.config_files\"' and get the path directly. The .env file should be in the same directory. Copy the path of the directory containing docker-compose.yml and .env into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the configuration directory. If you are using a Docker container for your PostgreSQL database, Run docker volume inspect mathesar_postgresql_data and look for the \"Mountpoint\" in the resulting JSON. Copy the path of the directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the PostgreSQL data directory. Stop Mathesar, remove old images docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down --rmi all Set up new configuration Warning MATHESAR_DATABASES has been deprecated as of v0.1.4 and will be removed entirely in future releases of Mathesar. If you end up deleting the variable from your .env file before starting up Mathesar after the upgrade, you can still add the connections manually through Mathesar\u2019s UI. Back up the old configuration files: mv xMATHESAR_INSTALLATION_DIRx/docker-compose.yml xMATHESAR_INSTALLATION_DIRx/docker-compose.yml.backup cp xMATHESAR_INSTALLATION_DIRx/.env xMATHESAR_INSTALLATION_DIRx/env.backup (We\u2019ll modify the old file, so we copy instead of moving it.) Download the new docker compose file: curl -sfL -o xMATHESAR_INSTALLATION_DIRx/docker-compose.yml https://raw.githubusercontent.com/mathesar-foundation/mathesar/0.1.4/docker-compose.yml Edit the xMATHESAR_INSTALLATION_DIRx/.env file to break the DJANGO_DATABASE_URL variable into its parts. This variable should have the form: DJANGO_DATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database> You should edit the .env file to have the variables: POSTGRES_USER=<username> POSTGRES_PASSWORD=<password> POSTGRES_HOST=<host> POSTGRES_PORT=<port> POSTGRES_DB=<database> If you don\u2019t want to set those environment variables (e.g., if they\u2019re otherwise used), you can instead edit the docker-compose.yml file directly to add those variables. Double-check the rest of the configuration: You should have your SECRET_KEY variable defined. If hosting on the internet, you should have a DOMAIN_NAME variable defined. Initialize new Mathesar installation docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d This will pull new images, and start the Mathesar containers. Wait a few minutes, then run docker ps to verify that you have mathesar_service , mathesar-caddy-reverse-proxy-1 , and mathesar_db running and that the service is healthy. The services should not be reporting errors. If you were not using Docker volumes for your Mathesar PostgreSQL data, you\u2019re done, and you can login to Mathesar via your usual method. If you\u2019re not sure, try to login to Mathesar. If you\u2019re presented with a screen instructing you to create an Admin user, you likely need to proceed to the next step. Move your PostgreSQL directory Bring down the services: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down Remove scaffold database data, copy your old PostgreSQL volume to the new location: rm -r xMATHESAR_INSTALLATION_DIRx/msar/pgdata cp -r xMATHESAR_PG_DIRx xMATHESAR_INSTALLATION_DIRx/msar/pgdata Bring the services back up: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d If things look good, then you can try to login at the usual address using your normal username and password, and you should see your data.","title":"For installations using Docker Compose"},{"location":"releases/0.1.4/#guided","text":"If you installed Mathesar with our (now deprecated) guided script, then you have a Docker Compose installation. See the Docker Compose upgrade steps .","title":"For installations done via our guided script"},{"location":"releases/0.1.4/#scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.4. Warning These steps have not yet been tested extensively. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.4 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.4 Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm ci --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size=4096 Update Mathesar functions on the database: python mathesar/install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"releases/0.1.5/","text":"Mathesar 0.1.5 \u00b6 Summary \u00b6 Mathesar 0.1.5 is a small, bug fix release. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release. Improvements \u00b6 Improve performance of loading sample data when adding a new connection #3448 Constrain the width of the connections page #3439 Bug fixes \u00b6 Fix \u201cPage not found\u201d error when viewing a shared exploration #3456 Fix bugs preventing Mathesar from running in demo mode #3459 Fix timeout when setting up a new database with sample data in installations with higher network latency #3448 Restore display of column type icons within shared tables #3456 Temporarily hide link to missing docs page #3451 Fix active cell displaying above row header cell #3382 Documentation \u00b6 Improve docs on using an external PostgreSQL server for Mathesar\u2019s internal database #3457 Add embedded video walkthrough within installation steps #3437 #3443 0.1.5 release notes #3449 Maintenance \u00b6 Improve our release notes helper script #3435 Post-release cleanup #3432 Upgrading to Mathesar 0.1.5 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , except that you\u2019ll need to specify version 0.1.5 when pulling code from the repository in Step 2. You should also skip Step 5 \u2013 you do not need to change the environment variables.","title":"0.1.5"},{"location":"releases/0.1.5/#mathesar-015","text":"","title":"Mathesar 0.1.5"},{"location":"releases/0.1.5/#summary","text":"Mathesar 0.1.5 is a small, bug fix release. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.5/#improvements","text":"Improve performance of loading sample data when adding a new connection #3448 Constrain the width of the connections page #3439","title":"Improvements"},{"location":"releases/0.1.5/#bug-fixes","text":"Fix \u201cPage not found\u201d error when viewing a shared exploration #3456 Fix bugs preventing Mathesar from running in demo mode #3459 Fix timeout when setting up a new database with sample data in installations with higher network latency #3448 Restore display of column type icons within shared tables #3456 Temporarily hide link to missing docs page #3451 Fix active cell displaying above row header cell #3382","title":"Bug fixes"},{"location":"releases/0.1.5/#documentation","text":"Improve docs on using an external PostgreSQL server for Mathesar\u2019s internal database #3457 Add embedded video walkthrough within installation steps #3437 #3443 0.1.5 release notes #3449","title":"Documentation"},{"location":"releases/0.1.5/#maintenance","text":"Improve our release notes helper script #3435 Post-release cleanup #3432","title":"Maintenance"},{"location":"releases/0.1.5/#upgrading","text":"","title":"Upgrading to Mathesar 0.1.5"},{"location":"releases/0.1.5/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"releases/0.1.5/#for-installations-done-from-scratch","text":"If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , except that you\u2019ll need to specify version 0.1.5 when pulling code from the repository in Step 2. You should also skip Step 5 \u2013 you do not need to change the environment variables.","title":"For installations done from scratch"},{"location":"releases/0.1.6/","text":"Mathesar 0.1.6 \u00b6 Summary \u00b6 Mathesar 0.1.6 introduces Japanese localization of the UI and adds better support for working with long text in individual record pages. Improvements for administrators include compatibility with Python 3.10 and 3.11, support for databases running PostgreSQL 16, and the removal of npm and nodejs as dependencies when installing from scratch. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release. Improvements \u00b6 You can now configure Mathesar\u2019s UI to display in Japanese \u00b6 The language setting is stored per-user and can be modified when logging in or when editing a user. This changes the text displayed on buttons and other UI elements within Mathesar. It does not change the display of data within your database (e.g. table names, column names, and cell values). We are hoping to support more languages beyond English and Japanese eventually. Please reach out to us if your are interested in helping to add more translations! #3486 , #3484 , #3483 , #3472 , #3501 Text fields now auto-expands on the record page to accommodate longer texts \u00b6 Before All text inputs on the record page had the same height, regardless of their content. After All text inputs in record page dynamically adjust to accommodate the content seamlessly. #3470 , #3488 , #3495 Mathesar is now compatible with Python versions: 3.10 and 3.11 along with 3.9 \u00b6 Mathesar now officially supports Python versions 3.10 and 3.11, in addition to the existing 3.9 compatibility. This will provide great flexibility while building Mathesar from source on an OS that natively ships with relatively newer versions of Python. #3478 , #3499 , #3503 , #3504 Mathesar is now compatible with PostgreSQL 16 \u00b6 Mathesar now officially supports, and is tested against, Postgres versions 13, 14, 15 and 16. #3480 NodeJS is no longer a requirement for building Mathesar from source \u00b6 We removed NodeJS as a dependency in favour of providing users with pre-built static assest for building Mathesar from source. #3489 Bug fix \u00b6 Fixed connection creation failures due to schema name collisions while adding provided sample schema(s) in the database #3490 Documentation \u00b6 Documented upgrade instructions for v0.1.6 #3507 0.1.6 release notes #3506 Documented mathesar-debug image for Docker based installations #3513 Fixed upgrade instructions for v0.1.5 #3469 Updated Mathesar\u2019s version number in docs #3476 Added MkDocs edit URI #3482 Removed stale code coverage badge #3491 Maintenance \u00b6 Added a health check endpoint for Mathesar #3479 Bumped Django from 4.2.8 to 4.2.10 #3492 Removed NodeJS from Docker production image #3474 Post release cleanup #3463 Upgrading to Mathesar 0.1.6 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.6. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.6 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.6 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.6/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"0.1.6"},{"location":"releases/0.1.6/#mathesar-016","text":"","title":"Mathesar 0.1.6"},{"location":"releases/0.1.6/#summary","text":"Mathesar 0.1.6 introduces Japanese localization of the UI and adds better support for working with long text in individual record pages. Improvements for administrators include compatibility with Python 3.10 and 3.11, support for databases running PostgreSQL 16, and the removal of npm and nodejs as dependencies when installing from scratch. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.6/#improvements","text":"","title":"Improvements"},{"location":"releases/0.1.6/#you-can-now-configure-mathesars-ui-to-display-in-japanese","text":"The language setting is stored per-user and can be modified when logging in or when editing a user. This changes the text displayed on buttons and other UI elements within Mathesar. It does not change the display of data within your database (e.g. table names, column names, and cell values). We are hoping to support more languages beyond English and Japanese eventually. Please reach out to us if your are interested in helping to add more translations! #3486 , #3484 , #3483 , #3472 , #3501","title":"You can now configure Mathesar's UI to display in Japanese"},{"location":"releases/0.1.6/#text-fields-now-auto-expands-on-the-record-page-to-accommodate-longer-texts","text":"Before All text inputs on the record page had the same height, regardless of their content. After All text inputs in record page dynamically adjust to accommodate the content seamlessly. #3470 , #3488 , #3495","title":"Text fields now auto-expands on the record page to accommodate longer texts"},{"location":"releases/0.1.6/#mathesar-is-now-compatible-with-python-versions-310-and-311-along-with-39","text":"Mathesar now officially supports Python versions 3.10 and 3.11, in addition to the existing 3.9 compatibility. This will provide great flexibility while building Mathesar from source on an OS that natively ships with relatively newer versions of Python. #3478 , #3499 , #3503 , #3504","title":"Mathesar is now compatible with Python versions: 3.10 and 3.11 along with 3.9"},{"location":"releases/0.1.6/#mathesar-is-now-compatible-with-postgresql-16","text":"Mathesar now officially supports, and is tested against, Postgres versions 13, 14, 15 and 16. #3480","title":"Mathesar is now compatible with PostgreSQL 16"},{"location":"releases/0.1.6/#nodejs-is-no-longer-a-requirement-for-building-mathesar-from-source","text":"We removed NodeJS as a dependency in favour of providing users with pre-built static assest for building Mathesar from source. #3489","title":"NodeJS is no longer a requirement for building Mathesar from source"},{"location":"releases/0.1.6/#bug-fix","text":"Fixed connection creation failures due to schema name collisions while adding provided sample schema(s) in the database #3490","title":"Bug fix"},{"location":"releases/0.1.6/#documentation","text":"Documented upgrade instructions for v0.1.6 #3507 0.1.6 release notes #3506 Documented mathesar-debug image for Docker based installations #3513 Fixed upgrade instructions for v0.1.5 #3469 Updated Mathesar\u2019s version number in docs #3476 Added MkDocs edit URI #3482 Removed stale code coverage badge #3491","title":"Documentation"},{"location":"releases/0.1.6/#maintenance","text":"Added a health check endpoint for Mathesar #3479 Bumped Django from 4.2.8 to 4.2.10 #3492 Removed NodeJS from Docker production image #3474 Post release cleanup #3463","title":"Maintenance"},{"location":"releases/0.1.6/#upgrading","text":"","title":"Upgrading to Mathesar 0.1.6"},{"location":"releases/0.1.6/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"releases/0.1.6/#for-installations-done-from-scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.6. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.6 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.6 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.6/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"releases/0.1.7/","text":"Mathesar 0.1.7 \u00b6 Summary \u00b6 Mathesar 0.1.7 introduces linked table navigation from the data cell context menu. This release also fixes the regeneration of exploration share URLs and removes the \u2018group\u2019 suffix in the Data Explorer column names. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release. Improvements \u00b6 Linked Table Navigation from Cell Context Menu \u00b6 Users can now navigate to linked tables from the cell context menu, providing a more seamless experience when working with linked data. #3526 Bug fixes \u00b6 Fixed Regeneration of Exploration Share URL \u00b6 Fixed an issue where clicking \u201cRegenerate Link\u201d for a shared exploration failed to create a new URL and resulted in a 404 API request. Now, users will see a successful API call with a new, regenerated share URL. #3521 Remove \u2018group\u2019 Suffix in Data Explorer \u00b6 Resolved an issue in the Data Explorer where the grouping column name was incorrectly suffixed with \u2018group\u2019. Now, the original column names are preserved when summarizing data. #3357 Documentation \u00b6 Upgrade Instructions for 0.1.7 #3534 Maintenance \u00b6 Bump Django from 4.2.10 to 4.2.11 #3496 Made Release Notes Script Portable #3529 Removed Stray Changes Post Script Update #3530 Integrated Changes from Previous Release Preparation #3517 Added Demo Target in Dockerfile for Future Deployments #3523 New RPC Endpoint Implementation for Superuser Functions #3524 Upgrading to Mathesar 0.1.7 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.7. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.7 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.7 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"0.1.7"},{"location":"releases/0.1.7/#mathesar-017","text":"","title":"Mathesar 0.1.7"},{"location":"releases/0.1.7/#summary","text":"Mathesar 0.1.7 introduces linked table navigation from the data cell context menu. This release also fixes the regeneration of exploration share URLs and removes the \u2018group\u2019 suffix in the Data Explorer column names. See the upgrading section below for instructions on how to upgrade to this version. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.7/#improvements","text":"","title":"Improvements"},{"location":"releases/0.1.7/#linked-table-navigation-from-cell-context-menu","text":"Users can now navigate to linked tables from the cell context menu, providing a more seamless experience when working with linked data. #3526","title":"Linked Table Navigation from Cell Context Menu"},{"location":"releases/0.1.7/#bug-fixes","text":"","title":"Bug fixes"},{"location":"releases/0.1.7/#fixed-regeneration-of-exploration-share-url","text":"Fixed an issue where clicking \u201cRegenerate Link\u201d for a shared exploration failed to create a new URL and resulted in a 404 API request. Now, users will see a successful API call with a new, regenerated share URL. #3521","title":"Fixed Regeneration of Exploration Share URL"},{"location":"releases/0.1.7/#remove-group-suffix-in-data-explorer","text":"Resolved an issue in the Data Explorer where the grouping column name was incorrectly suffixed with \u2018group\u2019. Now, the original column names are preserved when summarizing data. #3357","title":"Remove 'group' Suffix in Data Explorer"},{"location":"releases/0.1.7/#documentation","text":"Upgrade Instructions for 0.1.7 #3534","title":"Documentation"},{"location":"releases/0.1.7/#maintenance","text":"Bump Django from 4.2.10 to 4.2.11 #3496 Made Release Notes Script Portable #3529 Removed Stray Changes Post Script Update #3530 Integrated Changes from Previous Release Preparation #3517 Added Demo Target in Dockerfile for Future Deployments #3523 New RPC Endpoint Implementation for Superuser Functions #3524","title":"Maintenance"},{"location":"releases/0.1.7/#upgrading","text":"","title":"Upgrading to Mathesar 0.1.7"},{"location":"releases/0.1.7/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"releases/0.1.7/#for-installations-done-from-scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.7. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.7 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.7 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"releases/0.2.0/","text":"Mathesar 0.2.0 (beta) \u00b6 Summary \u00b6 Version 0.2.0 is Mathesar\u2019s first beta release and features a brand new access control system , massive performance improvements , and an important security fix . Upgrading directly from previous versions to 0.2.0 is not supported. Don\u2019t worry\u2014 your databases can still be migrated to 0.2.0 using the instructions provided below . This page provides a comprehensive list of all changes since version 0.1.7. Security Fixes \u00b6 Fix unauthorized access to cached import data \u00b6 Risk : Information disclosure Severity : Low-medium Affected versions : 0.1.0 - 0.1.7 Description : Mathesar has a feature to import data into a new table via uploading a CSV file. During the import process, the uploaded CSV file is cached within Mathesar and never actually deleted. Prior to version 0.2.0, all authenticated users were able to use Mathesar\u2019s API to read the cached data for all imports which had ever been performed by any user. This could allow one authenticated user to maliciously read another user\u2019s uploaded data. (Anonymous users are not affected \u2014 they have never been able to read any cached import data.) From version 0.2.0 onwards, Mathesar only allows each user to read their own cached import data. If any of your users might have imported CSV data through Mathesar which they would like to keep private from other users within the same Mathesar installation , then we recommend moving your Mathesar installation to 0.2.0. Fixed via : #4157 Work-around : To mitigate an older version of Mathesar against this vulnerability without upgrading, you can delete all the cached import data files with the following steps. How to delete your cached import data files Run docker ps to identify the name of your running Mathesar container. This is commonly named mathesar_service but might vary depending on how you have installed Mathesar Run docker exec -it mathesar_service bash to open a shell within your running Mathesar service container. (Replace \u201cmathesar_service\u201d with the name of your container determined above, if needed.) From within the shell, run the following command to list your cached import data files. ls -la /code/.media/* Run the following command to remove all your cached import data files: rm -rf /code/.media/* Note that after performing this work-around, subsequent imports will still be vulnerable to this bug until you upgrade to Mathesar 0.2.0. Improvements \u00b6 New access control system based on PostgreSQL roles and privileges \u00b6 We\u2019ve completely redesigned Mathesar\u2019s access controls to leverage PostgreSQL\u2019s powerful system of roles and privileges. Each Mathesar user will now be assigned to a specific PostgreSQL role so that all their operations on the underlying database will be performed using that role. The new system gives Mathesar several new capabilities. You can use Mathesar to configure roles and privileges in PostgreSQL and to set granular access control at the individual schema and table level. Plus Mathesar will respect all these configurations when performed directly in PostgreSQL by database administrators outside of Mathesar. Mathesar also no longer needs a database superuser for day-to-day operations. #3626 #3663 #3665 #3667 #3684 #3685 #3689 #3710 #3711 #3750 #3760 #3762 #3769 #3781 #3786 #3789 #3795 #3810 #3833 #3836 #3838 #3840 #3858 #3859 #3861 #3869 #3881 #3895 #3922 #3931 #3958 #3966 #3982 #4011 #4024 #4082 #4104 #4132 #4075 Substantial performance improvements \u00b6 Mathesar is now much faster! Most pages load about 5x faster, and large imports run about 50x faster. Also, you\u2019ll no longer need to manually \u201csync database schema changes\u201d to Mathesar. Now, any DDL changes will be reflected in Mathesar automatically! To achieve these gains, we\u2019ve significantly overhauled Mathesar\u2019s backend architecture, moving a large chunk of the application code into the database itself, and migrating to a new API . #3543 #3547 #3556 #3586 #3588 #3589 #3597 #3598 #3599 #3608 #3610 #3612 #3614 #3615 #3616 #3618 #3620 #3623 #3628 #3632 #3633 #3635 #3637 #3641 #3646 #3648 #3649 #3650 #3651 #3653 #3664 #3666 #3669 #3672 #3676 #3691 #3694 #3696 #3698 #3699 #3700 #3702 #3703 #3704 #3708 #3709 #3717 #3718 #3721 #3723 #3725 #3728 #3731 #3740 #3741 #3745 #3746 #3748 #3749 #3751 #3754 #3755 #3759 #3761 #3767 #3771 #3782 #3783 #3791 #3796 #3799 #3800 #3802 #3803 #3804 #3807 #3808 #3809 #3811 #3813 #3814 #3819 #3821 #3823 #3824 #3825 #3831 #3832 #3837 #3843 #3845 #3847 #3850 #3852 #3853 #3855 #3856 #3857 #3866 #3873 #3879 #3884 #3885 #3892 #3893 #3894 #3897 #3909 #3940 #3948 #3974 #3976 #3978 #3979 #3983 #3984 #3987 #3996 #4015 #4016 #4021 #4026 #4035 #4040 #4116 #4123 #4046 #4065 #4073 #4105 Table exports \u00b6 You can now use Mathesar to export a table to a CSV file. Any filters and sorting that you\u2019ve applied to the table will be reflected in the exported data. And all relevant records will be included in the export, even if they are not shown on the current page within Mathesar. #4090 More options when disconnecting a database \u00b6 When disconnecting a database from Mathesar, you can now choose to remove the Mathesar schemas from the database. #4122 #4136 #4124 Small usability improvements \u00b6 Persist visibility of table inspector sections #3997 Default to case-insensitive comparison when filtering records #4131 Prevent Enter key from mistakenly altering filter value #4078 Make the top navigation header behave more consistently #4072 #4101 Improve alignment of numeric fields on record page #4077 Highlight newly-created items #4089 #4109 Add entity type names to database and schema pages #4107 Simplify the schema page #4112 Improve the data explorer layout #4115 Show a loading spinner for tale pages #3602 Improve visual style and aesthetics #3860 #3962 #3970 #3998 #4047 More sample data \u00b6 Mathesar now gives you the option to load several new sample data sets when connecting a database. #4142 Optional (anonymous) usage reporting \u00b6 To help us better understand the ways in which people are using Mathesar, we\u2019ve added a new feature which periodically reports anonymous usage data about each Mathesar installation to the maintainers team. Upon installing (or upgrading to) Mathesar 0.2.0, Mathesar will give you an opportunity to opt out of usage data collection if you so choose. You can access this setting later by visiting the \u201cAdministration\u201d > \u201cPrivacy\u201d page within Mathesar. This usage data will help us make Mathesar better! And it will help us demonstrate Mathesar\u2019s traction and impact to potential donors \u2014 so we encourage you to enable it. We do not collect any personal or sensitive data! Here is a sample of the anonymous usage data we collect: { \"installation_id\" : \"5f0126e9-02b0-451f-8797-6e2574b69814\" , \"mathesar_version\" : \"0.2.0\" , \"user_count\" : 12 , \"active_user_count\" : 8 , \"configured_role_count\" : 2 , \"connected_database_count\" : 6 , \"connected_database_schema_count\" : 35 , \"connected_database_table_count\" : 169 , \"connected_database_record_count\" : 1164525 , \"exploration_count\" : 0 } #4049 #4111 #4126 #4140 #4141 Bug fixes \u00b6 Fix error when trying to reset password of other user #3536 Handle negative numbers correctly when copying cells #3582 Fix several subtle bugs related to selecting cells in a sheet #3037 #3968 #3973 Fix timeout when installing Mathesar on a remote DB #3917 Sort list of schemas #4050 Allow users to hover over record-level error messages #4087 Allow scrolling on \u201cCreate Superuser\u201d page #4093 Fix alignment of numbers in cells for some font families #4097 Fix 404 error from server side navigation to New User page #4106 Fix Save & Discard buttons always shown when viewing user #3971 Improve error handling when attempting to import unsupported file types #4028 Keep record selector open when double-clicking on linked record cell #4043 Fix redundant schema name in page titles #4074 Documentation \u00b6 New User Guide \u00b6 We\u2019ve overhauled our User Guide to document all new features and more thoroughly explain the inner-workings of Mathesar. You might even learn a thing or two about PostgreSQL by reading it! #3910 #3945 #4031 More in-app help \u00b6 You\u2019ll also find more help within the application itself. Look for small gray help bubbles to explain concepts and provides links to more detailed information within the User Guide. #4108 #4135 #4144 #4121 #4098 Multi-versioned documentation \u00b6 Our documentation site https://docs.mathesar.org/ now features documentation for multiple Mathesar versions. See the version-switcher within the top navigation bar to read documentation for older versions of Mathesar. #3920 #3967 Features removed \u00b6 Sharable tables and explorations are no longer available \u00b6 Back in version 0.1.3, we added support for \u201csharing\u201d tables and explorations via a link that would allow anonymous users to view data. In Mathesar 0.2.0, we\u2019ve removed this feature in order to speed up the development of our new PostgreSQL-based access control system. If you were relying on this feature, we\u2019d like to hear from you! Please open an issue to let us know. Mathesar\u2019s internal database may no longer be SQLite \u00b6 Version 0.2.0 removes support for SQLite as an internal database . If you were relying on this feature, we\u2019d like to hear from you! Please open an issue to let us know. #4023 Mathesar\u2019s live demo is no longer active \u00b6 We have removed the code and infrastructure which supported Mathesar\u2019s live demo. #3538 #3551 #3577 #3579 #3580 #3581 Maintenance \u00b6 The following PRs represent work done to reduce technical debt, update dependencies, improve developer documentation, and maintain our workflows. #3360 #3535 #3541 #3544 #3546 #3552 #3558 #3559 #3564 #3567 #3568 #3569 #3587 #3604 #3643 #3678 #3695 #3763 #3918 #3920 #3938 #3939 #3943 #3947 #3949 #3950 #3959 #3961 #3964 #3972 #3975 #3981 #3985 #3988 #3989 #3990 #3991 #3994 #3999 #4025 #4032 #4039 #4045 #4060 #4064 #4076 #4125 #4133 #4145 #3980 #4158 #4159 #4165 #4152 #4170 Migrating to 0.2.0 from previous versions \u00b6 Mathesar 0.2.0 is our first beta release. As such, direct upgrades from our alpha versions are not supported. However, you can migrate the databases created in older versions to work with 0.2.0 by following the steps below. Migration Overview \u00b6 What you can migrate : the databases you\u2019ve created/connected and the data within them. What you cannot migrate : user accounts, passwords, explorations , and metadata . Here\u2019s what we\u2019ll do: Take note of the databases you\u2019ve created or connected in your current Mathesar setup. Install Mathesar 0.2.0 . Reconnect the databases you had before. When should I perform these steps? If any of your connected databases reside inside Mathesar\u2019s internal database server ( inside Docker containers), then you will need to perform these steps. If all of your connected databases reside in PostgreSQL servers outside the Mathesar\u2019s Docker containers, then you could install 0.2.0 and reconnect your databases. For installations using Docker Compose \u00b6 These instructions are for if you have a Docker compose installation (including one from the guided script). These steps assume that you\u2019re using our provided docker-compose.yml file, and the installation directory is /etc/mathesar . If you have installed Mathesar in a different location or heavily modified the docker-compose.yml , you may need to change some details of the provided commands. With your old version of Mathesar still running, log into your internal database server: docker exec -it mathesar_db psql -U mathesar -d mathesar_django (This assumes your installation DB role is mathesar . Modify if necessary.) At the psql prompt, run: SELECT db_name , host , port FROM mathesar_database ; The above SQL query will provide the list of connected database names along with their hosts and port. Copy and paste them in a text file somewhere. We will need them after installing 0.2.0. Then create a temporary database: CREATE DATABASE mathesar_temp ; Log out with Ctrl + D , and log into the mathesar_temp database: docker exec -it mathesar_db psql -U mathesar -d mathesar_temp Then drop the old Mathesar Django database, and create a new one: DROP DATABASE mathesar_django ; CREATE DATABASE mathesar_django OWNER mathesar ; (Modify mathesar above to set the owner to whichever role you use to run Mathesar.) Log out with Ctrl + D , and log into your new mathesar_django database: docker exec -it mathesar_db psql -U mathesar -d mathesar_django Then drop the temporary database: DROP DATABASE mathesar_temp ; Log out with Ctrl + D . Stop Mathesar. docker compose -f /etc/mathesar/docker-compose.yml down Rename the old docker-compose file. mv /etc/mathesar/docker-compose.yml /etc/mathesar/docker-compose.old.yml Download the 0.2.0 docker-compose.yml file and place it within /etc/mathesar . cd /etc/mathesar wget https://github.com/mathesar-foundation/mathesar/raw/0.2.0/docker-compose.yml Modify it as per the installation instructions , using values from your old docker-compose.old.yml file. Run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d After Mathesar starts, connect to the databases using the \u201cConnect to an Existing Database\u201d option on the UI. Use the db_name, host, and port information from the previous database backup list to fill the form. For the mathesar_db host, the Role Name and Password can be found from the values of POSTGRES_USER and POSTGRES_PASSWORD environment variables. The values for these environment variables can be found in the docker-compose.yml file, or if you\u2019ve customized them, in your .env file. The default values for them are mathesar and mathesar . If you have any external hosts (other than mathesar_db ), you should probably have the postgres user and passwords with you. For installations done from scratch \u00b6 For these instructions, you\u2019ll need to be familiar enough with your setup to log into your internal Mathesar Database. These steps assume that the installation directory is /etc/mathesar . If you have installed Mathesar in a different location, you may need to change some details of the provided commands. Log into your mathesar_django database, and run: SELECT db_name , host , port FROM mathesar_database ; The above SQL query will provide the list of connected database names along with their hosts and port. Copy and paste them in a text file somewhere. We will need them after installing 0.2.0. Then create a temporary database: CREATE DATABASE mathesar_temp ; Log out with Ctrl + D , and log into the mathesar_temp database. Then drop the old Mathesar Django database, and create a new one: DROP DATABASE mathesar_django ; CREATE DATABASE mathesar_django OWNER mathesar ; (Modify mathesar above to set the owner to whichever role you use to run Mathesar.) Log out with Ctrl + D , and log into your new mathesar_django database. Then drop the temporary database: DROP DATABASE mathesar_temp ; Log out with Ctrl + D . Stop Mathesar if it\u2019s running. Delete your previous Mathesar installation directory rm -rf /etc/mathesar Install Mathesar 0.2.0 using the installation steps in the same location: /etc/mathesar . You would not have to setup a PostgreSQL database since you already have one running. After Mathesar starts, connect to the databases using the \u201cConnect to an Existing Database\u201d option on the UI. Use the db_name from the previous database backup list to fill the Database Name in the form. The Host name would be same as the value of POSTGRES_HOST environment variable for the databases created via Mathesar. The Role Name and Password can be found from the values of POSTGRES_USER and POSTGRES_PASSWORD environment variables. The values for these environment variables can be found in your .env file. If you have any external hosts (other than the one in POSTGRES_HOST ), you should probably have the postgres user and passwords with you.","title":"0.2.0"},{"location":"releases/0.2.0/#mathesar-020-beta","text":"","title":"Mathesar 0.2.0 (beta)"},{"location":"releases/0.2.0/#summary","text":"Version 0.2.0 is Mathesar\u2019s first beta release and features a brand new access control system , massive performance improvements , and an important security fix . Upgrading directly from previous versions to 0.2.0 is not supported. Don\u2019t worry\u2014 your databases can still be migrated to 0.2.0 using the instructions provided below . This page provides a comprehensive list of all changes since version 0.1.7.","title":"Summary"},{"location":"releases/0.2.0/#security-fixes","text":"","title":"Security Fixes"},{"location":"releases/0.2.0/#data-files","text":"Risk : Information disclosure Severity : Low-medium Affected versions : 0.1.0 - 0.1.7 Description : Mathesar has a feature to import data into a new table via uploading a CSV file. During the import process, the uploaded CSV file is cached within Mathesar and never actually deleted. Prior to version 0.2.0, all authenticated users were able to use Mathesar\u2019s API to read the cached data for all imports which had ever been performed by any user. This could allow one authenticated user to maliciously read another user\u2019s uploaded data. (Anonymous users are not affected \u2014 they have never been able to read any cached import data.) From version 0.2.0 onwards, Mathesar only allows each user to read their own cached import data. If any of your users might have imported CSV data through Mathesar which they would like to keep private from other users within the same Mathesar installation , then we recommend moving your Mathesar installation to 0.2.0. Fixed via : #4157 Work-around : To mitigate an older version of Mathesar against this vulnerability without upgrading, you can delete all the cached import data files with the following steps. How to delete your cached import data files Run docker ps to identify the name of your running Mathesar container. This is commonly named mathesar_service but might vary depending on how you have installed Mathesar Run docker exec -it mathesar_service bash to open a shell within your running Mathesar service container. (Replace \u201cmathesar_service\u201d with the name of your container determined above, if needed.) From within the shell, run the following command to list your cached import data files. ls -la /code/.media/* Run the following command to remove all your cached import data files: rm -rf /code/.media/* Note that after performing this work-around, subsequent imports will still be vulnerable to this bug until you upgrade to Mathesar 0.2.0.","title":"Fix unauthorized access to cached import data"},{"location":"releases/0.2.0/#improvements","text":"","title":"Improvements"},{"location":"releases/0.2.0/#permissions","text":"We\u2019ve completely redesigned Mathesar\u2019s access controls to leverage PostgreSQL\u2019s powerful system of roles and privileges. Each Mathesar user will now be assigned to a specific PostgreSQL role so that all their operations on the underlying database will be performed using that role. The new system gives Mathesar several new capabilities. You can use Mathesar to configure roles and privileges in PostgreSQL and to set granular access control at the individual schema and table level. Plus Mathesar will respect all these configurations when performed directly in PostgreSQL by database administrators outside of Mathesar. Mathesar also no longer needs a database superuser for day-to-day operations. #3626 #3663 #3665 #3667 #3684 #3685 #3689 #3710 #3711 #3750 #3760 #3762 #3769 #3781 #3786 #3789 #3795 #3810 #3833 #3836 #3838 #3840 #3858 #3859 #3861 #3869 #3881 #3895 #3922 #3931 #3958 #3966 #3982 #4011 #4024 #4082 #4104 #4132 #4075","title":"New access control system based on PostgreSQL roles and privileges"},{"location":"releases/0.2.0/#performance","text":"Mathesar is now much faster! Most pages load about 5x faster, and large imports run about 50x faster. Also, you\u2019ll no longer need to manually \u201csync database schema changes\u201d to Mathesar. Now, any DDL changes will be reflected in Mathesar automatically! To achieve these gains, we\u2019ve significantly overhauled Mathesar\u2019s backend architecture, moving a large chunk of the application code into the database itself, and migrating to a new API . #3543 #3547 #3556 #3586 #3588 #3589 #3597 #3598 #3599 #3608 #3610 #3612 #3614 #3615 #3616 #3618 #3620 #3623 #3628 #3632 #3633 #3635 #3637 #3641 #3646 #3648 #3649 #3650 #3651 #3653 #3664 #3666 #3669 #3672 #3676 #3691 #3694 #3696 #3698 #3699 #3700 #3702 #3703 #3704 #3708 #3709 #3717 #3718 #3721 #3723 #3725 #3728 #3731 #3740 #3741 #3745 #3746 #3748 #3749 #3751 #3754 #3755 #3759 #3761 #3767 #3771 #3782 #3783 #3791 #3796 #3799 #3800 #3802 #3803 #3804 #3807 #3808 #3809 #3811 #3813 #3814 #3819 #3821 #3823 #3824 #3825 #3831 #3832 #3837 #3843 #3845 #3847 #3850 #3852 #3853 #3855 #3856 #3857 #3866 #3873 #3879 #3884 #3885 #3892 #3893 #3894 #3897 #3909 #3940 #3948 #3974 #3976 #3978 #3979 #3983 #3984 #3987 #3996 #4015 #4016 #4021 #4026 #4035 #4040 #4116 #4123 #4046 #4065 #4073 #4105","title":"Substantial performance improvements"},{"location":"releases/0.2.0/#table-exports","text":"You can now use Mathesar to export a table to a CSV file. Any filters and sorting that you\u2019ve applied to the table will be reflected in the exported data. And all relevant records will be included in the export, even if they are not shown on the current page within Mathesar. #4090","title":"Table exports"},{"location":"releases/0.2.0/#more-options-when-disconnecting-a-database","text":"When disconnecting a database from Mathesar, you can now choose to remove the Mathesar schemas from the database. #4122 #4136 #4124","title":"More options when disconnecting a database"},{"location":"releases/0.2.0/#small-usability-improvements","text":"Persist visibility of table inspector sections #3997 Default to case-insensitive comparison when filtering records #4131 Prevent Enter key from mistakenly altering filter value #4078 Make the top navigation header behave more consistently #4072 #4101 Improve alignment of numeric fields on record page #4077 Highlight newly-created items #4089 #4109 Add entity type names to database and schema pages #4107 Simplify the schema page #4112 Improve the data explorer layout #4115 Show a loading spinner for tale pages #3602 Improve visual style and aesthetics #3860 #3962 #3970 #3998 #4047","title":"Small usability improvements"},{"location":"releases/0.2.0/#more-sample-data","text":"Mathesar now gives you the option to load several new sample data sets when connecting a database. #4142","title":"More sample data"},{"location":"releases/0.2.0/#optional-anonymous-usage-reporting","text":"To help us better understand the ways in which people are using Mathesar, we\u2019ve added a new feature which periodically reports anonymous usage data about each Mathesar installation to the maintainers team. Upon installing (or upgrading to) Mathesar 0.2.0, Mathesar will give you an opportunity to opt out of usage data collection if you so choose. You can access this setting later by visiting the \u201cAdministration\u201d > \u201cPrivacy\u201d page within Mathesar. This usage data will help us make Mathesar better! And it will help us demonstrate Mathesar\u2019s traction and impact to potential donors \u2014 so we encourage you to enable it. We do not collect any personal or sensitive data! Here is a sample of the anonymous usage data we collect: { \"installation_id\" : \"5f0126e9-02b0-451f-8797-6e2574b69814\" , \"mathesar_version\" : \"0.2.0\" , \"user_count\" : 12 , \"active_user_count\" : 8 , \"configured_role_count\" : 2 , \"connected_database_count\" : 6 , \"connected_database_schema_count\" : 35 , \"connected_database_table_count\" : 169 , \"connected_database_record_count\" : 1164525 , \"exploration_count\" : 0 } #4049 #4111 #4126 #4140 #4141","title":"Optional (anonymous) usage reporting"},{"location":"releases/0.2.0/#bug-fixes","text":"Fix error when trying to reset password of other user #3536 Handle negative numbers correctly when copying cells #3582 Fix several subtle bugs related to selecting cells in a sheet #3037 #3968 #3973 Fix timeout when installing Mathesar on a remote DB #3917 Sort list of schemas #4050 Allow users to hover over record-level error messages #4087 Allow scrolling on \u201cCreate Superuser\u201d page #4093 Fix alignment of numbers in cells for some font families #4097 Fix 404 error from server side navigation to New User page #4106 Fix Save & Discard buttons always shown when viewing user #3971 Improve error handling when attempting to import unsupported file types #4028 Keep record selector open when double-clicking on linked record cell #4043 Fix redundant schema name in page titles #4074","title":"Bug fixes"},{"location":"releases/0.2.0/#documentation","text":"","title":"Documentation"},{"location":"releases/0.2.0/#new-user-guide","text":"We\u2019ve overhauled our User Guide to document all new features and more thoroughly explain the inner-workings of Mathesar. You might even learn a thing or two about PostgreSQL by reading it! #3910 #3945 #4031","title":"New User Guide"},{"location":"releases/0.2.0/#more-in-app-help","text":"You\u2019ll also find more help within the application itself. Look for small gray help bubbles to explain concepts and provides links to more detailed information within the User Guide. #4108 #4135 #4144 #4121 #4098","title":"More in-app help"},{"location":"releases/0.2.0/#multi-versioned-documentation","text":"Our documentation site https://docs.mathesar.org/ now features documentation for multiple Mathesar versions. See the version-switcher within the top navigation bar to read documentation for older versions of Mathesar. #3920 #3967","title":"Multi-versioned documentation"},{"location":"releases/0.2.0/#features-removed","text":"","title":"Features removed"},{"location":"releases/0.2.0/#sharable-tables-and-explorations-are-no-longer-available","text":"Back in version 0.1.3, we added support for \u201csharing\u201d tables and explorations via a link that would allow anonymous users to view data. In Mathesar 0.2.0, we\u2019ve removed this feature in order to speed up the development of our new PostgreSQL-based access control system. If you were relying on this feature, we\u2019d like to hear from you! Please open an issue to let us know.","title":"Sharable tables and explorations are no longer available"},{"location":"releases/0.2.0/#mathesars-internal-database-may-no-longer-be-sqlite","text":"Version 0.2.0 removes support for SQLite as an internal database . If you were relying on this feature, we\u2019d like to hear from you! Please open an issue to let us know. #4023","title":"Mathesar's internal database may no longer be SQLite"},{"location":"releases/0.2.0/#mathesars-live-demo-is-no-longer-active","text":"We have removed the code and infrastructure which supported Mathesar\u2019s live demo. #3538 #3551 #3577 #3579 #3580 #3581","title":"Mathesar's live demo is no longer active"},{"location":"releases/0.2.0/#maintenance","text":"The following PRs represent work done to reduce technical debt, update dependencies, improve developer documentation, and maintain our workflows. #3360 #3535 #3541 #3544 #3546 #3552 #3558 #3559 #3564 #3567 #3568 #3569 #3587 #3604 #3643 #3678 #3695 #3763 #3918 #3920 #3938 #3939 #3943 #3947 #3949 #3950 #3959 #3961 #3964 #3972 #3975 #3981 #3985 #3988 #3989 #3990 #3991 #3994 #3999 #4025 #4032 #4039 #4045 #4060 #4064 #4076 #4125 #4133 #4145 #3980 #4158 #4159 #4165 #4152 #4170","title":"Maintenance"},{"location":"releases/0.2.0/#migrate","text":"Mathesar 0.2.0 is our first beta release. As such, direct upgrades from our alpha versions are not supported. However, you can migrate the databases created in older versions to work with 0.2.0 by following the steps below.","title":"Migrating to 0.2.0 from previous versions"},{"location":"releases/0.2.0/#migration-overview","text":"What you can migrate : the databases you\u2019ve created/connected and the data within them. What you cannot migrate : user accounts, passwords, explorations , and metadata . Here\u2019s what we\u2019ll do: Take note of the databases you\u2019ve created or connected in your current Mathesar setup. Install Mathesar 0.2.0 . Reconnect the databases you had before. When should I perform these steps? If any of your connected databases reside inside Mathesar\u2019s internal database server ( inside Docker containers), then you will need to perform these steps. If all of your connected databases reside in PostgreSQL servers outside the Mathesar\u2019s Docker containers, then you could install 0.2.0 and reconnect your databases.","title":"Migration Overview"},{"location":"releases/0.2.0/#for-installations-using-docker-compose","text":"These instructions are for if you have a Docker compose installation (including one from the guided script). These steps assume that you\u2019re using our provided docker-compose.yml file, and the installation directory is /etc/mathesar . If you have installed Mathesar in a different location or heavily modified the docker-compose.yml , you may need to change some details of the provided commands. With your old version of Mathesar still running, log into your internal database server: docker exec -it mathesar_db psql -U mathesar -d mathesar_django (This assumes your installation DB role is mathesar . Modify if necessary.) At the psql prompt, run: SELECT db_name , host , port FROM mathesar_database ; The above SQL query will provide the list of connected database names along with their hosts and port. Copy and paste them in a text file somewhere. We will need them after installing 0.2.0. Then create a temporary database: CREATE DATABASE mathesar_temp ; Log out with Ctrl + D , and log into the mathesar_temp database: docker exec -it mathesar_db psql -U mathesar -d mathesar_temp Then drop the old Mathesar Django database, and create a new one: DROP DATABASE mathesar_django ; CREATE DATABASE mathesar_django OWNER mathesar ; (Modify mathesar above to set the owner to whichever role you use to run Mathesar.) Log out with Ctrl + D , and log into your new mathesar_django database: docker exec -it mathesar_db psql -U mathesar -d mathesar_django Then drop the temporary database: DROP DATABASE mathesar_temp ; Log out with Ctrl + D . Stop Mathesar. docker compose -f /etc/mathesar/docker-compose.yml down Rename the old docker-compose file. mv /etc/mathesar/docker-compose.yml /etc/mathesar/docker-compose.old.yml Download the 0.2.0 docker-compose.yml file and place it within /etc/mathesar . cd /etc/mathesar wget https://github.com/mathesar-foundation/mathesar/raw/0.2.0/docker-compose.yml Modify it as per the installation instructions , using values from your old docker-compose.old.yml file. Run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d After Mathesar starts, connect to the databases using the \u201cConnect to an Existing Database\u201d option on the UI. Use the db_name, host, and port information from the previous database backup list to fill the form. For the mathesar_db host, the Role Name and Password can be found from the values of POSTGRES_USER and POSTGRES_PASSWORD environment variables. The values for these environment variables can be found in the docker-compose.yml file, or if you\u2019ve customized them, in your .env file. The default values for them are mathesar and mathesar . If you have any external hosts (other than mathesar_db ), you should probably have the postgres user and passwords with you.","title":"For installations using Docker Compose"},{"location":"releases/0.2.0/#for-installations-done-from-scratch","text":"For these instructions, you\u2019ll need to be familiar enough with your setup to log into your internal Mathesar Database. These steps assume that the installation directory is /etc/mathesar . If you have installed Mathesar in a different location, you may need to change some details of the provided commands. Log into your mathesar_django database, and run: SELECT db_name , host , port FROM mathesar_database ; The above SQL query will provide the list of connected database names along with their hosts and port. Copy and paste them in a text file somewhere. We will need them after installing 0.2.0. Then create a temporary database: CREATE DATABASE mathesar_temp ; Log out with Ctrl + D , and log into the mathesar_temp database. Then drop the old Mathesar Django database, and create a new one: DROP DATABASE mathesar_django ; CREATE DATABASE mathesar_django OWNER mathesar ; (Modify mathesar above to set the owner to whichever role you use to run Mathesar.) Log out with Ctrl + D , and log into your new mathesar_django database. Then drop the temporary database: DROP DATABASE mathesar_temp ; Log out with Ctrl + D . Stop Mathesar if it\u2019s running. Delete your previous Mathesar installation directory rm -rf /etc/mathesar Install Mathesar 0.2.0 using the installation steps in the same location: /etc/mathesar . You would not have to setup a PostgreSQL database since you already have one running. After Mathesar starts, connect to the databases using the \u201cConnect to an Existing Database\u201d option on the UI. Use the db_name from the previous database backup list to fill the Database Name in the form. The Host name would be same as the value of POSTGRES_HOST environment variable for the databases created via Mathesar. The Role Name and Password can be found from the values of POSTGRES_USER and POSTGRES_PASSWORD environment variables. The values for these environment variables can be found in your .env file. If you have any external hosts (other than the one in POSTGRES_HOST ), you should probably have the postgres user and passwords with you.","title":"For installations done from scratch"},{"location":"releases/0.2.1/","text":"Mathesar 0.2.1 \u00b6 Help shape the future of Mathesar We\u2019re looking to speak with users to better understand how Mathesar can help you or your team. It\u2019s only a 20 minute interview, and we\u2019re happy to offer a $25 gift card in return. If you\u2019re interested in helping, you can use this link to schedule a chat with Zack on the Mathesar team. Thank you! Summary \u00b6 Mathesar 0.2.1 addresses a number of bug fixes identified by members of our community during our beta release. This release also includes some quality-of-life improvements to Mathesar like nicknames for databases, persisted column widths, and the ability to connect databases without a password. We also have a new form to allow users to submit suggestions and feedback about Mathesar to our team. This page provides a comprehensive list of all changes since version 0.2.0 . Improvements \u00b6 Database nicknames \u00b6 Users can now assign nicknames to their configured databases, making it easier to identify and organize connections. Instead of relying on technical database names, users can set meaningful labels that will be used throughout Mathesar. This is especially useful when managing multiple databases with identical names, or when connecting to external services where database names are automated. In addition to nickname support, all database connection values can now be edited. #4262 #4244 #4261 In-app feedback \u00b6 Users can now provide direct feedback within the app using a built-in feedback form. This simple input allows users to share thoughts, report issues, or suggest improvements without leaving the interface. #4241 Column widths are persisted \u00b6 Column widths in table views are now automatically saved, ensuring a consistent layout across sessions. Users no longer need to manually adjust column sizes every time they revisit a table, improving usability and efficiency when working with columns of varied lengths. #4257 #4248 Drop schema contents when deleting \u00b6 Mathesar now automatically drops all objects within a schema before deleting the schema itself, without relying on CASCADE. This ensures a safer and more controlled deletion process, preventing unintended removal of external dependencies while still allowing users to delete schemas that contain objects. This strikes a unique balance between safety and convenience, making it easier to manage schemas while reducing the risk of accidental data loss. It also provides greater confidence when granting database access to users, as deletions remain contained and predictable. #4251 Docker Compose installs are updated to Postgres 17 \u00b6 For existing users See the upgrading Postgres section for instructions on safely upgrading your Postgres version. New installs of Mathesar using our recommended Docker Compose installation will now use Postgres 17. Prior to 1.2.1, Mathesar installs configured via our docker compose file used version 13. #4263 Support connections without a database password \u00b6 Mathesar now allows users to configure database connections without requiring a password. This provides greater flexibility for users relying on secure, passwordless authentication mechanisms while maintaining compatibility with a variety of database configurations. #4252 #4255 Additional features \u00b6 Backend changes to support CSV file imports with an id column #4269 Allow patching records in tables with non-integer primary keys #4246 Bug fixes \u00b6 Fix UnicodeEncodeError during connection attempt #4254 #4272 Remove unnecessary loading spinner from table widget during refresh #4222 Documentation \u00b6 Update documentation styling #4227 README improvements #4208 #4212 #4184 Documentation cleanup #4205 #4201 #4203 Small docs improvement to collaborators #4225 Updated Mathesar description to align with messaging. #4213 Add simple analytics to docs #4217 Maintenance \u00b6 The following PRs represent work done to reduce technical debt, update dependencies, improve developer documentation, and maintain our workflows. #4259 #4266 #4265 #4230 #4146 #4253 #4209 Upgrading to Postgres 17 \u00b6 Follow these steps to upgrade Postgres to the latest version. Note that this upgrade is only necessary for existing Mathesar users who would like to switch to the latest version of Postgres. Navigate to your installation directory. Shut down Mathesar with docker compose down . Create a backup of your installation with cp -r msar msar.backup . Keep the msar.backup folder in a safe location. Back up your existing Docker Compose configuration with cp docker-compose.yml docker-compose.yml.backup . Download the latest Docker Compose file with: wget https://github.com/mathesar-foundation/mathesar/raw/0.2.1/docker-compose.yml Edit the new docker-compose.yml file to restore any personal variables or custom configurations from your backup. Restart Mathesar with the latest images: docker compose up --pull always -d Once you\u2019ve confirmed everything is working correctly, you can delete the backup files. Troubleshooting & rolling back \u00b6 If you encounter issues or the upgrade fails: Restore the previous docker-compose.yml : mv docker-compose.yml.backup docker-compose.yml Restore your Mathesar installation: rm -rf msar && mv msar.backup msar Start Mathesar again: docker compose up -d For additional support, reach out to the Mathesar team via a GitHub issue or in the general channel of our Matrix chat . Upgrading to 0.2.1 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.2.1. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.2.1 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.2.1 Update Python dependencies pip install -r requirements.txt Activate our virtual environment source ./mathesar-venv/bin/activate Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.2.1/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"0.2.1"},{"location":"releases/0.2.1/#mathesar-021","text":"Help shape the future of Mathesar We\u2019re looking to speak with users to better understand how Mathesar can help you or your team. It\u2019s only a 20 minute interview, and we\u2019re happy to offer a $25 gift card in return. If you\u2019re interested in helping, you can use this link to schedule a chat with Zack on the Mathesar team. Thank you!","title":"Mathesar 0.2.1"},{"location":"releases/0.2.1/#summary","text":"Mathesar 0.2.1 addresses a number of bug fixes identified by members of our community during our beta release. This release also includes some quality-of-life improvements to Mathesar like nicknames for databases, persisted column widths, and the ability to connect databases without a password. We also have a new form to allow users to submit suggestions and feedback about Mathesar to our team. This page provides a comprehensive list of all changes since version 0.2.0 .","title":"Summary"},{"location":"releases/0.2.1/#improvements","text":"","title":"Improvements"},{"location":"releases/0.2.1/#database-nicknames","text":"Users can now assign nicknames to their configured databases, making it easier to identify and organize connections. Instead of relying on technical database names, users can set meaningful labels that will be used throughout Mathesar. This is especially useful when managing multiple databases with identical names, or when connecting to external services where database names are automated. In addition to nickname support, all database connection values can now be edited. #4262 #4244 #4261","title":"Database nicknames"},{"location":"releases/0.2.1/#in-app-feedback","text":"Users can now provide direct feedback within the app using a built-in feedback form. This simple input allows users to share thoughts, report issues, or suggest improvements without leaving the interface. #4241","title":"In-app feedback"},{"location":"releases/0.2.1/#column-widths-are-persisted","text":"Column widths in table views are now automatically saved, ensuring a consistent layout across sessions. Users no longer need to manually adjust column sizes every time they revisit a table, improving usability and efficiency when working with columns of varied lengths. #4257 #4248","title":"Column widths are persisted"},{"location":"releases/0.2.1/#drop-schema-contents-when-deleting","text":"Mathesar now automatically drops all objects within a schema before deleting the schema itself, without relying on CASCADE. This ensures a safer and more controlled deletion process, preventing unintended removal of external dependencies while still allowing users to delete schemas that contain objects. This strikes a unique balance between safety and convenience, making it easier to manage schemas while reducing the risk of accidental data loss. It also provides greater confidence when granting database access to users, as deletions remain contained and predictable. #4251","title":"Drop schema contents when deleting"},{"location":"releases/0.2.1/#docker-compose-installs-are-updated-to-postgres-17","text":"For existing users See the upgrading Postgres section for instructions on safely upgrading your Postgres version. New installs of Mathesar using our recommended Docker Compose installation will now use Postgres 17. Prior to 1.2.1, Mathesar installs configured via our docker compose file used version 13. #4263","title":"Docker Compose installs are updated to Postgres 17"},{"location":"releases/0.2.1/#support-connections-without-a-database-password","text":"Mathesar now allows users to configure database connections without requiring a password. This provides greater flexibility for users relying on secure, passwordless authentication mechanisms while maintaining compatibility with a variety of database configurations. #4252 #4255","title":"Support connections without a database password"},{"location":"releases/0.2.1/#additional-features","text":"Backend changes to support CSV file imports with an id column #4269 Allow patching records in tables with non-integer primary keys #4246","title":"Additional features"},{"location":"releases/0.2.1/#bug-fixes","text":"Fix UnicodeEncodeError during connection attempt #4254 #4272 Remove unnecessary loading spinner from table widget during refresh #4222","title":"Bug fixes"},{"location":"releases/0.2.1/#documentation","text":"Update documentation styling #4227 README improvements #4208 #4212 #4184 Documentation cleanup #4205 #4201 #4203 Small docs improvement to collaborators #4225 Updated Mathesar description to align with messaging. #4213 Add simple analytics to docs #4217","title":"Documentation"},{"location":"releases/0.2.1/#maintenance","text":"The following PRs represent work done to reduce technical debt, update dependencies, improve developer documentation, and maintain our workflows. #4259 #4266 #4265 #4230 #4146 #4253 #4209","title":"Maintenance"},{"location":"releases/0.2.1/#upgrading-postgres","text":"Follow these steps to upgrade Postgres to the latest version. Note that this upgrade is only necessary for existing Mathesar users who would like to switch to the latest version of Postgres. Navigate to your installation directory. Shut down Mathesar with docker compose down . Create a backup of your installation with cp -r msar msar.backup . Keep the msar.backup folder in a safe location. Back up your existing Docker Compose configuration with cp docker-compose.yml docker-compose.yml.backup . Download the latest Docker Compose file with: wget https://github.com/mathesar-foundation/mathesar/raw/0.2.1/docker-compose.yml Edit the new docker-compose.yml file to restore any personal variables or custom configurations from your backup. Restart Mathesar with the latest images: docker compose up --pull always -d Once you\u2019ve confirmed everything is working correctly, you can delete the backup files.","title":"Upgrading to Postgres 17"},{"location":"releases/0.2.1/#troubleshooting-rolling-back","text":"If you encounter issues or the upgrade fails: Restore the previous docker-compose.yml : mv docker-compose.yml.backup docker-compose.yml Restore your Mathesar installation: rm -rf msar && mv msar.backup msar Start Mathesar again: docker compose up -d For additional support, reach out to the Mathesar team via a GitHub issue or in the general channel of our Matrix chat .","title":"Troubleshooting &amp; rolling back"},{"location":"releases/0.2.1/#upgrading","text":"","title":"Upgrading to 0.2.1"},{"location":"releases/0.2.1/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"releases/0.2.1/#for-installations-done-from-scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.2.1. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.2.1 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.2.1 Update Python dependencies pip install -r requirements.txt Activate our virtual environment source ./mathesar-venv/bin/activate Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.2.1/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"releases/TEMPLATE/","text":"Mathesar VERSION \u00b6 Summary \u00b6 TODO This page provides a comprehensive list of all changes in the release. Upgrading to VERSION \u00b6 TODO","title":"Mathesar __VERSION__"},{"location":"releases/TEMPLATE/#mathesar-version","text":"","title":"Mathesar VERSION"},{"location":"releases/TEMPLATE/#summary","text":"TODO This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/TEMPLATE/#upgrading-to-version","text":"TODO","title":"Upgrading to VERSION"},{"location":"snippets/docker-compose-prerequisites/","text":"Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Docker compose prerequisites"},{"location":"snippets/docker-compose-prerequisites/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"snippets/docker-compose-prerequisites/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"snippets/metadata-access-control/","text":"Mathesar metadata and data explorations are currently readable and writable by all collaborators on a database, regardless of their PostgreSQL role\u2019s permissions or their user\u2019s admin status . If you need to restrict access to metadata or data explorations, we would be curious to hear about your use case and welcome you to open an issue to discuss it.","title":"Metadata access control"},{"location":"snippets/uninstall-schemas/","text":"Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL databases , you can remove the schemas created for Mathesar\u2019s use during installation. For each database accessible through the Mathesar UI, the safe and easy way to do so is to use Mathesar\u2019s new \u201cDisconnect Database\u201d functionality. When disconnecting a database, choose the \u201cRemove Mathesar\u2019s internal schemas\u201d option to safely remove any Mathesar schemas. If that doesn\u2019t work, or doesn\u2019t work for all databases, you can perform the following manual steps instead: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. Specifically, this will delete any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall schemas"},{"location":"user-guide/","text":"Mathesar User Guide \u00b6 How Mathesar works \u00b6 Mathesar is a web application that gives you a spreadsheet-like interface to one or more PostgreSQL databases . It lets technical and non-technical users collaborate directly with the same relational data, providing user-friendly access to your database\u2019s schemas , tables , relationships , and so on \u2014 all comfortably within the limits of the PostgreSQL privileges for the PostgreSQL role that you give to Mathesar. Your data appears in Mathesar exactly as it is structured in PostgreSQL, with some additional convenience features ease the process of working with related data while keeping it normalized . You can use Mathesar with PostgreSQL data sets you already have. Point it at your database, and you\u2019ll have a powerful GUI admin tool to help with data entry, analytics, and internal back-office processes. Or you can use Mathesar to build data sets and workflows from scratch, giving you a robust and highly scalable alternative to typical spreadsheet-based solutions. The Mathesar application has a small internal database where it stores the users you create, the database connection credentials you add, the data explorations you save, and a small amount of metadata which you may configure. But all your actual data lives in your PostgreSQL database \u2014 outside Mathesar. The extensive interoperability afforded by PostgreSQL means you\u2019ll always have control over your data should you later choose to use incorporate other tools into your workflow or abandon Mathesar altogether. About PostgreSQL \u00b6 PostgreSQL (aka \u201cPostgres\u201d) is an industry-leading relational database management system which has been actively maintained by a vibrant community of open source contributors since the mid 1990\u2019s. It has since emerged as the dominant and defacto relational database solution in the open source world and beyond. While the choice to support PostgreSQL in a product like Mathesar would be obvious, Mathesar has doubled down on our commitment to PostgreSQL by architecting the application to integrate very tightly with PostgreSQL. A large part of the Mathesar application logic actually runs within the PostgreSQL database to which Mathesar connects. This architecture enables Mathesar\u2019s high performance and snappy UI by reducing the need for multiple network round trips between the Mathesar application and the PostgreSQL server. So Mathesar will be fast even when your PostgreSQL server is around the world from your Mathesar application server. A short-term consequence of this development strategy is that, for the time being, Mathesar only works with PostgreSQL databases. However we are hopeful that in the future we\u2019ll have the opportunity to leverage PostgreSQL\u2019s powerful Foreign Data Wrapper functionality to connect to other kinds of databases such as MySQL, SQLite, Oracle, MongoDB, and more. In order to function, Mathesar needs to install some functions on your PostgreSQL database. We install these functions inside Mathesar-specific schemas to separate them from any user defined functions on the database.","title":"Introduction"},{"location":"user-guide/#mathesar-user-guide","text":"","title":"Mathesar User Guide"},{"location":"user-guide/#how-mathesar-works","text":"Mathesar is a web application that gives you a spreadsheet-like interface to one or more PostgreSQL databases . It lets technical and non-technical users collaborate directly with the same relational data, providing user-friendly access to your database\u2019s schemas , tables , relationships , and so on \u2014 all comfortably within the limits of the PostgreSQL privileges for the PostgreSQL role that you give to Mathesar. Your data appears in Mathesar exactly as it is structured in PostgreSQL, with some additional convenience features ease the process of working with related data while keeping it normalized . You can use Mathesar with PostgreSQL data sets you already have. Point it at your database, and you\u2019ll have a powerful GUI admin tool to help with data entry, analytics, and internal back-office processes. Or you can use Mathesar to build data sets and workflows from scratch, giving you a robust and highly scalable alternative to typical spreadsheet-based solutions. The Mathesar application has a small internal database where it stores the users you create, the database connection credentials you add, the data explorations you save, and a small amount of metadata which you may configure. But all your actual data lives in your PostgreSQL database \u2014 outside Mathesar. The extensive interoperability afforded by PostgreSQL means you\u2019ll always have control over your data should you later choose to use incorporate other tools into your workflow or abandon Mathesar altogether.","title":"How Mathesar works"},{"location":"user-guide/#postgres","text":"PostgreSQL (aka \u201cPostgres\u201d) is an industry-leading relational database management system which has been actively maintained by a vibrant community of open source contributors since the mid 1990\u2019s. It has since emerged as the dominant and defacto relational database solution in the open source world and beyond. While the choice to support PostgreSQL in a product like Mathesar would be obvious, Mathesar has doubled down on our commitment to PostgreSQL by architecting the application to integrate very tightly with PostgreSQL. A large part of the Mathesar application logic actually runs within the PostgreSQL database to which Mathesar connects. This architecture enables Mathesar\u2019s high performance and snappy UI by reducing the need for multiple network round trips between the Mathesar application and the PostgreSQL server. So Mathesar will be fast even when your PostgreSQL server is around the world from your Mathesar application server. A short-term consequence of this development strategy is that, for the time being, Mathesar only works with PostgreSQL databases. However we are hopeful that in the future we\u2019ll have the opportunity to leverage PostgreSQL\u2019s powerful Foreign Data Wrapper functionality to connect to other kinds of databases such as MySQL, SQLite, Oracle, MongoDB, and more. In order to function, Mathesar needs to install some functions on your PostgreSQL database. We install these functions inside Mathesar-specific schemas to separate them from any user defined functions on the database.","title":"About PostgreSQL"},{"location":"user-guide/access-control/","text":"Overview of Access Control in Mathesar \u00b6 Mathesar manages data access using PostgreSQL\u2019s powerful role-based permissions system. Users interact with the database through designated PostgreSQL roles, with their access determined by the privileges assigned to those roles. Here\u2019s how it works: Mathesar Users : Everyone using Mathesar gets their own personal user account and has control over their password and username. Admin users have some additional privileges, but only for high-level Mathesar-specific operations like connecting databases and managing other users. PostgreSQL roles : Within PostgreSQL, privileges on data can be granted to different roles at a granular level. Mathesar respects these privileges and also exposes functionality for you to see and modify them. Stored Roles : Mathesar stores the passwords for any roles that you would like to use to authenticate with PostgreSQL. Collaborators : For a user to access a given database, an admin must add the user as a collaborator on that database and assign the user to a specific PostgreSQL role. You can configure separate Mathesar users to share the same PostgreSQL role if you like. Or you can use dedicated PostgreSQL roles for different users. Mathesar metadata and data explorations are currently readable and writable by all collaborators on a database, regardless of their PostgreSQL role\u2019s permissions or their user\u2019s admin status . If you need to restrict access to metadata or data explorations, we would be curious to hear about your use case and welcome you to open an issue to discuss it.","title":"Overview"},{"location":"user-guide/access-control/#overview-of-access-control-in-mathesar","text":"Mathesar manages data access using PostgreSQL\u2019s powerful role-based permissions system. Users interact with the database through designated PostgreSQL roles, with their access determined by the privileges assigned to those roles. Here\u2019s how it works: Mathesar Users : Everyone using Mathesar gets their own personal user account and has control over their password and username. Admin users have some additional privileges, but only for high-level Mathesar-specific operations like connecting databases and managing other users. PostgreSQL roles : Within PostgreSQL, privileges on data can be granted to different roles at a granular level. Mathesar respects these privileges and also exposes functionality for you to see and modify them. Stored Roles : Mathesar stores the passwords for any roles that you would like to use to authenticate with PostgreSQL. Collaborators : For a user to access a given database, an admin must add the user as a collaborator on that database and assign the user to a specific PostgreSQL role. You can configure separate Mathesar users to share the same PostgreSQL role if you like. Or you can use dedicated PostgreSQL roles for different users. Mathesar metadata and data explorations are currently readable and writable by all collaborators on a database, regardless of their PostgreSQL role\u2019s permissions or their user\u2019s admin status . If you need to restrict access to metadata or data explorations, we would be curious to hear about your use case and welcome you to open an issue to discuss it.","title":"Overview of Access Control in Mathesar"},{"location":"user-guide/collaborators/","text":"Collaborators \u00b6 For every database you connect in Mathesar, you can manage the access that your Mathesar users have to that database by adding them as collaborators. Each collaborator is associated with a PostgreSQL role that determines their access to data. Only Mathesar admin users can manage collaborators. When you add a new database connection to Mathesar, your Mathesar user will automatically be added as a collaborator using the PostgreSQL role you specify at connection time. Note that with collaborators, a user\u2019s role is set per-database . This means that one Mathesar user can be configured to use different PostgreSQL roles for different databases on the same server. Adding a collaborator \u00b6 Prerequisites Before you can add a new collaborator: Your database must be connected already The user must already exist in Mathesar The role must already exist in PostgreSQL (you can use Mathesar ) The role must be stored in Mathesar Navigate to the page for your connected database. Click on the Database Settings tab. Click on Collaborators in the left-hand menu. Click Add Collaborator . Removing a collaborator \u00b6 Removing a collaborator revokes that user\u2019s access to the database but : If the user is a Mathesar admin , they\u2019ll be able to gain access again by adding their user back as a collaborator. The user will still remain in Mathesar, potentially with access to other Databases. The role (and its corresponding password) will still remain configured in Mathesar. The role will still remain on the PostgreSQL server. Configuration patterns \u00b6 You can configure separate Mathesar users to share the same PostgreSQL role if you like. This is a good option if you want those users to have the same permissions on the data. Or you can use separate PostgreSQL roles for different users. This is necessary any time you want different users to have different permissions on the data. You cannot configure one Mathesar user with two PostgreSQL role simultaneously \u2014 though you can save multiple PostgreSQL roles in Mathesar and manually switch between them if necessary. You won\u2019t even need to enter the role\u2019s password each time you switch, since it will be saved in Mathesar.","title":"Collaborators"},{"location":"user-guide/collaborators/#collaborators","text":"For every database you connect in Mathesar, you can manage the access that your Mathesar users have to that database by adding them as collaborators. Each collaborator is associated with a PostgreSQL role that determines their access to data. Only Mathesar admin users can manage collaborators. When you add a new database connection to Mathesar, your Mathesar user will automatically be added as a collaborator using the PostgreSQL role you specify at connection time. Note that with collaborators, a user\u2019s role is set per-database . This means that one Mathesar user can be configured to use different PostgreSQL roles for different databases on the same server.","title":"Collaborators"},{"location":"user-guide/collaborators/#adding-a-collaborator","text":"Prerequisites Before you can add a new collaborator: Your database must be connected already The user must already exist in Mathesar The role must already exist in PostgreSQL (you can use Mathesar ) The role must be stored in Mathesar Navigate to the page for your connected database. Click on the Database Settings tab. Click on Collaborators in the left-hand menu. Click Add Collaborator .","title":"Adding a collaborator"},{"location":"user-guide/collaborators/#removing-a-collaborator","text":"Removing a collaborator revokes that user\u2019s access to the database but : If the user is a Mathesar admin , they\u2019ll be able to gain access again by adding their user back as a collaborator. The user will still remain in Mathesar, potentially with access to other Databases. The role (and its corresponding password) will still remain configured in Mathesar. The role will still remain on the PostgreSQL server.","title":"Removing a collaborator"},{"location":"user-guide/collaborators/#configuration-patterns","text":"You can configure separate Mathesar users to share the same PostgreSQL role if you like. This is a good option if you want those users to have the same permissions on the data. Or you can use separate PostgreSQL roles for different users. This is necessary any time you want different users to have different permissions on the data. You cannot configure one Mathesar user with two PostgreSQL role simultaneously \u2014 though you can save multiple PostgreSQL roles in Mathesar and manually switch between them if necessary. You won\u2019t even need to enter the role\u2019s password each time you switch, since it will be saved in Mathesar.","title":"Configuration patterns"},{"location":"user-guide/data-explorer/","text":"Mathesar\u2019s Data Explorer \u00b6 The Data Explorer lets you create reports from your data. You can: View the data across multiple tables Filter Sort Summarize data to see aggregate values After you\u2019ve constructed an exploration, you can save it to easily run it later as well. Exploration and access controls \u00b6 The Data Explorer will not allow you to modify any data. It is a read-only reporting tool. Your ability to view data in the Data Explorer is determined by the privileges of the PostgreSQL role you\u2019re using. All collaborators can see (and modify) the same set of explorations. (This is the same way that access control works for metadata ). Keep in mind that if a collaborator is using a different role, they may see different data through the Data Explorer due to their role\u2019s access controls.","title":"Data Explorer"},{"location":"user-guide/data-explorer/#mathesars-data-explorer","text":"The Data Explorer lets you create reports from your data. You can: View the data across multiple tables Filter Sort Summarize data to see aggregate values After you\u2019ve constructed an exploration, you can save it to easily run it later as well.","title":"Mathesar's Data Explorer"},{"location":"user-guide/data-explorer/#exploration-and-access-controls","text":"The Data Explorer will not allow you to modify any data. It is a read-only reporting tool. Your ability to view data in the Data Explorer is determined by the privileges of the PostgreSQL role you\u2019re using. All collaborators can see (and modify) the same set of explorations. (This is the same way that access control works for metadata ). Keep in mind that if a collaborator is using a different role, they may see different data through the Data Explorer due to their role\u2019s access controls.","title":"Exploration and access controls"},{"location":"user-guide/data-types/","text":"Data Types \u00b6 PostgreSQL\u2019s Data Types \u00b6 PostgreSQL requires that every table column has a predefined data type. These types serve to keep your data clean by ensuring that (for example) arbitrary text doesn\u2019t somehow end up in a column designated for numbers. This type system is quite powerful, but it can be complex. See the PostgreSQL docs . There are a lot of different types to choose from, and you can even define your own custom types. Mathesar\u2019s Data Types \u00b6 Mathesar seeks to tame some of PostgreSQL\u2019s type system complexity by grouping similar PostgreSQL data types into user-friendly categories. We call these categories \u201c Mathesar data types\u201d \u2014 or simply \u201cdata types\u201d within Mathesar itself. Every PostgreSQL data type maps to exactly one Mathesar data type; and one Mathesar data type can potentially map to multiple PostgreSQL data types. For example, Mathesar has one Number data type which serves to simplify the seven different PostgreSQL data types for numbers. When creating a new column within Mathesar, you\u2019ll need to specify a Mathesar data type. Then Mathesar will create the column in PostgreSQL using the default PostgreSQL data type for your selected Mathesar data type. You can also modify the PostgreSQL data type later if needed and customize its type options in some cases. The relatively concise set of Mathesar data types \u2014 along with their associated default PostgreSQL data types \u2014 provide a curated assortment of recommended types well-suited for most use cases. And your ability to customize the PostgreSQL data type for a Mathesar data type gives you the flexibility to handle more specialized cases as needed. Each Mathesar data type is described in more detail below. Boolean \u00b6 PostgreSQL types boolean Formatting options (stored as metadata ) Display a dropdown instead of a checkbox Customize the text show within the two dropdown options Date \u00b6 PostgreSQL types date Formatting options (stored as metadata ) Customize the format of the displayed date Date & Time \u00b6 PostgreSQL types timestamp with time zone (default) timestamp without time zone Formatting options (stored as metadata ) Customize the format of the displayed date and time Duration \u00b6 Used to store a length of time, for example \u201c1 hour\u201d or \u201c3 days\u201d PostgreSQL types interval Formatting options (stored as metadata ) Customize the format of the displayed duration Email \u00b6 Used to store valid email addresses PostgreSQL types mathesar_types.email This is a custom PostgreSQL type implemented by Mathesar. It is a domain over text with additional logic to validate that the input is a valid email address. Money \u00b6 PostgreSQL types mathesar_types.money (default) This is custom PostgreSQL type implemented by Mathesar as a domain over numeric . mathesar_types.money vs numeric Compared with numeric , the mathesar_types.money type only exists for: (A) compatibility with our custom casting functions that can import CSV data with currency symbols; and (B) indicate to the upper layers of the Mathesar application that this column is eligible for an additional \u201cCurrency Symbol\u201d metadata field. You are welcome to store money values in Number columns, but you won\u2019t be able to display the values with a currency symbol. money mathesar_types.money vs money Although PostgreSQL does natively have a money type, we\u2019ve chosen to recommend our custom PostgreSQL type for money in order to give your more control over the fractional precision for money columns. The fractional precision of the native money type is controlled by the LC_MONETARY which is set at the database level and thus may not be granular enough or accessible enough for all Mathesar users to configure. Formatting options (stored as metadata ) Customize the number of decimal places displayed (e.g. 1.2 vs 1.20) Customize the digit grouping (e.g. 1,000 vs 1000) Customize the locale for number formatting (e.g. 1.000,00 vs 1,000.00) Customize the currency symbol character Customize the position of the currency symbol Number \u00b6 PostgreSQL types numeric (default) smallint integer bigint decimal real double precision Formatting options (stored as metadata ) Customize the number of decimal places displayed (e.g. 1.2 vs 1.20) Customize the digit grouping (e.g. 1,000 vs 1000) Customize the locale for number formatting (e.g. 1.000,00 vs 1,000.00) Text \u00b6 PostgreSQL types text (default) char varchar Time \u00b6 PostgreSQL types time with time zone (default) time without time zone Formatting options (stored as metadata ) Customize the format of the displayed time URL \u00b6 PostgreSQL types mathesar_types.uri This is a custom PostgreSQL type implemented by Mathesar. It is a domain over text with additional logic to validate that the input is a valid uri address. Other PostgreSQL types \u00b6 Mathesar has rudimentary support for other PostgreSQL types such as: array , bytea , point , line , lseg , box , path , path , polygon , circle , cidr , inet , macaddr , macaddr8 , bit , bit varying , tsquery , tsvector , json , jsonb , xml , pg_lsn , pg_snapshot , txid_snapshot , int4range , int8range , numrange , tsrange , tstzrange , daterange . In most cases Mathesar is able to display data from such types, but the following limitations apply: Columns of these types cannot be created from within Mathesar Data entry is not yet supported Formatting cannot be applied If you would like to request additional support for a type, please open an issue requesting the feature. And if you find that an unsupported type is causing other features to break, please note it as a bug.","title":"Data types"},{"location":"user-guide/data-types/#data-types","text":"","title":"Data Types"},{"location":"user-guide/data-types/#postgresqls-data-types","text":"PostgreSQL requires that every table column has a predefined data type. These types serve to keep your data clean by ensuring that (for example) arbitrary text doesn\u2019t somehow end up in a column designated for numbers. This type system is quite powerful, but it can be complex. See the PostgreSQL docs . There are a lot of different types to choose from, and you can even define your own custom types.","title":"PostgreSQL's Data Types"},{"location":"user-guide/data-types/#ui-types","text":"Mathesar seeks to tame some of PostgreSQL\u2019s type system complexity by grouping similar PostgreSQL data types into user-friendly categories. We call these categories \u201c Mathesar data types\u201d \u2014 or simply \u201cdata types\u201d within Mathesar itself. Every PostgreSQL data type maps to exactly one Mathesar data type; and one Mathesar data type can potentially map to multiple PostgreSQL data types. For example, Mathesar has one Number data type which serves to simplify the seven different PostgreSQL data types for numbers. When creating a new column within Mathesar, you\u2019ll need to specify a Mathesar data type. Then Mathesar will create the column in PostgreSQL using the default PostgreSQL data type for your selected Mathesar data type. You can also modify the PostgreSQL data type later if needed and customize its type options in some cases. The relatively concise set of Mathesar data types \u2014 along with their associated default PostgreSQL data types \u2014 provide a curated assortment of recommended types well-suited for most use cases. And your ability to customize the PostgreSQL data type for a Mathesar data type gives you the flexibility to handle more specialized cases as needed. Each Mathesar data type is described in more detail below.","title":"Mathesar's Data Types"},{"location":"user-guide/data-types/#boolean","text":"PostgreSQL types boolean Formatting options (stored as metadata ) Display a dropdown instead of a checkbox Customize the text show within the two dropdown options","title":"Boolean"},{"location":"user-guide/data-types/#date","text":"PostgreSQL types date Formatting options (stored as metadata ) Customize the format of the displayed date","title":"Date"},{"location":"user-guide/data-types/#date-time","text":"PostgreSQL types timestamp with time zone (default) timestamp without time zone Formatting options (stored as metadata ) Customize the format of the displayed date and time","title":"Date &amp; Time"},{"location":"user-guide/data-types/#duration","text":"Used to store a length of time, for example \u201c1 hour\u201d or \u201c3 days\u201d PostgreSQL types interval Formatting options (stored as metadata ) Customize the format of the displayed duration","title":"Duration"},{"location":"user-guide/data-types/#email","text":"Used to store valid email addresses PostgreSQL types mathesar_types.email This is a custom PostgreSQL type implemented by Mathesar. It is a domain over text with additional logic to validate that the input is a valid email address.","title":"Email"},{"location":"user-guide/data-types/#money","text":"PostgreSQL types mathesar_types.money (default) This is custom PostgreSQL type implemented by Mathesar as a domain over numeric . mathesar_types.money vs numeric Compared with numeric , the mathesar_types.money type only exists for: (A) compatibility with our custom casting functions that can import CSV data with currency symbols; and (B) indicate to the upper layers of the Mathesar application that this column is eligible for an additional \u201cCurrency Symbol\u201d metadata field. You are welcome to store money values in Number columns, but you won\u2019t be able to display the values with a currency symbol. money mathesar_types.money vs money Although PostgreSQL does natively have a money type, we\u2019ve chosen to recommend our custom PostgreSQL type for money in order to give your more control over the fractional precision for money columns. The fractional precision of the native money type is controlled by the LC_MONETARY which is set at the database level and thus may not be granular enough or accessible enough for all Mathesar users to configure. Formatting options (stored as metadata ) Customize the number of decimal places displayed (e.g. 1.2 vs 1.20) Customize the digit grouping (e.g. 1,000 vs 1000) Customize the locale for number formatting (e.g. 1.000,00 vs 1,000.00) Customize the currency symbol character Customize the position of the currency symbol","title":"Money"},{"location":"user-guide/data-types/#number","text":"PostgreSQL types numeric (default) smallint integer bigint decimal real double precision Formatting options (stored as metadata ) Customize the number of decimal places displayed (e.g. 1.2 vs 1.20) Customize the digit grouping (e.g. 1,000 vs 1000) Customize the locale for number formatting (e.g. 1.000,00 vs 1,000.00)","title":"Number"},{"location":"user-guide/data-types/#text","text":"PostgreSQL types text (default) char varchar","title":"Text"},{"location":"user-guide/data-types/#time","text":"PostgreSQL types time with time zone (default) time without time zone Formatting options (stored as metadata ) Customize the format of the displayed time","title":"Time"},{"location":"user-guide/data-types/#url","text":"PostgreSQL types mathesar_types.uri This is a custom PostgreSQL type implemented by Mathesar. It is a domain over text with additional logic to validate that the input is a valid uri address.","title":"URL"},{"location":"user-guide/data-types/#other-postgresql-types","text":"Mathesar has rudimentary support for other PostgreSQL types such as: array , bytea , point , line , lseg , box , path , path , polygon , circle , cidr , inet , macaddr , macaddr8 , bit , bit varying , tsquery , tsvector , json , jsonb , xml , pg_lsn , pg_snapshot , txid_snapshot , int4range , int8range , numrange , tsrange , tstzrange , daterange . In most cases Mathesar is able to display data from such types, but the following limitations apply: Columns of these types cannot be created from within Mathesar Data entry is not yet supported Formatting cannot be applied If you would like to request additional support for a type, please open an issue requesting the feature. And if you find that an unsupported type is causing other features to break, please note it as a bug.","title":"Other PostgreSQL types"},{"location":"user-guide/databases/","text":"Databases \u00b6 Each installation of Mathesar can connect to multiple PostgreSQL databases. When you begin using Mathesar, your first step will likely be connecting to or creating a database. But what exactly is a database, and how does it differ from tools you might be more familiar with, like spreadsheets? What is a database \u00b6 If you\u2019re using Mathesar as a spreadsheet alternative, you might be curious what makes a database different from a spreadsheet and why it matters. A database is a self-contained set of data stored within a rigid structure that maintains data integrity and allows for efficient data operations. There are many different kinds of databases, and Mathesar works specifically with PostgreSQL databases, so that\u2019s what we\u2019ll focus on here. Within a database, you can have multiple tables \u2014 much like you might have multiple sheets within a spreadsheet. And within each table in your database, you\u2019ll have rows and columns, similar to a spreadsheet. But while a spreadsheet gives you a blank canvas to freely enter any data into any cell you choose, a database is more structured. Rows and columns must be explicitly added before you can enter data, and each column must have a name and a data type . In a database, rows are sometimes called \u201crecords\u201d. One superpower of PostgreSQL is that cells from one table can reference records from another table. These references are called foreign key constraints , and Mathesar leverages them so you can model your data with relationships . If you\u2019ve ever used VLOOKUP in a spreadsheet, you\u2019ll love using relationships in Mathesar! Connecting a database \u00b6 Click the Connect Database button from the home page of your Mathesar application and follow the prompts. Once you\u2019ve connected a database, you can navigate to Mathesar\u2019s page for it where you can browse the database\u2019s schemas and configure various settings for it. Mathesar will remember the connection even after the application is shut down. Your Mathesar user will be added as a collaborator on the database (along with the PostgreSQL role you entered). The password you entered for that role will be stored in Mathesar\u2019s internal database , encrypted using Mathesar\u2019s SECRET_KEY . Creating a new database \u00b6 If you\u2019re starting your database from scratch with Mathesar you can either: Use Mathesar to create a new database within Mathesar\u2019s internal server and connect to it. This is a good option to get up and running quickly, but it might require more work later should you decide to set up periodic backups or connect other tools to the same database. Also, this option won\u2019t be possible if Mathesar was installed without an internal server. OR Use another tool to create your database on an external server and then connect Mathesar to it. You can administer that external server yourself, or choose from a variety of hosted PostgreSQL solutions such as Amazon RDS , Google Cloud SQL , Supabase , and others. Database Permissions \u00b6 PostgreSQL databases use a careful system of privileges (colloquially referred to as \u201cpermissions\u201d) to control what different users can do. Understanding these permissions is crucial for keeping your data secure while ensuring everyone has the access they need to do their work. Owner: In PostgreSQL, every database has a role set as its owner . Only the owner can: Drop the database Manage database-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one database may be granted to specific roles in PostgreSQL: CONNECT - Allows the role to connect to the database. CREATE - Allows the role to create new schemas within the database. TEMPORARY - Allows the role to create temporary tables within the database. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a database, navigate to the database page in Mathesar and click on the Database Permissions button at the top right. See also To manage the access that Mathesar users have to a database, go to Database Settings > Collaborators . See Access Control for more information. Disconnecting a database \u00b6 From the Mathesar home page, click on your database to its database page. At the top right, click on the dropdown menu, and select \u201cDisconnect Database\u201d. Disconnecting a database will not delete the database. It will still be accessible outside Mathesar, and you can reconnect it in the future. However, disconnecting your database will delete the Mathesar-specific metadata associated with objects in the database. This includes saved explorations, customized column display options, and customized record summary templates. Dropping a database \u00b6 If you want to entirely remove all the data in your database by dropping the database from the PostgreSQL server, you\u2019ll need to do so outside of Mathesar via PostgreSQL itself. We plan to add support for dropping databases in the future. If this is a feature you would like, please comment on this issue to let us know. Mathesar\u2019s internal database \u00b6 Mathesar keeps as much of your data as possible inside your connected PostgreSQL database, structured consistently with the way it appears in the Mathesar interface. Separate from your connected PostgreSQL database, Mathesar also maintains an internal database to store configuration relevant to the Mathesar application itself. While Mathesar does not allow you to work directly with this internal database, you might be interested to understand the distinction between it and your connected database. Below is a comparison of the data stored in each: Data in your connected database Data in Mathesar's internal database The schemas and tables you see from within Mathesar The rows, columns, and cells within those tables Relationships between those tables Roles and their privileges Users Database connection credentials, including saved role passwords Collaborators Metadata Saved Explorations","title":"Databases"},{"location":"user-guide/databases/#databases","text":"Each installation of Mathesar can connect to multiple PostgreSQL databases. When you begin using Mathesar, your first step will likely be connecting to or creating a database. But what exactly is a database, and how does it differ from tools you might be more familiar with, like spreadsheets?","title":"Databases"},{"location":"user-guide/databases/#what-is-a-database","text":"If you\u2019re using Mathesar as a spreadsheet alternative, you might be curious what makes a database different from a spreadsheet and why it matters. A database is a self-contained set of data stored within a rigid structure that maintains data integrity and allows for efficient data operations. There are many different kinds of databases, and Mathesar works specifically with PostgreSQL databases, so that\u2019s what we\u2019ll focus on here. Within a database, you can have multiple tables \u2014 much like you might have multiple sheets within a spreadsheet. And within each table in your database, you\u2019ll have rows and columns, similar to a spreadsheet. But while a spreadsheet gives you a blank canvas to freely enter any data into any cell you choose, a database is more structured. Rows and columns must be explicitly added before you can enter data, and each column must have a name and a data type . In a database, rows are sometimes called \u201crecords\u201d. One superpower of PostgreSQL is that cells from one table can reference records from another table. These references are called foreign key constraints , and Mathesar leverages them so you can model your data with relationships . If you\u2019ve ever used VLOOKUP in a spreadsheet, you\u2019ll love using relationships in Mathesar!","title":"What is a database"},{"location":"user-guide/databases/#connection","text":"Click the Connect Database button from the home page of your Mathesar application and follow the prompts. Once you\u2019ve connected a database, you can navigate to Mathesar\u2019s page for it where you can browse the database\u2019s schemas and configure various settings for it. Mathesar will remember the connection even after the application is shut down. Your Mathesar user will be added as a collaborator on the database (along with the PostgreSQL role you entered). The password you entered for that role will be stored in Mathesar\u2019s internal database , encrypted using Mathesar\u2019s SECRET_KEY .","title":"Connecting a database"},{"location":"user-guide/databases/#creating-a-new-database","text":"If you\u2019re starting your database from scratch with Mathesar you can either: Use Mathesar to create a new database within Mathesar\u2019s internal server and connect to it. This is a good option to get up and running quickly, but it might require more work later should you decide to set up periodic backups or connect other tools to the same database. Also, this option won\u2019t be possible if Mathesar was installed without an internal server. OR Use another tool to create your database on an external server and then connect Mathesar to it. You can administer that external server yourself, or choose from a variety of hosted PostgreSQL solutions such as Amazon RDS , Google Cloud SQL , Supabase , and others.","title":"Creating a new database"},{"location":"user-guide/databases/#permissions","text":"PostgreSQL databases use a careful system of privileges (colloquially referred to as \u201cpermissions\u201d) to control what different users can do. Understanding these permissions is crucial for keeping your data secure while ensuring everyone has the access they need to do their work. Owner: In PostgreSQL, every database has a role set as its owner . Only the owner can: Drop the database Manage database-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one database may be granted to specific roles in PostgreSQL: CONNECT - Allows the role to connect to the database. CREATE - Allows the role to create new schemas within the database. TEMPORARY - Allows the role to create temporary tables within the database. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a database, navigate to the database page in Mathesar and click on the Database Permissions button at the top right. See also To manage the access that Mathesar users have to a database, go to Database Settings > Collaborators . See Access Control for more information.","title":"Database Permissions"},{"location":"user-guide/databases/#disconnecting-a-database","text":"From the Mathesar home page, click on your database to its database page. At the top right, click on the dropdown menu, and select \u201cDisconnect Database\u201d. Disconnecting a database will not delete the database. It will still be accessible outside Mathesar, and you can reconnect it in the future. However, disconnecting your database will delete the Mathesar-specific metadata associated with objects in the database. This includes saved explorations, customized column display options, and customized record summary templates.","title":"Disconnecting a database"},{"location":"user-guide/databases/#dropping-a-database","text":"If you want to entirely remove all the data in your database by dropping the database from the PostgreSQL server, you\u2019ll need to do so outside of Mathesar via PostgreSQL itself. We plan to add support for dropping databases in the future. If this is a feature you would like, please comment on this issue to let us know.","title":"Dropping a database"},{"location":"user-guide/databases/#internal","text":"Mathesar keeps as much of your data as possible inside your connected PostgreSQL database, structured consistently with the way it appears in the Mathesar interface. Separate from your connected PostgreSQL database, Mathesar also maintains an internal database to store configuration relevant to the Mathesar application itself. While Mathesar does not allow you to work directly with this internal database, you might be interested to understand the distinction between it and your connected database. Below is a comparison of the data stored in each: Data in your connected database Data in Mathesar's internal database The schemas and tables you see from within Mathesar The rows, columns, and cells within those tables Relationships between those tables Roles and their privileges Users Database connection credentials, including saved role passwords Collaborators Metadata Saved Explorations","title":"Mathesar's internal database"},{"location":"user-guide/exporting-data/","text":"Exporting Data From Mathesar \u00b6 You can use Mathesar to export all the data from one table to a CSV file. Navigate to the table page. Click on the \u201cExport\u201d button at the top right. Note: Any filters and sorting that you\u2019ve applied to the table will be reflected in the exported data. All relevant records will be included in the export, even if they are not shown on the current page within Mathesar.","title":"Exporting data"},{"location":"user-guide/exporting-data/#exporting-data-from-mathesar","text":"You can use Mathesar to export all the data from one table to a CSV file. Navigate to the table page. Click on the \u201cExport\u201d button at the top right. Note: Any filters and sorting that you\u2019ve applied to the table will be reflected in the exported data. All relevant records will be included in the export, even if they are not shown on the current page within Mathesar.","title":"Exporting Data From Mathesar"},{"location":"user-guide/importing-data/","text":"Importing data into Mathesar \u00b6 Mathesar allows importing data in CSV format. It also attempts to automatically infer the data type of the columns. Importing CSV data \u00b6 Delimiters \u00b6 Fields in the CSV data may be delimited by any of the following characters: Name Character Notes Comma , A traditional CSV file (a \u201c C omma S eparated V alue\u201d document) Tab (not printable) This is sometimes referred to as a TSV file (a \u201c T ab S eparated V alue\u201d document) Semicolon ; Colon : Pipe | Header rows \u00b6 By default, Mathesar will use the first row of CSV data to name the columns. If you un-check \u201cUse first row as header\u201d , then Mathesar will generate default names for the columns which you can edit later.","title":"Importing data"},{"location":"user-guide/importing-data/#importing-data-into-mathesar","text":"Mathesar allows importing data in CSV format. It also attempts to automatically infer the data type of the columns.","title":"Importing data into Mathesar"},{"location":"user-guide/importing-data/#csv","text":"","title":"Importing CSV data"},{"location":"user-guide/importing-data/#delimiters","text":"Fields in the CSV data may be delimited by any of the following characters: Name Character Notes Comma , A traditional CSV file (a \u201c C omma S eparated V alue\u201d document) Tab (not printable) This is sometimes referred to as a TSV file (a \u201c T ab S eparated V alue\u201d document) Semicolon ; Colon : Pipe |","title":"Delimiters"},{"location":"user-guide/importing-data/#header-rows","text":"By default, Mathesar will use the first row of CSV data to name the columns. If you un-check \u201cUse first row as header\u201d , then Mathesar will generate default names for the columns which you can edit later.","title":"Header rows"},{"location":"user-guide/metadata/","text":"Mathesar Metadata \u00b6 Mathesar keeps as much of your data as possible inside your connected PostgreSQL database, structured consistently with the way it appears in the Mathesar interface. However, some of the customization that Mathesar offers doesn\u2019t fit neatly into the PostgreSQL model, so Mathesar stores a thin layer of metadata in its internal database to support these features. Table metadata \u00b6 For each table, the following optional configurations are stored as metadata: Column order Interestingly, PostgreSQL does not allow existing columns to be rearranged. Mathesar allows you to customize the column order by dragging and dropping columns in the table view. This order is stored as metadata. When no metadata is present, the columns will be displayed in the order they are stored in PostgreSQL. Record summary template The template used to generate record summaries . This allows links to records in the table to be summarized into short human-readable pieces of text. Without any metadata, the record summary will be generated using the first text-like column of the table if possible. Column metadata \u00b6 Many of Mathesar\u2019s data types have type-specific formatting options which are stored as metadata. These options allow you to customize the way the data is displayed in the Mathesar interface. Metadata access control \u00b6 Mathesar metadata and data explorations are currently readable and writable by all collaborators on a database, regardless of their PostgreSQL role\u2019s permissions or their user\u2019s admin status . If you need to restrict access to metadata or data explorations, we would be curious to hear about your use case and welcome you to open an issue to discuss it.","title":"Metadata"},{"location":"user-guide/metadata/#mathesar-metadata","text":"Mathesar keeps as much of your data as possible inside your connected PostgreSQL database, structured consistently with the way it appears in the Mathesar interface. However, some of the customization that Mathesar offers doesn\u2019t fit neatly into the PostgreSQL model, so Mathesar stores a thin layer of metadata in its internal database to support these features.","title":"Mathesar Metadata"},{"location":"user-guide/metadata/#table-metadata","text":"For each table, the following optional configurations are stored as metadata: Column order Interestingly, PostgreSQL does not allow existing columns to be rearranged. Mathesar allows you to customize the column order by dragging and dropping columns in the table view. This order is stored as metadata. When no metadata is present, the columns will be displayed in the order they are stored in PostgreSQL. Record summary template The template used to generate record summaries . This allows links to records in the table to be summarized into short human-readable pieces of text. Without any metadata, the record summary will be generated using the first text-like column of the table if possible.","title":"Table metadata"},{"location":"user-guide/metadata/#column-metadata","text":"Many of Mathesar\u2019s data types have type-specific formatting options which are stored as metadata. These options allow you to customize the way the data is displayed in the Mathesar interface.","title":"Column metadata"},{"location":"user-guide/metadata/#metadata-access-control","text":"Mathesar metadata and data explorations are currently readable and writable by all collaborators on a database, regardless of their PostgreSQL role\u2019s permissions or their user\u2019s admin status . If you need to restrict access to metadata or data explorations, we would be curious to hear about your use case and welcome you to open an issue to discuss it.","title":"Metadata access control"},{"location":"user-guide/relationships/","text":"Relationships \u00b6 Relationships allow a single cell in one table to reference a row in another table. When one table references another in this manner, the two tables are said to be \u201crelated\u201d. This is a core feature of PostgreSQL, and it allows us to model complex data structures using multiple tables. Example \u00b6 Let\u2019s say we are maintaining an address book of people and their contact info\u2026 Without Relationships Associating multiple email addresses with one person is tricky! We might try the following approaches: Option 1: Email addresses combined into a single column: name emails Alice Roberts alice@example.com, aroberts@example.net Bob Davis bob@example.com Option 2: Email addresses spread across multiple columns name email_1 email_2 Alice Roberts alice@example.com aroberts@example.net Bob Davis bob@example.com Option 3: People spread across multiple rows name email Alice Roberts alice@example.com Alice Roberts aroberts@example.net Bob Davis bob@example.com None of these options are ideal. They make it difficult to query the data, and they make it easy to introduce errors. With Relationships We can create two tables: The people table: id name 1 Alice Roberts 2 Bob Davis The emails table: id email person 1 alice@example.com 1 2 aroberts@example.net 1 3 bob@example.com 2 And we configure the person column to reference the id column in the people table, ensuring that all the references are valid. The database handles this validation for us, and even prevents us from deleting a person without deleting their associated email addresses too. Normalization \u00b6 This practice of modeling data through multiple related tables is called data normalization , and it\u2019s why a database will typically have its data spread across many tables, each with their own unique column structure, and very few tables providing much use or value in isolation. In the example above, the approaches without relationships are not normalized, while the approach with relationships is normalized. Normalized data structures are more efficient to query and update, and they help to ensure data integrity by reducing redundancy and minimizing the risk of inconsistencies. But they can also be more cumbersome to work with manually due to the indirection inherent in having data spread across multiple tables. Mathesar helps you manage this complexity by providing a user-friendly interface to work with normalized data. Foreign key constraints in PostgreSQL \u00b6 In PostgreSQL, references are called \u201c foreign key constraints \u201d, or simply \u201cforeign keys\u201d. These constraints are set on the table to ensure that the data in the referencing column always points to a valid row in the referenced table. Reference columns in Mathesar \u00b6 Mathesar identifies reference columns in your database by looking for foreign key constraints set in PostgreSQL. And when you create a reference column in Mathesar, it will automatically create the necessary foreign key constraint in PostgreSQL. As noted below, reference columns get some extra features too! Record summaries \u00b6 Without Mathesar, reference cells are typically rather opaque. Often they contain only an id number, which is not very helpful when you\u2019re trying to understand the data. Mathesar helps solve this problem by providing a feature called \u201crecord summaries\u201d which allows you to see a short text summary of the referenced record directly in the referencing cell. By default, the record summary will be the value of the first text-like column in the referenced table. You can customize the record summary to show any columns and text you choose. To customize a record summary, you can either: Start from the referenced table, and: Go to the table page of the referenced table. In the table inspector on the right, click on the \u201cTable\u201d tab. Find the \u201cRecord Summary\u201d section below. or Start from a reference column, and: Go to the table page containing the reference column. Select the reference column or a cell within it. In the table inspector on the right, click on the \u201cColumn\u201d tab. Find the \u201cLinked Record Summary\u201d section below. Record selector \u00b6 Reference columns also provide a \u201crecord selector\u201d tool which helps you search through referenced records when modifying reference values. It allows you to search on all columns from the referenced table and will use fuzzy logic to find the most relevant records. You can even create new records directly from the record selector. Limitations of Mathesar\u2019s reference columns \u00b6 Mathesar does not support \u201ccomposite\u201d foreign keys \u2014 foreign keys that reference multiple columns in the referenced table at once. Some PostgreSQL databases might contain normalized data which is implicitly structured to utilize the concept of references but which lacks the foreign key constraints necessary to ensure data integrity. Mathesar will not treat such columns as references. It only recognizes foreign key columns as references. Relationship types and patterns \u00b6 One-to-many relationships \u00b6 To illustrate a one-to-many relationship we\u2019ll re-use our example above. We\u2019ll have a people table as follows: id name 1 Alice Roberts 2 Bob Davis And an emails table as follows: id email person 1 alice@example.com Alice Roberts 2 aroberts@example.net Alice Roberts 3 bob@example.com Bob Davis Note Here the reference column, person , displays with formatting to mimic Mathesar\u2019s record summaries feature. Now one person can have many email addresses, hence the name \u201cone-to-many\u201d. Many-to-one relationships \u00b6 A many-to-one relationships is structurally equivalent to a one-to-many relationships, but with the perspective reversed. The two terms are often used interchangeably. Many-to-many relationships \u00b6 Continuing our address book example, let\u2019s pretend we\u2019d like to apply tags to our contacts. For example, we\u2019d like to: Tag Alice Roberts as \u201ccolleague\u201d Tag Bob Davis as \u201cfriend\u201d and \u201ccolleague\u201d We can use three tables to model this relationship: A people table (as before): id name 1 Alice Roberts 2 Bob Davis A new tags table: id tag 1 colleague 2 friend And a new people_tags table (sometimes referred to as a \u201cjoin table\u201d or \u201cmapping table\u201d): id person tag 1 Alice Roberts colleague 2 Bob Davis friend 3 Bob Davis colleague Now people can have many tags and tags can have many people, hence the name \u201cmany-to-many\u201d. Other types of relationships \u00b6 More esoteric relationships are possible too. For example: One-to-one relationships can be created by applying a unique constraint to the reference column. This is sometimes useful in more complex situations. Hierarchical data structures can be modeled using self-referential relationships. Polymorphic relationships can be modeled through a variety of different patterns . Creating relationships \u00b6 First, create the tables you want to relate. From the table page of either table, open the \u201cTable\u201d tab within the table inspector, and find the \u201cRelationships\u201d section. Click on the \u201cCreate relationship\u201d button, and follow the prompts. Alternatively, you can manually add a foreign key constraint to an existing column with the following steps: Open the \u201cTable\u201d tab within the table inspector. Open the \u201cAdvanced\u201d section at the bottom. Click on the \u201cConstraints\u201d button. Next to \u201cForeign Key\u201d, click on \u201cAdd\u201d.","title":"Relationships"},{"location":"user-guide/relationships/#relationships","text":"Relationships allow a single cell in one table to reference a row in another table. When one table references another in this manner, the two tables are said to be \u201crelated\u201d. This is a core feature of PostgreSQL, and it allows us to model complex data structures using multiple tables.","title":"Relationships"},{"location":"user-guide/relationships/#example","text":"Let\u2019s say we are maintaining an address book of people and their contact info\u2026 Without Relationships Associating multiple email addresses with one person is tricky! We might try the following approaches: Option 1: Email addresses combined into a single column: name emails Alice Roberts alice@example.com, aroberts@example.net Bob Davis bob@example.com Option 2: Email addresses spread across multiple columns name email_1 email_2 Alice Roberts alice@example.com aroberts@example.net Bob Davis bob@example.com Option 3: People spread across multiple rows name email Alice Roberts alice@example.com Alice Roberts aroberts@example.net Bob Davis bob@example.com None of these options are ideal. They make it difficult to query the data, and they make it easy to introduce errors. With Relationships We can create two tables: The people table: id name 1 Alice Roberts 2 Bob Davis The emails table: id email person 1 alice@example.com 1 2 aroberts@example.net 1 3 bob@example.com 2 And we configure the person column to reference the id column in the people table, ensuring that all the references are valid. The database handles this validation for us, and even prevents us from deleting a person without deleting their associated email addresses too.","title":"Example"},{"location":"user-guide/relationships/#normalization","text":"This practice of modeling data through multiple related tables is called data normalization , and it\u2019s why a database will typically have its data spread across many tables, each with their own unique column structure, and very few tables providing much use or value in isolation. In the example above, the approaches without relationships are not normalized, while the approach with relationships is normalized. Normalized data structures are more efficient to query and update, and they help to ensure data integrity by reducing redundancy and minimizing the risk of inconsistencies. But they can also be more cumbersome to work with manually due to the indirection inherent in having data spread across multiple tables. Mathesar helps you manage this complexity by providing a user-friendly interface to work with normalized data.","title":"Normalization"},{"location":"user-guide/relationships/#foreign-key-constraints-in-postgresql","text":"In PostgreSQL, references are called \u201c foreign key constraints \u201d, or simply \u201cforeign keys\u201d. These constraints are set on the table to ensure that the data in the referencing column always points to a valid row in the referenced table.","title":"Foreign key constraints in PostgreSQL"},{"location":"user-guide/relationships/#reference-columns-in-mathesar","text":"Mathesar identifies reference columns in your database by looking for foreign key constraints set in PostgreSQL. And when you create a reference column in Mathesar, it will automatically create the necessary foreign key constraint in PostgreSQL. As noted below, reference columns get some extra features too!","title":"Reference columns in Mathesar"},{"location":"user-guide/relationships/#record-summaries","text":"Without Mathesar, reference cells are typically rather opaque. Often they contain only an id number, which is not very helpful when you\u2019re trying to understand the data. Mathesar helps solve this problem by providing a feature called \u201crecord summaries\u201d which allows you to see a short text summary of the referenced record directly in the referencing cell. By default, the record summary will be the value of the first text-like column in the referenced table. You can customize the record summary to show any columns and text you choose. To customize a record summary, you can either: Start from the referenced table, and: Go to the table page of the referenced table. In the table inspector on the right, click on the \u201cTable\u201d tab. Find the \u201cRecord Summary\u201d section below. or Start from a reference column, and: Go to the table page containing the reference column. Select the reference column or a cell within it. In the table inspector on the right, click on the \u201cColumn\u201d tab. Find the \u201cLinked Record Summary\u201d section below.","title":"Record summaries"},{"location":"user-guide/relationships/#record-selector","text":"Reference columns also provide a \u201crecord selector\u201d tool which helps you search through referenced records when modifying reference values. It allows you to search on all columns from the referenced table and will use fuzzy logic to find the most relevant records. You can even create new records directly from the record selector.","title":"Record selector"},{"location":"user-guide/relationships/#limitations-of-mathesars-reference-columns","text":"Mathesar does not support \u201ccomposite\u201d foreign keys \u2014 foreign keys that reference multiple columns in the referenced table at once. Some PostgreSQL databases might contain normalized data which is implicitly structured to utilize the concept of references but which lacks the foreign key constraints necessary to ensure data integrity. Mathesar will not treat such columns as references. It only recognizes foreign key columns as references.","title":"Limitations of Mathesar's reference columns"},{"location":"user-guide/relationships/#relationship-types-and-patterns","text":"","title":"Relationship types and patterns"},{"location":"user-guide/relationships/#one-to-many-relationships","text":"To illustrate a one-to-many relationship we\u2019ll re-use our example above. We\u2019ll have a people table as follows: id name 1 Alice Roberts 2 Bob Davis And an emails table as follows: id email person 1 alice@example.com Alice Roberts 2 aroberts@example.net Alice Roberts 3 bob@example.com Bob Davis Note Here the reference column, person , displays with formatting to mimic Mathesar\u2019s record summaries feature. Now one person can have many email addresses, hence the name \u201cone-to-many\u201d.","title":"One-to-many relationships"},{"location":"user-guide/relationships/#many-to-one-relationships","text":"A many-to-one relationships is structurally equivalent to a one-to-many relationships, but with the perspective reversed. The two terms are often used interchangeably.","title":"Many-to-one relationships"},{"location":"user-guide/relationships/#many-to-many-relationships","text":"Continuing our address book example, let\u2019s pretend we\u2019d like to apply tags to our contacts. For example, we\u2019d like to: Tag Alice Roberts as \u201ccolleague\u201d Tag Bob Davis as \u201cfriend\u201d and \u201ccolleague\u201d We can use three tables to model this relationship: A people table (as before): id name 1 Alice Roberts 2 Bob Davis A new tags table: id tag 1 colleague 2 friend And a new people_tags table (sometimes referred to as a \u201cjoin table\u201d or \u201cmapping table\u201d): id person tag 1 Alice Roberts colleague 2 Bob Davis friend 3 Bob Davis colleague Now people can have many tags and tags can have many people, hence the name \u201cmany-to-many\u201d.","title":"Many-to-many relationships"},{"location":"user-guide/relationships/#other-types-of-relationships","text":"More esoteric relationships are possible too. For example: One-to-one relationships can be created by applying a unique constraint to the reference column. This is sometimes useful in more complex situations. Hierarchical data structures can be modeled using self-referential relationships. Polymorphic relationships can be modeled through a variety of different patterns .","title":"Other types of relationships"},{"location":"user-guide/relationships/#creating-relationships","text":"First, create the tables you want to relate. From the table page of either table, open the \u201cTable\u201d tab within the table inspector, and find the \u201cRelationships\u201d section. Click on the \u201cCreate relationship\u201d button, and follow the prompts. Alternatively, you can manually add a foreign key constraint to an existing column with the following steps: Open the \u201cTable\u201d tab within the table inspector. Open the \u201cAdvanced\u201d section at the bottom. Click on the \u201cConstraints\u201d button. Next to \u201cForeign Key\u201d, click on \u201cAdd\u201d.","title":"Creating relationships"},{"location":"user-guide/roles/","text":"PostgreSQL Roles \u00b6 PostgreSQL uses roles to manage access to data, and each PostgreSQL server has many roles within it. What is a role? \u00b6 PostgreSQL\u2019s role system is elegant and powerful, albeit somewhat idiosyncratic. Many permission systems utilize the concept of \u201cusers\u201d to control access, and PostgreSQL roles work similarly. You connect to a PostgreSQL server by supplying your role\u2019s name and password. Then your role will dictate your access throughout the server. Other permission systems commonly have a separate concept of \u201cgroups\u201d, wherein multiple users can be members of a single group. Permissions can be granted to the group as a whole. Interestingly, PostgreSQL roles can also function as groups! Through role inheritance , the permissions of any role can be granted to any other role. Users vs Roles Outside of Mathesar, it\u2019s not uncommon for people to say user when referring to a PostgreSQL role . However, within the context of Mathesar, users and roles are different things! Our documentation maintains this distinction pedantically. When we say \u201cuser\u201d, we mean a Mathesar user, and when we say \u201crole\u201d, we mean a PostgreSQL role. Managing your PostgreSQL roles from within Mathesar \u00b6 To see the roles available on your server, navigate to the Database Settings tab within the page for one of your connected databases. From there, you\u2019ll be able to add roles, drop roles, and edit role inheritance. Role passwords are stored in Mathesar\u2019s internal database and encrypted with your SECRET_KEY . Renaming roles and modifying role properties (e.g. LOGIN status) is not supported within Mathesar. LOGIN vs non-LOGIN roles \u00b6 In PostgreSQL every role has a boolean LOGIN property which is either true or false . A LOGIN role may have an associated password and thus be used to connect to the server; while a non- LOGIN role may not. Non- LOGIN roles are often used as \u201cgroup\u201d roles to be granted to other roles. Mathesar lets you see the LOGIN status of each role, but does not allow you to change it. If you need to change a role\u2019s LOGIN status, you\u2019ll need to do so directly in PostgreSQL. Roles vis-\u00e0-vis databases \u00b6 In PostgreSQL, roles live within the server and thus are not necessarily specific to individual databases. One role can be configured to access many different databases; and one database can be configured for access via many different roles. Within the Mathesar interface however, the list of roles is presented inside the page. This structure exists for the sake of convenience \u2014 and because PostgreSQL requires that clients connect to a specific database, even to query the roles present on a server. Nonetheless, it is important to understand that when you add/remove PostgreSQL roles (or edit their child roles), your changes will be visible for all databases which share the same server. Ownership \u00b6 Every PostgreSQL object (e.g. a table , schema , etc.) has one and only one role said to be its \u201cowner\u201d. By default the owner is set to the role which created the object. The owner generally can do anything directly to the object, but not necessarily other objects contained within it. For example, a role might own a schema but not have access to certain tables within the schema. Privileges \u00b6 Privileges are specific, granular rights that can be granted on database objects. Privileges can be granted to roles, allowing non-owning roles to perform certain actions. See the following sections for more information on configuring these privileges: Database permissions Schema permissions Table permissions These privileges cover common actions, but there are still certain actions which remain restricted to object owners and cannot be granted to other roles. For example, only the owner of a table can add new columns to it; there is no way to grant that privilege to a non-owning role. Role inheritance \u00b6 PostgreSQL has a mechanism for role inheritance (aka \u201crole membership\u201d) wherein any role can be \u201cgranted\u201d to any other role. For example, when the role auditors is granted to role bob , then bob will inherit all of the privileges set for auditors . While it\u2019s common for non-login roles to serve as \u201cgroups\u201d which are granted to login roles, any role can actually be granted to any other role. This feature can be used to form simple hierarchies and complex graph-based inheritance structures. See the PostgreSQL docs for more info. Shared ownership \u00b6 Although every object in PostgreSQL has only one owner, it\u2019s still possible configure multiple roles to effectively \u201cown\u201d a single object by leveraging inheritance: We can create a role to directly own the object and act as a sort of proxy \u201cgroup\u201d. (The group role doesn\u2019t need to be a LOGIN role and thus doesn\u2019t require a password to be configured.) Then we can grant that group role to any other roles we\u2019d like. Those child roles will then have permission do things as if they were the owner themselves . You can use Mathesar to configure an arrangement like the above, though it will require many steps.","title":"PostgreSQL roles"},{"location":"user-guide/roles/#postgresql-roles","text":"PostgreSQL uses roles to manage access to data, and each PostgreSQL server has many roles within it.","title":"PostgreSQL Roles"},{"location":"user-guide/roles/#what-is-a-role","text":"PostgreSQL\u2019s role system is elegant and powerful, albeit somewhat idiosyncratic. Many permission systems utilize the concept of \u201cusers\u201d to control access, and PostgreSQL roles work similarly. You connect to a PostgreSQL server by supplying your role\u2019s name and password. Then your role will dictate your access throughout the server. Other permission systems commonly have a separate concept of \u201cgroups\u201d, wherein multiple users can be members of a single group. Permissions can be granted to the group as a whole. Interestingly, PostgreSQL roles can also function as groups! Through role inheritance , the permissions of any role can be granted to any other role. Users vs Roles Outside of Mathesar, it\u2019s not uncommon for people to say user when referring to a PostgreSQL role . However, within the context of Mathesar, users and roles are different things! Our documentation maintains this distinction pedantically. When we say \u201cuser\u201d, we mean a Mathesar user, and when we say \u201crole\u201d, we mean a PostgreSQL role.","title":"What is a role?"},{"location":"user-guide/roles/#managing","text":"To see the roles available on your server, navigate to the Database Settings tab within the page for one of your connected databases. From there, you\u2019ll be able to add roles, drop roles, and edit role inheritance. Role passwords are stored in Mathesar\u2019s internal database and encrypted with your SECRET_KEY . Renaming roles and modifying role properties (e.g. LOGIN status) is not supported within Mathesar.","title":"Managing your PostgreSQL roles from within Mathesar"},{"location":"user-guide/roles/#login","text":"In PostgreSQL every role has a boolean LOGIN property which is either true or false . A LOGIN role may have an associated password and thus be used to connect to the server; while a non- LOGIN role may not. Non- LOGIN roles are often used as \u201cgroup\u201d roles to be granted to other roles. Mathesar lets you see the LOGIN status of each role, but does not allow you to change it. If you need to change a role\u2019s LOGIN status, you\u2019ll need to do so directly in PostgreSQL.","title":"LOGIN vs non-LOGIN roles"},{"location":"user-guide/roles/#roles-vis-a-vis-databases","text":"In PostgreSQL, roles live within the server and thus are not necessarily specific to individual databases. One role can be configured to access many different databases; and one database can be configured for access via many different roles. Within the Mathesar interface however, the list of roles is presented inside the page. This structure exists for the sake of convenience \u2014 and because PostgreSQL requires that clients connect to a specific database, even to query the roles present on a server. Nonetheless, it is important to understand that when you add/remove PostgreSQL roles (or edit their child roles), your changes will be visible for all databases which share the same server.","title":"Roles vis-\u00e0-vis databases"},{"location":"user-guide/roles/#ownership","text":"Every PostgreSQL object (e.g. a table , schema , etc.) has one and only one role said to be its \u201cowner\u201d. By default the owner is set to the role which created the object. The owner generally can do anything directly to the object, but not necessarily other objects contained within it. For example, a role might own a schema but not have access to certain tables within the schema.","title":"Ownership"},{"location":"user-guide/roles/#privileges","text":"Privileges are specific, granular rights that can be granted on database objects. Privileges can be granted to roles, allowing non-owning roles to perform certain actions. See the following sections for more information on configuring these privileges: Database permissions Schema permissions Table permissions These privileges cover common actions, but there are still certain actions which remain restricted to object owners and cannot be granted to other roles. For example, only the owner of a table can add new columns to it; there is no way to grant that privilege to a non-owning role.","title":"Privileges"},{"location":"user-guide/roles/#inheritance","text":"PostgreSQL has a mechanism for role inheritance (aka \u201crole membership\u201d) wherein any role can be \u201cgranted\u201d to any other role. For example, when the role auditors is granted to role bob , then bob will inherit all of the privileges set for auditors . While it\u2019s common for non-login roles to serve as \u201cgroups\u201d which are granted to login roles, any role can actually be granted to any other role. This feature can be used to form simple hierarchies and complex graph-based inheritance structures. See the PostgreSQL docs for more info.","title":"Role inheritance"},{"location":"user-guide/roles/#shared-ownership","text":"Although every object in PostgreSQL has only one owner, it\u2019s still possible configure multiple roles to effectively \u201cown\u201d a single object by leveraging inheritance: We can create a role to directly own the object and act as a sort of proxy \u201cgroup\u201d. (The group role doesn\u2019t need to be a LOGIN role and thus doesn\u2019t require a password to be configured.) Then we can grant that group role to any other roles we\u2019d like. Those child roles will then have permission do things as if they were the owner themselves . You can use Mathesar to configure an arrangement like the above, though it will require many steps.","title":"Shared ownership"},{"location":"user-guide/schemas/","text":"Schemas \u00b6 What is a schema? \u00b6 \u201cSchema\u201d is one of those funny words that can mean different things in different contexts, even within the word of relational database systems. While all relational databases store their data in tables , PostgreSQL has an additional level of nesting which requires every table to live within one and only one schema. You might think of a schema as a sort of folder. PostgreSQL sometimes calls it a \u201cnamespace\u201d. Schemas exist to help organize tables (and other database objects such as functions) into logical groups and avoid naming collisions. Schemas cannot contain other schemas, so there is a fixed hierarchy of objects\u2026 Within a database you have multiple schemas. And within a schema you have multiple tables. Mathesar\u2019s interface mirrors this structure. The \u201cpublic\u201d schema \u00b6 Every PostgreSQL database has a schema named public . It cannot be deleted or renamed. It\u2019s also common for PostgreSQL servers to be configured to allow all roles to create tables within the public schema. And it\u2019s common for people to use PostgreSQL heavily without ever venturing outside the public schema. If you don\u2019t need to separate your data into different schemas, you can put everything in the public schema and more or less forget about schemas altogether. Managing schemas within your database \u00b6 Mathesar lets you add/remove/rename the schemas in your database from within the database page. You can also add descriptions to your schemas which are stored in PostgreSQL as COMMENTs . However, your ability to alter schemas may be limited by access control \u2014 and you won\u2019t be able to change the public schema. Organizing your data \u2014 schemas or databases? \u00b6 If you have separate, self-contained data projects you can choose between organizing them into separate schemas within the same database or into entirely separate databases. Schema Permissions \u00b6 Owner: In PostgreSQL, every schema has a role set as its owner . Only the owner can: Drop the schema Manage schema-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one schema may be granted to specific roles in PostgreSQL: USAGE - Allows the role to see the tables within the schema. CREATE - Allows the role to create new tables within the schema. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a schema, navigate to the schema page in Mathesar and click on the Schema Permissions button at the top right. Mathesar\u2019s internal schemas \u00b6 Mathesar allows you to work with all the schemas in your database except for the following Mathesar-specific \u201cinternal\u201d schemas: mathesar_types - This holds Mathesar\u2019s custom data types that you can use for your data. msar - This holds the bulk of Mathesar\u2019s application code, defined as PostgreSQL functions. __msar - This is a deprecated schema which holds some Mathesar functions that are gradually being migrated to the msar schema. The first time you use Mathesar to connect to your database, Mathesar installs these schemas. Mathesar\u2019s approach to tightly integrating with PostgreSQL means these schemas are required for Mathesar to function with your database. For Mathesar to successfully install them, you\u2019ll need to enure that the PostgreSQL role you provide has CREATE privileges on the database. After the schemas are installed and your database is connected, you can revoke the CREATE privilege if do not wish for your users to be able to create other schemas.","title":"Schemas"},{"location":"user-guide/schemas/#schemas","text":"","title":"Schemas"},{"location":"user-guide/schemas/#what-is-a-schema","text":"\u201cSchema\u201d is one of those funny words that can mean different things in different contexts, even within the word of relational database systems. While all relational databases store their data in tables , PostgreSQL has an additional level of nesting which requires every table to live within one and only one schema. You might think of a schema as a sort of folder. PostgreSQL sometimes calls it a \u201cnamespace\u201d. Schemas exist to help organize tables (and other database objects such as functions) into logical groups and avoid naming collisions. Schemas cannot contain other schemas, so there is a fixed hierarchy of objects\u2026 Within a database you have multiple schemas. And within a schema you have multiple tables. Mathesar\u2019s interface mirrors this structure.","title":"What is a schema?"},{"location":"user-guide/schemas/#the-public-schema","text":"Every PostgreSQL database has a schema named public . It cannot be deleted or renamed. It\u2019s also common for PostgreSQL servers to be configured to allow all roles to create tables within the public schema. And it\u2019s common for people to use PostgreSQL heavily without ever venturing outside the public schema. If you don\u2019t need to separate your data into different schemas, you can put everything in the public schema and more or less forget about schemas altogether.","title":"The \"public\" schema"},{"location":"user-guide/schemas/#managing-schemas-within-your-database","text":"Mathesar lets you add/remove/rename the schemas in your database from within the database page. You can also add descriptions to your schemas which are stored in PostgreSQL as COMMENTs . However, your ability to alter schemas may be limited by access control \u2014 and you won\u2019t be able to change the public schema.","title":"Managing schemas within your database"},{"location":"user-guide/schemas/#organizing-your-data-schemas-or-databases","text":"If you have separate, self-contained data projects you can choose between organizing them into separate schemas within the same database or into entirely separate databases.","title":"Organizing your data &mdash; schemas or databases?"},{"location":"user-guide/schemas/#permissions","text":"Owner: In PostgreSQL, every schema has a role set as its owner . Only the owner can: Drop the schema Manage schema-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one schema may be granted to specific roles in PostgreSQL: USAGE - Allows the role to see the tables within the schema. CREATE - Allows the role to create new tables within the schema. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a schema, navigate to the schema page in Mathesar and click on the Schema Permissions button at the top right.","title":"Schema Permissions"},{"location":"user-guide/schemas/#internal","text":"Mathesar allows you to work with all the schemas in your database except for the following Mathesar-specific \u201cinternal\u201d schemas: mathesar_types - This holds Mathesar\u2019s custom data types that you can use for your data. msar - This holds the bulk of Mathesar\u2019s application code, defined as PostgreSQL functions. __msar - This is a deprecated schema which holds some Mathesar functions that are gradually being migrated to the msar schema. The first time you use Mathesar to connect to your database, Mathesar installs these schemas. Mathesar\u2019s approach to tightly integrating with PostgreSQL means these schemas are required for Mathesar to function with your database. For Mathesar to successfully install them, you\u2019ll need to enure that the PostgreSQL role you provide has CREATE privileges on the database. After the schemas are installed and your database is connected, you can revoke the CREATE privilege if do not wish for your users to be able to create other schemas.","title":"Mathesar's internal schemas"},{"location":"user-guide/stored-roles/","text":"Stored Roles \u00b6 Mathesar stores roles that you would like to use when authenticating with PostgreSQL to work with data. Stored roles can then be assigned to users via collaborators When you connect a database for the first time, the password for the role you specify is stored in Mathesar, and a collaborator for your user is established for the database. However for any additional roles you create, you\u2019ll need to manually save the password in Mathesar. After being saved, the stored passwords are not available to be viewed again within Mathesar. If the password for a role is modified within PostgreSQL, you\u2019ll need to update the stored password for that role in Mathesar. How roles are stored: Passwords are stored in Mathesar\u2019s internal database . They are encrypted at rest with your SECRET_KEY generated at installation time. They are stored per-database- server . This means that if you connect two databases on the same server, then the same role can be used for both databases. To manage the stored roles: Navigate to the page for your connected database. Go to the Database Settings tab. Click on Stored Roles in the left-hand menu.","title":"Stored roles"},{"location":"user-guide/stored-roles/#stored-roles","text":"Mathesar stores roles that you would like to use when authenticating with PostgreSQL to work with data. Stored roles can then be assigned to users via collaborators When you connect a database for the first time, the password for the role you specify is stored in Mathesar, and a collaborator for your user is established for the database. However for any additional roles you create, you\u2019ll need to manually save the password in Mathesar. After being saved, the stored passwords are not available to be viewed again within Mathesar. If the password for a role is modified within PostgreSQL, you\u2019ll need to update the stored password for that role in Mathesar. How roles are stored: Passwords are stored in Mathesar\u2019s internal database . They are encrypted at rest with your SECRET_KEY generated at installation time. They are stored per-database- server . This means that if you connect two databases on the same server, then the same role can be used for both databases. To manage the stored roles: Navigate to the page for your connected database. Go to the Database Settings tab. Click on Stored Roles in the left-hand menu.","title":"Stored Roles"},{"location":"user-guide/tables/","text":"Tables \u00b6 What is a table? \u00b6 All relational databases, including PostgreSQL, organize data into tables (also known as \u201crelations\u201d) containing rows, columns, and cells. Much like a single spreadsheet might have multiple sheets within it, a single database will typically have several \u2014 or sometimes several dozen \u2014 tables within it. Unlike most spreadsheets though, database tables are usually highly interconnected. In a database, relationships offer a robust mechanism for one cell to reference one record in another table. By leveraging relationships, we can unlock the ability to model complex data structures via multiple linked tables. Managing tables \u00b6 Mathesar lets you add/remove/rename tables from within the database page. You can also add descriptions to your tables which are stored in PostgreSQL as COMMENTs . Keep in mind that your ability to alter tables may be limited by access control . Table Permissions \u00b6 Owner: In PostgreSQL, every table has a role set as its owner . Only the owner can: Drop the table Alter the table\u2019s columns Manage table-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one table may be granted to specific roles in PostgreSQL: SELECT - Allows reading data from the table INSERT - Allows creation of new records within the table. UPDATE - Allow updating existing records within the table. DELETE - Allow deletion of records from the table. TRUNCATE - Allows the deletion of all records from the table at once REFERENCES - Allow creation of foreign key constraints that reference the table. TRIGGER - Allow creation of triggers on the table. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a table, navigate to the table page in Mathesar and click on the Table Permissions button at the top right.","title":"Tables"},{"location":"user-guide/tables/#tables","text":"","title":"Tables"},{"location":"user-guide/tables/#what-is-a-table","text":"All relational databases, including PostgreSQL, organize data into tables (also known as \u201crelations\u201d) containing rows, columns, and cells. Much like a single spreadsheet might have multiple sheets within it, a single database will typically have several \u2014 or sometimes several dozen \u2014 tables within it. Unlike most spreadsheets though, database tables are usually highly interconnected. In a database, relationships offer a robust mechanism for one cell to reference one record in another table. By leveraging relationships, we can unlock the ability to model complex data structures via multiple linked tables.","title":"What is a table?"},{"location":"user-guide/tables/#managing-tables","text":"Mathesar lets you add/remove/rename tables from within the database page. You can also add descriptions to your tables which are stored in PostgreSQL as COMMENTs . Keep in mind that your ability to alter tables may be limited by access control .","title":"Managing tables"},{"location":"user-guide/tables/#permissions","text":"Owner: In PostgreSQL, every table has a role set as its owner . Only the owner can: Drop the table Alter the table\u2019s columns Manage table-level privileges Transfer ownership Granted Privileges: Additionally, the following privileges on one table may be granted to specific roles in PostgreSQL: SELECT - Allows reading data from the table INSERT - Allows creation of new records within the table. UPDATE - Allow updating existing records within the table. DELETE - Allow deletion of records from the table. TRUNCATE - Allows the deletion of all records from the table at once REFERENCES - Allow creation of foreign key constraints that reference the table. TRIGGER - Allow creation of triggers on the table. See the PostgreSQL docs for more info. To manage the owner and granted privileges for a table, navigate to the table page in Mathesar and click on the Table Permissions button at the top right.","title":"Table Permissions"},{"location":"user-guide/usage-data-collection/","text":"Usage Data Collection \u00b6 You can opt-in to allow Mathesar to gather anonymized usage data. This is very valuable to us to help us improve Mathesar\u2019s features, performance, and stability, through understanding how Mathesar is being used, enabling us to identify areas to improve the user experience, and allowing us to track adoption and ensure the reliability of the tool. Data Sent \u00b6 When you\u2019ve opted-in to usage data collection, the following information is sent every 24 hours: created_at : A timestamp giving the time the report was created. installation_id : This is a randomized UUID unique to your Mathesar installation. mathesar_version : This is a string giving your Mathesar version, e.g., \u20180.2.0\u2019. user_count : The number of user accounts on your Mathesar installation. active_user_count : The number of users who have logged into your Mathesar installation within the last 14 days. configured_role_count : The number of PostgreSQL roles you\u2019ve configured in your Mathesar installation. connected_database_count : The number of Databases you\u2019ve connected to your Mathesar installation. connected_database_schema_count : The total number of schemas connected to your Mathesar installation. connected_database_table_count : The total number of tables connected to your Mathesar installation. connected_database_record_count : The approximate number of records in all tables connected to your Mathesar installation. exploration_count : The number of Explorations you\u2019ve created in Mathesar. Viewing Actual Reports \u00b6 If you\u2019d like to see an actual report from your running Mathesar installation, go to the path /info/analytics_sample_report/ at the domain where you connect to Mathesar. You can also call the RPC function analytics.view_report .","title":"Usage data collection"},{"location":"user-guide/usage-data-collection/#usage-data-collection","text":"You can opt-in to allow Mathesar to gather anonymized usage data. This is very valuable to us to help us improve Mathesar\u2019s features, performance, and stability, through understanding how Mathesar is being used, enabling us to identify areas to improve the user experience, and allowing us to track adoption and ensure the reliability of the tool.","title":"Usage Data Collection"},{"location":"user-guide/usage-data-collection/#data-sent","text":"When you\u2019ve opted-in to usage data collection, the following information is sent every 24 hours: created_at : A timestamp giving the time the report was created. installation_id : This is a randomized UUID unique to your Mathesar installation. mathesar_version : This is a string giving your Mathesar version, e.g., \u20180.2.0\u2019. user_count : The number of user accounts on your Mathesar installation. active_user_count : The number of users who have logged into your Mathesar installation within the last 14 days. configured_role_count : The number of PostgreSQL roles you\u2019ve configured in your Mathesar installation. connected_database_count : The number of Databases you\u2019ve connected to your Mathesar installation. connected_database_schema_count : The total number of schemas connected to your Mathesar installation. connected_database_table_count : The total number of tables connected to your Mathesar installation. connected_database_record_count : The approximate number of records in all tables connected to your Mathesar installation. exploration_count : The number of Explorations you\u2019ve created in Mathesar.","title":"Data Sent"},{"location":"user-guide/usage-data-collection/#viewing-actual-reports","text":"If you\u2019d like to see an actual report from your running Mathesar installation, go to the path /info/analytics_sample_report/ at the domain where you connect to Mathesar. You can also call the RPC function analytics.view_report .","title":"Viewing Actual Reports"},{"location":"user-guide/users/","text":"Mathesar Users \u00b6 Each Mathesar installation can have multiple users, allowing different people to sign in with their own password and work with the same data collaboratively. Managing Users \u00b6 To manage the users in you Mathesar installation, navigate to the users page: Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Any user with an admin-assigned password (new or edited) will be prompted to change their password after logging in. Newly added users won\u2019t see any of the connected databases unless you either make them admin users or explicitly add them as collaborators to each database. Admin vs Standard users \u00b6 Each Mathesar user is either Admin or Standard . Admin users have the following capabilities which Standard users do not: Admins can can manage other Mathesar users (view, add, edit, delete). Admins can connect and disconnect databases . Admins can save, update, and remove the stored passwords for PostgreSQL roles . Admins can manage collaborators . This allows an Admin user to grant any Mathesar user access to a database through a PostgreSQL role that the Admin specifies. Upon installing Mathesar, your first user will be an Admin user. Limitations \u00b6 Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. Nor is there yet an email-based password recovery mechanism. If you are locked out of your Mathesar installation\u2019s web interface, your system administrator can still use the command line reset any user\u2019s password .","title":"Mathesar users"},{"location":"user-guide/users/#mathesar-users","text":"Each Mathesar installation can have multiple users, allowing different people to sign in with their own password and work with the same data collaboratively.","title":"Mathesar Users"},{"location":"user-guide/users/#managing-users","text":"To manage the users in you Mathesar installation, navigate to the users page: Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Any user with an admin-assigned password (new or edited) will be prompted to change their password after logging in. Newly added users won\u2019t see any of the connected databases unless you either make them admin users or explicitly add them as collaborators to each database.","title":"Managing Users"},{"location":"user-guide/users/#admin","text":"Each Mathesar user is either Admin or Standard . Admin users have the following capabilities which Standard users do not: Admins can can manage other Mathesar users (view, add, edit, delete). Admins can connect and disconnect databases . Admins can save, update, and remove the stored passwords for PostgreSQL roles . Admins can manage collaborators . This allows an Admin user to grant any Mathesar user access to a database through a PostgreSQL role that the Admin specifies. Upon installing Mathesar, your first user will be an Admin user.","title":"Admin vs Standard users"},{"location":"user-guide/users/#limitations","text":"Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. Nor is there yet an email-based password recovery mechanism. If you are locked out of your Mathesar installation\u2019s web interface, your system administrator can still use the command line reset any user\u2019s password .","title":"Limitations"}]}