{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mathesar Documentation \u00b6 Welcome! \u00b6 Mathesar is a self-hostable open source project that provides a spreadsheet-like interface to a PostgreSQL database. Our web-based interface helps you and your collaborators set up data models, edit data, and build custom reports \u2014 no technical skills needed. You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database (or do both). Try Mathesar \u00b6 Live demo \u00b6 See our live demo site to try Mathesar without installing anything. Try locally \u00b6 This is a quick way to play with Mathesar locally, but is not appropriate for saving data that you care about or setting up a long-term installation. With Docker installed, run: docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-prod:latest Visit http://localhost:8000/ to set up an admin user account and create a database connection. Tips when trying Mathesar locally To open a psql shell within the container, run: docker exec -it mathesar sudo -u postgres psql To stop Mathesar, press Ctrl + C in the shell where it is running. To start again, run docker start mathesar . To remove the Docker container, run docker rm mathesar . \u26a0\ufe0f This will also delete the data that you\u2019ve saved within Mathesar! Install Mathesar \u00b6 You can self-host Mathesar by following one of the guides below: Install using Docker compose \u2014 a production setup with separate reverse-proxy and database containers. Install from scratch \u2014 an advanced setup that doesn\u2019t rely on Docker. More installation methods coming soon We\u2019re working on supporting additional installation methods, and we\u2019d appreciate feedback on which ones to prioritize. Please comment on this issue if you have thoughts. Use Mathesar \u00b6 Mathesar should be pretty intuitive to use. More documentation is coming soon, but for now, we\u2019ve written some documentation for some things that could be tricky. Syncing database changes if the database\u2019s structure is changed outside of Mathesar. How to set up users with different access levels Contribute to Mathesar \u00b6 As an open source project, we actively encourage contribution! Get started by reading our Contributor Guide . Donate \u00b6 We\u2019re a non-profit and your donations help sustain our core team. You can donate via GitHub or Open Collective .","title":"Welcome"},{"location":"#mathesar-documentation","text":"","title":"Mathesar Documentation"},{"location":"#welcome","text":"Mathesar is a self-hostable open source project that provides a spreadsheet-like interface to a PostgreSQL database. Our web-based interface helps you and your collaborators set up data models, edit data, and build custom reports \u2014 no technical skills needed. You can create a new PostgreSQL database while setting up Mathesar or use our UI to interact with an existing database (or do both).","title":"Welcome!"},{"location":"#try-mathesar","text":"","title":"Try Mathesar"},{"location":"#live-demo","text":"See our live demo site to try Mathesar without installing anything.","title":"Live demo"},{"location":"#try-locally","text":"This is a quick way to play with Mathesar locally, but is not appropriate for saving data that you care about or setting up a long-term installation. With Docker installed, run: docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-prod:latest Visit http://localhost:8000/ to set up an admin user account and create a database connection. Tips when trying Mathesar locally To open a psql shell within the container, run: docker exec -it mathesar sudo -u postgres psql To stop Mathesar, press Ctrl + C in the shell where it is running. To start again, run docker start mathesar . To remove the Docker container, run docker rm mathesar . \u26a0\ufe0f This will also delete the data that you\u2019ve saved within Mathesar!","title":"Try locally"},{"location":"#install-mathesar","text":"You can self-host Mathesar by following one of the guides below: Install using Docker compose \u2014 a production setup with separate reverse-proxy and database containers. Install from scratch \u2014 an advanced setup that doesn\u2019t rely on Docker. More installation methods coming soon We\u2019re working on supporting additional installation methods, and we\u2019d appreciate feedback on which ones to prioritize. Please comment on this issue if you have thoughts.","title":"Install Mathesar"},{"location":"#use-mathesar","text":"Mathesar should be pretty intuitive to use. More documentation is coming soon, but for now, we\u2019ve written some documentation for some things that could be tricky. Syncing database changes if the database\u2019s structure is changed outside of Mathesar. How to set up users with different access levels","title":"Use Mathesar"},{"location":"#contribute-to-mathesar","text":"As an open source project, we actively encourage contribution! Get started by reading our Contributor Guide .","title":"Contribute to Mathesar"},{"location":"#donate","text":"We\u2019re a non-profit and your donations help sustain our core team. You can donate via GitHub or Open Collective .","title":"Donate"},{"location":"administration/debug/","text":"Debug Mathesar \u00b6 For now, we only support turning on Debugging by using our special docker image. More methods will follow in future releases. Use the debugging Mathesar docker image \u00b6 There is a debugging-enabled Mathesar docker image available at mathesar/mathesar-debug that is the same as the mathesar/mathesar-prod image, except that it has more debugging output available in the console where it\u2019s run, and it also produces more verbose errors in the browser when something goes wrong. You can use this image to figure out (or to help the Mathesar team figure out) what\u2019s wrong if your Mathesar installation isn\u2019t working as expected. The procedure is to Run Mathesar with the mathesar/mathesar-debug image, and then Observe and report any additional output or clues to the Mathesar team. Docker Compose \u00b6 Just replace the line image: mathesar/mathesar-prod:latest with image: mathesar/mathesar-debug:latest Basic Mathesar docker image \u00b6 If you are just trying the Mathesar Docker image directly as instructed in the introduction , replace the command docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-prod:latest with docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-debug:latest Other setups \u00b6 The debugging docker image should work anywhere the production image works. This means you can just replace any pull or run of the image mathesar/mathesar-prod:latest with mathesar/mathesar-debug:latest .","title":"Debug Mathesar"},{"location":"administration/debug/#debug-mathesar","text":"For now, we only support turning on Debugging by using our special docker image. More methods will follow in future releases.","title":"Debug Mathesar"},{"location":"administration/debug/#use-the-debugging-mathesar-docker-image","text":"There is a debugging-enabled Mathesar docker image available at mathesar/mathesar-debug that is the same as the mathesar/mathesar-prod image, except that it has more debugging output available in the console where it\u2019s run, and it also produces more verbose errors in the browser when something goes wrong. You can use this image to figure out (or to help the Mathesar team figure out) what\u2019s wrong if your Mathesar installation isn\u2019t working as expected. The procedure is to Run Mathesar with the mathesar/mathesar-debug image, and then Observe and report any additional output or clues to the Mathesar team.","title":"Use the debugging Mathesar docker image"},{"location":"administration/debug/#docker-compose","text":"Just replace the line image: mathesar/mathesar-prod:latest with image: mathesar/mathesar-debug:latest","title":"Docker Compose"},{"location":"administration/debug/#basic-mathesar-docker-image","text":"If you are just trying the Mathesar Docker image directly as instructed in the introduction , replace the command docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-prod:latest with docker run -it --name mathesar -p 8000:8000 mathesar/mathesar-debug:latest","title":"Basic Mathesar docker image"},{"location":"administration/debug/#other-setups","text":"The debugging docker image should work anywhere the production image works. This means you can just replace any pull or run of the image mathesar/mathesar-prod:latest with mathesar/mathesar-debug:latest .","title":"Other setups"},{"location":"administration/uninstall/","text":"Uninstall Mathesar \u00b6 The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed. Uninstall a Docker installation of Mathesar \u00b6 Note Depending on your Docker setup, you may need to run docker commands with sudo . Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Uninstall a Guided script or Docker compose installation of Mathesar \u00b6 Remove all Mathesar Docker images and containers. docker compose -f docker-compose.yml down --rmi all -v Remove configuration files. rm -rf xMATHESAR_INSTALLATION_DIRx # may need sudo, depending on location Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ; Uninstall a source installation of Mathesar \u00b6 Stop Caddy service systemctl disable caddy.service && systemctl stop caddy.service Remove Caddy service file and Caddyfile (requires sudo ) sudo rm /lib/systemd/system/caddy.service sudo rm /etc/caddy/Caddyfile Stop Gunicorn systemctl disable gunicorn.service systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory rm -r xMATHESAR_INSTALLATION_DIRx # May need sudo, depending on location Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ; Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall Mathesar"},{"location":"administration/uninstall/#uninstall-mathesar","text":"The uninstall instructions vary depending on the installation method you chose. Select your installation method below to proceed.","title":"Uninstall Mathesar"},{"location":"administration/uninstall/#uninstall-a-docker-installation-of-mathesar","text":"Note Depending on your Docker setup, you may need to run docker commands with sudo . Remove the Mathesar container. docker rm -v mathesar_service Remove the Mathesar Image docker rmi mathesar_service Remove volumes related to Mathesar docker volume rm static && docker volume rm media Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall a Docker installation of Mathesar"},{"location":"administration/uninstall/#uninstall-a-guided-script-or-docker-compose-installation-of-mathesar","text":"Remove all Mathesar Docker images and containers. docker compose -f docker-compose.yml down --rmi all -v Remove configuration files. rm -rf xMATHESAR_INSTALLATION_DIRx # may need sudo, depending on location Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall a Guided script or Docker compose installation of Mathesar"},{"location":"administration/uninstall/#uninstall-a-source-installation-of-mathesar","text":"Stop Caddy service systemctl disable caddy.service && systemctl stop caddy.service Remove Caddy service file and Caddyfile (requires sudo ) sudo rm /lib/systemd/system/caddy.service sudo rm /etc/caddy/Caddyfile Stop Gunicorn systemctl disable gunicorn.service systemctl stop gunicorn.service Remove Gunicorn service file sudo rm /lib/systemd/system/gunicorn.service Remove your Mathesar installation directory rm -r xMATHESAR_INSTALLATION_DIRx # May need sudo, depending on location Your installation directory might be customized It\u2019s possible that Mathesar could have been installed into a different directory than shown above. Use caution when deleting this directory. Remove Django database Connect to the psql terminal. sudo -u postgres psql Drop the Django database. DROP DATABASE mathesar_django ; Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall a source installation of Mathesar"},{"location":"administration/upgrade/0.1.4/","text":"Upgrade Mathesar to 0.1.4 \u00b6 The 0.1.4 release requires more upgrade steps than we hope to have for future releases! If you run into any trouble, we encourage you to open an issue or contact us for help. For installations using Docker Compose \u00b6 If you followed our Docker Compose installation instructions , then use these steps to upgrade your installation to 0.1.4. Note Depending on your setup, you may need to run some commands with sudo . Find needed parts Find your .env and docker-compose.yml files. Run docker inspect mathesar_service and look for the value of the \"com.docker.compose.project.config_files\" key in the resulting JSON to find the path to the docker-compose.yml file. The .env file should be in the same directory. If you have jq installed, you can run docker inspect mathesar_service \\ | jq '.[0].Config.Labels.\"com.docker.compose.project.config_files\"' and get the path directly. The .env file should be in the same directory. Copy the path of the directory containing docker-compose.yml and .env into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the configuration directory. If you are using a Docker container for your PostgreSQL database, Run docker volume inspect mathesar_postgresql_data and look for the \"Mountpoint\" in the resulting JSON. Copy the path of the directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the PostgreSQL data directory. Stop Mathesar, remove old images docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down --rmi all Set up new configuration Warning MATHESAR_DATABASES has been deprecated as of v0.1.4 and will be removed entirely in future releases of Mathesar. If you end up deleting the variable from your .env file before starting up Mathesar after the upgrade, you can still add the connections manually through Mathesar\u2019s UI. Back up the old configuration files: mv xMATHESAR_INSTALLATION_DIRx/docker-compose.yml xMATHESAR_INSTALLATION_DIRx/docker-compose.yml.backup cp xMATHESAR_INSTALLATION_DIRx/.env xMATHESAR_INSTALLATION_DIRx/env.backup (We\u2019ll modify the old file, so we copy instead of moving it.) Download the new docker compose file: curl -sfL -o xMATHESAR_INSTALLATION_DIRx/docker-compose.yml https://raw.githubusercontent.com/mathesar-foundation/mathesar/0.1.4/docker-compose.yml Edit the xMATHESAR_INSTALLATION_DIRx/.env file to break the DJANGO_DATABASE_URL variable into its parts. This variable should have the form: DJANGO_DATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database> You should edit the .env file to have the variables: POSTGRES_USER=<username> POSTGRES_PASSWORD=<password> POSTGRES_HOST=<host> POSTGRES_PORT=<port> POSTGRES_DB=<database> If you don\u2019t want to set those environment variables (e.g., if they\u2019re otherwise used), you can instead edit the docker-compose.yml file directly to add those variables. Double-check the rest of the configuration: You should have your SECRET_KEY variable defined. If hosting on the internet, you should have a DOMAIN_NAME variable defined. Initialize new Mathesar installation docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d This will pull new images, and start the Mathesar containers. Wait a few minutes, then run docker ps to verify that you have mathesar_service , mathesar-caddy-reverse-proxy-1 , and mathesar_db running and that the service is healthy. The services should not be reporting errors. If you were not using Docker volumes for your Mathesar PostgreSQL data, you\u2019re done, and you can login to Mathesar via your usual method. If you\u2019re not sure, try to login to Mathesar. If you\u2019re presented with a screen instructing you to create an Admin user, you likely need to proceed to the next step. Move your PostgreSQL directory Bring down the services: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down Remove scaffold database data, copy your old PostgreSQL volume to the new location: rm -r xMATHESAR_INSTALLATION_DIRx/msar/pgdata cp -r xMATHESAR_PG_DIRx xMATHESAR_INSTALLATION_DIRx/msar/pgdata Bring the services back up: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d If things look good, then you can try to login at the usual address using your normal username and password, and you should see your data. For installations done via our guided script \u00b6 If you installed Mathesar with our (now deprecated) guided script, then you have a Docker Compose installation. See the Docker Compose upgrade steps . For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.4. Warning These steps have not yet been tested extensively. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.4 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.4 Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm ci --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size=4096 Update Mathesar functions on the database: python mathesar/install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"To 0.1.4"},{"location":"administration/upgrade/0.1.4/#upgrade-mathesar-to-014","text":"The 0.1.4 release requires more upgrade steps than we hope to have for future releases! If you run into any trouble, we encourage you to open an issue or contact us for help.","title":"Upgrade Mathesar to 0.1.4"},{"location":"administration/upgrade/0.1.4/#docker-compose","text":"If you followed our Docker Compose installation instructions , then use these steps to upgrade your installation to 0.1.4. Note Depending on your setup, you may need to run some commands with sudo . Find needed parts Find your .env and docker-compose.yml files. Run docker inspect mathesar_service and look for the value of the \"com.docker.compose.project.config_files\" key in the resulting JSON to find the path to the docker-compose.yml file. The .env file should be in the same directory. If you have jq installed, you can run docker inspect mathesar_service \\ | jq '.[0].Config.Labels.\"com.docker.compose.project.config_files\"' and get the path directly. The .env file should be in the same directory. Copy the path of the directory containing docker-compose.yml and .env into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the configuration directory. If you are using a Docker container for your PostgreSQL database, Run docker volume inspect mathesar_postgresql_data and look for the \"Mountpoint\" in the resulting JSON. Copy the path of the directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with the PostgreSQL data directory. Stop Mathesar, remove old images docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down --rmi all Set up new configuration Warning MATHESAR_DATABASES has been deprecated as of v0.1.4 and will be removed entirely in future releases of Mathesar. If you end up deleting the variable from your .env file before starting up Mathesar after the upgrade, you can still add the connections manually through Mathesar\u2019s UI. Back up the old configuration files: mv xMATHESAR_INSTALLATION_DIRx/docker-compose.yml xMATHESAR_INSTALLATION_DIRx/docker-compose.yml.backup cp xMATHESAR_INSTALLATION_DIRx/.env xMATHESAR_INSTALLATION_DIRx/env.backup (We\u2019ll modify the old file, so we copy instead of moving it.) Download the new docker compose file: curl -sfL -o xMATHESAR_INSTALLATION_DIRx/docker-compose.yml https://raw.githubusercontent.com/mathesar-foundation/mathesar/0.1.4/docker-compose.yml Edit the xMATHESAR_INSTALLATION_DIRx/.env file to break the DJANGO_DATABASE_URL variable into its parts. This variable should have the form: DJANGO_DATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database> You should edit the .env file to have the variables: POSTGRES_USER=<username> POSTGRES_PASSWORD=<password> POSTGRES_HOST=<host> POSTGRES_PORT=<port> POSTGRES_DB=<database> If you don\u2019t want to set those environment variables (e.g., if they\u2019re otherwise used), you can instead edit the docker-compose.yml file directly to add those variables. Double-check the rest of the configuration: You should have your SECRET_KEY variable defined. If hosting on the internet, you should have a DOMAIN_NAME variable defined. Initialize new Mathesar installation docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d This will pull new images, and start the Mathesar containers. Wait a few minutes, then run docker ps to verify that you have mathesar_service , mathesar-caddy-reverse-proxy-1 , and mathesar_db running and that the service is healthy. The services should not be reporting errors. If you were not using Docker volumes for your Mathesar PostgreSQL data, you\u2019re done, and you can login to Mathesar via your usual method. If you\u2019re not sure, try to login to Mathesar. If you\u2019re presented with a screen instructing you to create an Admin user, you likely need to proceed to the next step. Move your PostgreSQL directory Bring down the services: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml down Remove scaffold database data, copy your old PostgreSQL volume to the new location: rm -r xMATHESAR_INSTALLATION_DIRx/msar/pgdata cp -r xMATHESAR_PG_DIRx xMATHESAR_INSTALLATION_DIRx/msar/pgdata Bring the services back up: docker compose -f xMATHESAR_INSTALLATION_DIRx/docker-compose.yml up -d If things look good, then you can try to login at the usual address using your normal username and password, and you should see your data.","title":"For installations using Docker Compose"},{"location":"administration/upgrade/0.1.4/#guided","text":"If you installed Mathesar with our (now deprecated) guided script, then you have a Docker Compose installation. See the Docker Compose upgrade steps .","title":"For installations done via our guided script"},{"location":"administration/upgrade/0.1.4/#scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.4. Warning These steps have not yet been tested extensively. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Go to your Mathesar installation directory. cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.4 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.4 Update Python dependencies pip install -r requirements.txt Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run the latest Django migrations python manage.py migrate Install the frontend dependencies npm ci --prefix mathesar_ui Build the Mathesar frontend app npm run --prefix mathesar_ui build --max_old_space_size=4096 Update Mathesar functions on the database: python mathesar/install.py --skip-confirm >> /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"administration/upgrade/0.1.5/","text":"Upgrade Mathesar to 0.1.5 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , except that you\u2019ll need to specify version 0.1.5 when pulling code from the repository in Step 2. You should also skip Step 5 \u2013 you do not need to change the environment variables.","title":"To 0.1.5"},{"location":"administration/upgrade/0.1.5/#upgrade-mathesar-to-015","text":"","title":"Upgrade Mathesar to 0.1.5"},{"location":"administration/upgrade/0.1.5/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"administration/upgrade/0.1.5/#for-installations-done-from-scratch","text":"If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , except that you\u2019ll need to specify version 0.1.5 when pulling code from the repository in Step 2. You should also skip Step 5 \u2013 you do not need to change the environment variables.","title":"For installations done from scratch"},{"location":"administration/upgrade/0.1.6/","text":"Upgrade Mathesar to 0.1.6 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.6. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.6 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.6 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.6/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"To 0.1.6"},{"location":"administration/upgrade/0.1.6/#upgrade-mathesar-to-016","text":"","title":"Upgrade Mathesar to 0.1.6"},{"location":"administration/upgrade/0.1.6/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"administration/upgrade/0.1.6/#for-installations-done-from-scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.6. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.6 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.6 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.6/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"administration/upgrade/0.1.7/","text":"Upgrade Mathesar to 0.1.7 \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.7. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.7 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.7 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"To 0.1.7"},{"location":"administration/upgrade/0.1.7/#upgrade-mathesar-to-017","text":"","title":"Upgrade Mathesar to 0.1.7"},{"location":"administration/upgrade/0.1.7/#for-installations-using-docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"administration/upgrade/0.1.7/#for-installations-done-from-scratch","text":"If you installed Mathesar from scratch , then use these steps to upgrade your installation to 0.1.7. Go to your Mathesar installation directory cd xMATHESAR_INSTALLATION_DIRx Note Your installation directory may be different from above if you used a different directory when installing Mathesar. Pull version 0.1.7 from the repository git pull https://github.com/mathesar-foundation/mathesar.git git checkout 0.1.7 Update Python dependencies pip install -r requirements-prod.txt Activate our virtual environment source ./mathesar-venv/bin/activate You can skip the following if you\u2019re upgrading from versions 0.1.4 and above. If you\u2019re upgrading from versions <= 0.1.3, update your environment variables according to the the new configuration specification . In particular, you must put the connection info for the internal DB into new POSTGRES_* variables. The DJANGO_DATABASE_URL variable is no longer supported. Add the environment variables to the shell before running Django commands export $(sudo cat .env) Run Django migrations python manage.py migrate Download and extract frontend assets wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Update Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Restart the gunicorn server systemctl restart gunicorn","title":"For installations done from scratch"},{"location":"administration/upgrade/older/","text":"Upgrading Mathesar to older versions \u00b6 For installations using Docker Compose \u00b6 If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory. For installations done from scratch \u00b6 If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , but you do not need to change the environment variables.","title":"To older versions"},{"location":"administration/upgrade/older/#upgrading-mathesar-to-older-versions","text":"","title":"Upgrading Mathesar to older versions"},{"location":"administration/upgrade/older/#docker-compose","text":"If you have a Docker compose installation (including one from the guided script), run the command below: docker compose -f /etc/mathesar/docker-compose.yml up --pull always -d Your installation directory may be different You may need to change /etc/mathesar/ in the command above if you chose to install Mathesar to a different directory.","title":"For installations using Docker Compose"},{"location":"administration/upgrade/older/#scratch","text":"If you installed from scratch, the upgrade instructions are the same as for 0.1.4 , but you do not need to change the environment variables.","title":"For installations done from scratch"},{"location":"api/rest/","text":"REST API \u00b6 Mathesar has a REST API that the front end uses to interact with the backend. For Mathesar\u2019s beta release, we are actively transitioning to a new RPC-style API and will soon be phasing out the REST API entirely. The REST API is not documented and is not intended to be used by third-party developers.","title":"REST"},{"location":"api/rest/#rest-api","text":"Mathesar has a REST API that the front end uses to interact with the backend. For Mathesar\u2019s beta release, we are actively transitioning to a new RPC-style API and will soon be phasing out the REST API entirely. The REST API is not documented and is not intended to be used by third-party developers.","title":"REST API"},{"location":"api/rpc/","text":"RPC API \u00b6 Mathesar has an API available at /api/rpc/v0/ which follows the JSON-RPC spec version 2.0. About \u00b6 Status \u00b6 We are currently in the process of transitioning our API architecture from a RESTful API to this RPC-style API, and we hope to have all functionality available through the RPC API by Mathesar\u2019s beta release. Stability The RPC API is not yet stable and may change in the future, even after we\u2019ve completed the transition to the RPC API architecture. If you build logic that depends on this API, be mindful that it may change in the future without warning or notice. Usage \u00b6 To use an RPC function: Call it with a dot path starting from its root path. Always use named parameters. Ensure that your request includes HTTP headers for valid session IDs, as well as CSRF cookies and tokens. Example To call function add_from_known_connection from the connections section of this page, you\u2019d send something like: POST /api/rpc/v0/ { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"method\" : \"connections.add_from_known_connection\" , \"params\" : { \"nickname\" : \"anewconnection\" , \"db_name\" : \"mynewcooldb\" }, } connections \u00b6 Classes and functions exposed to the RPC endpoint for creating connections. add_from_known_connection \u00b6 add_from_known_connection ( * , nickname , database , create_db = False , connection_id = None , sample_data = [] ) Add a new connection from an already existing one. If no connection_id is passed, the internal database connection will be used. Parameters: Name Type Description Default nickname str Identify the added connection. Should be unique. required database str The name of the database on the server. required create_db bool Whether we should create the database database if it doesn\u2019t already exist. False connection_id int Identifies the known connection when combined with the user_database value for the connection_type parameter None sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are \u2018library_management\u2019 and \u2018movie_collection\u2019. [] Returns: Type Description DBModelReturn Metadata about the Database associated with the connection. add_from_scratch \u00b6 add_from_scratch ( * , nickname , database , user , password , host , port , sample_data = [] ) Add a new connection to a PostgreSQL server from scratch. This requires inputting valid credentials for the connection. When setting up the connection, therefore, the database must already exist on the PostgreSQL server. Parameters: Name Type Description Default nickname str Identify the added connection. Should be unique. required database str The name of the database on the server. required user str A valid user (role) on the server, with CONNECT and CREATE privileges on the database given by database . required password str The password for user . required host str The hostname or IP address of the PostgreSQL server. required port int The port of the PostgreSQL server. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are \u2018library_management\u2019 and \u2018movie_collection\u2019. [] Returns: Type Description DBModelReturn Metadata about the Database associated with the connection. DBModelReturn \u00b6 Bases: TypedDict Information about a database model. Attributes: Name Type Description id int The Django id of the Database object added. nickname str Used to identify the added connection. database str The name of the database on the server. username str The username of the role for the connection. host str The hostname or IP address of the Postgres server. port int The port of the Postgres server. Responses \u00b6 Success \u00b6 Upon a successful call to an RPC function, the API will return a success object. Such an object has the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"result\" : <a n y> } The result is whatever was returned by the underlying function. Errors \u00b6 When an error is produced by a call to the RPC endpoint, we produce an error of the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"error\" : { \"code\" : <i nt > , \"message\" : <s tr > } } The code is a negative integer. Some codes are produced according to the JSON-RPC spec . Other error codes are grouped according to the library that produced the Exception: builtins : -31xxx psycopg or psycopg2 : -30xxx django : -29xxx mathesar (our code): -28xxx db (our code): -27xxx sqlalchemy : -26xxx other: -25xxx Unrecognized errors from a given library return a \u201cround number\u201d code, so an unknown builtins error gets the code -31000.","title":"RPC"},{"location":"api/rpc/#rpc-api","text":"Mathesar has an API available at /api/rpc/v0/ which follows the JSON-RPC spec version 2.0.","title":"RPC API"},{"location":"api/rpc/#about","text":"","title":"About"},{"location":"api/rpc/#status","text":"We are currently in the process of transitioning our API architecture from a RESTful API to this RPC-style API, and we hope to have all functionality available through the RPC API by Mathesar\u2019s beta release. Stability The RPC API is not yet stable and may change in the future, even after we\u2019ve completed the transition to the RPC API architecture. If you build logic that depends on this API, be mindful that it may change in the future without warning or notice.","title":"Status"},{"location":"api/rpc/#usage","text":"To use an RPC function: Call it with a dot path starting from its root path. Always use named parameters. Ensure that your request includes HTTP headers for valid session IDs, as well as CSRF cookies and tokens. Example To call function add_from_known_connection from the connections section of this page, you\u2019d send something like: POST /api/rpc/v0/ { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"method\" : \"connections.add_from_known_connection\" , \"params\" : { \"nickname\" : \"anewconnection\" , \"db_name\" : \"mynewcooldb\" }, }","title":"Usage"},{"location":"api/rpc/#mathesar.rpc.connections","text":"Classes and functions exposed to the RPC endpoint for creating connections.","title":"connections"},{"location":"api/rpc/#mathesar.rpc.connections.add_from_known_connection","text":"add_from_known_connection ( * , nickname , database , create_db = False , connection_id = None , sample_data = [] ) Add a new connection from an already existing one. If no connection_id is passed, the internal database connection will be used. Parameters: Name Type Description Default nickname str Identify the added connection. Should be unique. required database str The name of the database on the server. required create_db bool Whether we should create the database database if it doesn\u2019t already exist. False connection_id int Identifies the known connection when combined with the user_database value for the connection_type parameter None sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are \u2018library_management\u2019 and \u2018movie_collection\u2019. [] Returns: Type Description DBModelReturn Metadata about the Database associated with the connection.","title":"add_from_known_connection"},{"location":"api/rpc/#mathesar.rpc.connections.add_from_scratch","text":"add_from_scratch ( * , nickname , database , user , password , host , port , sample_data = [] ) Add a new connection to a PostgreSQL server from scratch. This requires inputting valid credentials for the connection. When setting up the connection, therefore, the database must already exist on the PostgreSQL server. Parameters: Name Type Description Default nickname str Identify the added connection. Should be unique. required database str The name of the database on the server. required user str A valid user (role) on the server, with CONNECT and CREATE privileges on the database given by database . required password str The password for user . required host str The hostname or IP address of the PostgreSQL server. required port int The port of the PostgreSQL server. required sample_data list [ str ] A list of strings requesting that some example data sets be installed on the underlying database. Valid list members are \u2018library_management\u2019 and \u2018movie_collection\u2019. [] Returns: Type Description DBModelReturn Metadata about the Database associated with the connection.","title":"add_from_scratch"},{"location":"api/rpc/#mathesar.rpc.connections.DBModelReturn","text":"Bases: TypedDict Information about a database model. Attributes: Name Type Description id int The Django id of the Database object added. nickname str Used to identify the added connection. database str The name of the database on the server. username str The username of the role for the connection. host str The hostname or IP address of the Postgres server. port int The port of the Postgres server.","title":"DBModelReturn"},{"location":"api/rpc/#responses","text":"","title":"Responses"},{"location":"api/rpc/#success","text":"Upon a successful call to an RPC function, the API will return a success object. Such an object has the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"result\" : <a n y> } The result is whatever was returned by the underlying function.","title":"Success"},{"location":"api/rpc/#errors","text":"When an error is produced by a call to the RPC endpoint, we produce an error of the following form: { \"jsonrpc\" : \"2.0\" , \"id\" : 234 , \"error\" : { \"code\" : <i nt > , \"message\" : <s tr > } } The code is a negative integer. Some codes are produced according to the JSON-RPC spec . Other error codes are grouped according to the library that produced the Exception: builtins : -31xxx psycopg or psycopg2 : -30xxx django : -29xxx mathesar (our code): -28xxx db (our code): -27xxx sqlalchemy : -26xxx other: -25xxx Unrecognized errors from a given library return a \u201cround number\u201d code, so an unknown builtins error gets the code -31000.","title":"Errors"},{"location":"configuration/env-variables/","text":"Environment Variables \u00b6 This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them. Backend configuration \u00b6 SECRET_KEY \u00b6 Description : A unique random string used by Django for cryptographic signing ( see Django docs ). It helps Mathesar secure user sessions and encrypt saved PostgreSQL passwords. Format : A 50 character string Additional information : To generate a secret key you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) Internal Database configuration \u00b6 Info The database specified in this section will be used to store Mathesar\u2019s internal data. Additionally, it can be optionally repurposed via Mathesar\u2019s UI to store user data. POSTGRES_DB \u00b6 Description : Specifies a name for the database that will be created and used by Mathesar for managing internal data. Default value : mathesar_django POSTGRES_USER \u00b6 Description : Specifies creation of a user with superuser privileges and a database with the same name. Default value : mathesar POSTGRES_PASSWORD \u00b6 Description : Specifies the superuser password that is required to be set for the PostgreSQL docker image. Default value : mathesar POSTGRES_HOST \u00b6 Description : Specifies the host name on which portgres listen for connections from client applications. Default value : mathesar_db POSTGRES_PORT \u00b6 Description : Specifies the port on which portgres listen for connections from client applications. Default value : 5432 Caddy reverse proxy configuration \u00b6 Note These variables are only needed if you\u2019re using the Caddy configuration in our default Docker Compose file. DOMAIN_NAME \u00b6 Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com","title":"Environment variables"},{"location":"configuration/env-variables/#environment-variables","text":"This page contains all available environment variables supported by Mathesar. See the specific installation guides for the applicable environment variables and instructions on how to set them.","title":"Environment Variables"},{"location":"configuration/env-variables/#backend","text":"","title":"Backend configuration"},{"location":"configuration/env-variables/#secret_key","text":"Description : A unique random string used by Django for cryptographic signing ( see Django docs ). It helps Mathesar secure user sessions and encrypt saved PostgreSQL passwords. Format : A 50 character string Additional information : To generate a secret key you can use this browser-based generator or run this command on MacOS or Linux: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50)","title":"SECRET_KEY"},{"location":"configuration/env-variables/#db","text":"Info The database specified in this section will be used to store Mathesar\u2019s internal data. Additionally, it can be optionally repurposed via Mathesar\u2019s UI to store user data.","title":"Internal Database configuration"},{"location":"configuration/env-variables/#postgres_db","text":"Description : Specifies a name for the database that will be created and used by Mathesar for managing internal data. Default value : mathesar_django","title":"POSTGRES_DB"},{"location":"configuration/env-variables/#postgres_user","text":"Description : Specifies creation of a user with superuser privileges and a database with the same name. Default value : mathesar","title":"POSTGRES_USER"},{"location":"configuration/env-variables/#postgres_password","text":"Description : Specifies the superuser password that is required to be set for the PostgreSQL docker image. Default value : mathesar","title":"POSTGRES_PASSWORD"},{"location":"configuration/env-variables/#postgres_host","text":"Description : Specifies the host name on which portgres listen for connections from client applications. Default value : mathesar_db","title":"POSTGRES_HOST"},{"location":"configuration/env-variables/#postgres_port","text":"Description : Specifies the port on which portgres listen for connections from client applications. Default value : 5432","title":"POSTGRES_PORT"},{"location":"configuration/env-variables/#caddy","text":"Note These variables are only needed if you\u2019re using the Caddy configuration in our default Docker Compose file.","title":"Caddy reverse proxy configuration"},{"location":"configuration/env-variables/#domain_name","text":"Description : The public URL that will be used to access Mathesar ( see Caddy docs ). Format : A URL or hostname Example values https://example.com localhost http://localhost Additional information If the protocol is http , then Caddy will serve traffic via HTTP only. If the protocol is https or is not specified, then Caddy will serve traffic via HTTPS (and will redirect all HTTP traffic to HTTPS). In this case Caddy will also attempt to automatically set up HTTPS with Let\u2019s Encrypt for you ( see Caddy docs ). Tip Set this to localhost if you\u2019d like Mathesar to be available only on localhost Set the protocol to http if you don\u2019t want Caddy to automatically handle setting up SSL, e.g. http://example.com","title":"DOMAIN_NAME"},{"location":"installation/build-from-source/","text":"Install Mathesar from source on Linux \u00b6 For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file . Requirements \u00b6 System \u00b6 We recommend having at least 60 GB disk space and 4 GB of RAM. Operating System \u00b6 We\u2019ve tested this on Debian 12 , but we expect that it can be adapted for other Linux distributions as well. Access \u00b6 You should have root access to the machine you\u2019re installing Mathesar on. Software \u00b6 You\u2019ll need to install the following system packages before you install Mathesar: Python 3.9, 3.10, or 3.11 Python version Python older than 3.9 will not run Mathesar. Python 3.12 will run Mathesar, but you\u2019ll have to take extra steps to get some dependencies to build. Installing a package for your OS that provides the libpq-fe.h header file should be enough in most cases. On Debian 12, this header is provided by the libpq-dev package. PostgreSQL 13 or newer (Verify by logging in, and running the query: SELECT version(); ) Caddy (Verify with caddy version ) git (Verify with git --version ) GNU gettext (Verify with gettext --version ) Domain (optional) \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on . Customizing this Guide \u00b6 Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name. Installation Steps \u00b6 Set up the database \u00b6 Open a psql shell. sudo -u postgres psql # Modify based on your Postgres installation. Let\u2019s create a Postgres user for Mathesar CREATE USER mathesar WITH ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. Your PostgreSQL user will either need to be a SUPERUSER or OWNER of the database. In this guide, we will be setting the user to be OWNER of the database as it is slightly restrictive compared to a SUPERUSER . CREATE DATABASE mathesar_django OWNER mathesar ; Press Ctrl + D to exit the psql shell. Set up your installation directory \u00b6 Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory. Set up the environment \u00b6 Clone the git repo into the installation directory. git clone https://github.com/mathesar-foundation/mathesar.git . Checkout the tag of the latest stable release, 0.1.7 . git checkout 0.1.7 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar, which will be less stable. We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.9 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions. Install the Mathesar application \u00b6 Install Python dependencies pip install -r requirements-prod.txt Set the environment variables Create .env file touch .env Edit your .env file, adding environment variables to configure Mathesar. Example Your .env file should look something like this DOMAIN_NAME='xDOMAIN_NAMEx' ALLOWED_HOSTS='xDOMAIN_NAMEx' SECRET_KEY='REPLACE_THIS_WITH_YOUR_RANDOMLY_GENERATED_VALUE' # REPLACE THIS! POSTGRES_DB=mathesar_django POSTGRES_USER=mathesar POSTGRES_PASSWORD=mathesar1234 # Do not use this password! POSTGRES_HOST=localhost POSTGRES_PORT=5432 Tip You can generate a SECRET_KEY variable by running: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. export $(cat .env) Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Download release static files and extract into the correct directory wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Install Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Create a media directory for storing user-uploaded media mkdir .media Set up Gunicorn \u00b6 Elevated permissions needed Most of the commands below need to be run as a root user, or using sudo . If you try to run one of these commands, and see an error about \u201cpermission denied\u201d, use one of those methods. Create a user for running Gunicorn groupadd gunicorn && \\ useradd gunicorn -g gunicorn Make the gunicorn user the owner of the .media directory chown -R gunicorn:gunicorn .media/ Create the Gunicorn SystemD service file. touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload systemctl and start the Gunicorn socket systemctl daemon-reload systemctl start gunicorn.service systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors journalctl --priority=notice --unit=gunicorn.service Set up the Caddy reverse proxy \u00b6 We will use the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile https://xDOMAIN_NAMEx { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy groupadd caddy && \\ useradd caddy -g caddy Create the Caddy systemd service file. touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket systemctl daemon-reload && \\ systemctl start caddy.service && \\ systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors journalctl --priority=notice --unit=caddy.service Set up your user account \u00b6 Mathesar is now installed! You can use it by visiting the URL xDOMAIN_NAMEx . You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Follow the instructions on screen.","title":"Install from scratch"},{"location":"installation/build-from-source/#install-mathesar-from-source-on-linux","text":"For experienced Linux sysadmins To follow this guide you need be experienced with Linux server administration, including the command line interface and some common utilities. If you run into any trouble, we encourage you to open an issue or submit a PR proposing changes to this file .","title":"Install Mathesar from source on Linux"},{"location":"installation/build-from-source/#requirements","text":"","title":"Requirements"},{"location":"installation/build-from-source/#system","text":"We recommend having at least 60 GB disk space and 4 GB of RAM.","title":"System"},{"location":"installation/build-from-source/#operating-system","text":"We\u2019ve tested this on Debian 12 , but we expect that it can be adapted for other Linux distributions as well.","title":"Operating System"},{"location":"installation/build-from-source/#access","text":"You should have root access to the machine you\u2019re installing Mathesar on.","title":"Access"},{"location":"installation/build-from-source/#software","text":"You\u2019ll need to install the following system packages before you install Mathesar: Python 3.9, 3.10, or 3.11 Python version Python older than 3.9 will not run Mathesar. Python 3.12 will run Mathesar, but you\u2019ll have to take extra steps to get some dependencies to build. Installing a package for your OS that provides the libpq-fe.h header file should be enough in most cases. On Debian 12, this header is provided by the libpq-dev package. PostgreSQL 13 or newer (Verify by logging in, and running the query: SELECT version(); ) Caddy (Verify with caddy version ) git (Verify with git --version ) GNU gettext (Verify with gettext --version )","title":"Software"},{"location":"installation/build-from-source/#domain-optional","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Before you start installation, ensure that the DNS for your sub-domain or domain is pointing to the machine that you\u2019re installing Mathesar on .","title":"Domain (optional)"},{"location":"installation/build-from-source/#customizing-this-guide","text":"Type your domain name into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your domain name.","title":"Customizing this Guide"},{"location":"installation/build-from-source/#installation-steps","text":"","title":"Installation Steps"},{"location":"installation/build-from-source/#set-up-the-database","text":"Open a psql shell. sudo -u postgres psql # Modify based on your Postgres installation. Let\u2019s create a Postgres user for Mathesar CREATE USER mathesar WITH ENCRYPTED PASSWORD '1234' ; Customize your password Be sure to change the password 1234 in the command above to something more secure and private. Record your custom password somewhere safe. You will need to reference it later. Next, we have to create a database for storing Mathesar metadata. Your PostgreSQL user will either need to be a SUPERUSER or OWNER of the database. In this guide, we will be setting the user to be OWNER of the database as it is slightly restrictive compared to a SUPERUSER . CREATE DATABASE mathesar_django OWNER mathesar ; Press Ctrl + D to exit the psql shell.","title":"Set up the database"},{"location":"installation/build-from-source/#set-up-your-installation-directory","text":"Choose a directory to store the Mathesar application files. Examples /home/my_user_name/mathesar /etc/mathesar Type your installation directory into the box below. Do not include a trailing slash. Then press Enter to customize this guide with your installation directory. Create your installation directory. mkdir -p xMATHESAR_INSTALLATION_DIRx When installing outside your home folder If you choose a directory outside your home folder, then you\u2019ll need to create it with sudo and choose an appropriate owner for the directory (i.e. root or a custom user of your choosing). The remainder of this guide requires you to run commands with full permissions inside your installation directory . You can do this, for example via: chown my_user_name: xMATHESAR_INSTALLATION_DIRx Or sudo su Navigate into your installation directory. cd xMATHESAR_INSTALLATION_DIRx The remaining commands in this guide should be run from within your installation directory.","title":"Set up your installation directory"},{"location":"installation/build-from-source/#set-up-the-environment","text":"Clone the git repo into the installation directory. git clone https://github.com/mathesar-foundation/mathesar.git . Checkout the tag of the latest stable release, 0.1.7 . git checkout 0.1.7 Important If you don\u2019t run the above command you\u2019ll end up installing the latest development version of Mathesar, which will be less stable. We need to create a python virtual environment for the Mathesar application. <path-to-python-binary> -m venv ./mathesar-venv # /usr/bin/python3.9 -m venv ./mathesar-venv Next we will activate our virtual environment: source ./mathesar-venv/bin/activate Important You need to activate the environment each time you restart the shell as they don\u2019t persist across sessions.","title":"Set up the environment"},{"location":"installation/build-from-source/#install-the-mathesar-application","text":"Install Python dependencies pip install -r requirements-prod.txt Set the environment variables Create .env file touch .env Edit your .env file, adding environment variables to configure Mathesar. Example Your .env file should look something like this DOMAIN_NAME='xDOMAIN_NAMEx' ALLOWED_HOSTS='xDOMAIN_NAMEx' SECRET_KEY='REPLACE_THIS_WITH_YOUR_RANDOMLY_GENERATED_VALUE' # REPLACE THIS! POSTGRES_DB=mathesar_django POSTGRES_USER=mathesar POSTGRES_PASSWORD=mathesar1234 # Do not use this password! POSTGRES_HOST=localhost POSTGRES_PORT=5432 Tip You can generate a SECRET_KEY variable by running: echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) Add the environment variables to the shell You need to export the environment variables listed in the .env file to your shell. The easiest way would be to run the below command. export $(cat .env) Important You need to export the environment variables each time you restart the shell as they don\u2019t persist across sessions. Download release static files and extract into the correct directory wget https://github.com/mathesar-foundation/mathesar/releases/download/0.1.7/static_files.zip unzip static_files.zip && mv static_files mathesar/static/mathesar && rm static_files.zip Compile Mathesar translation files python manage.py compilemessages Install Mathesar functions on the database: python -m mathesar.install --skip-confirm | tee /tmp/install.py.log Create a media directory for storing user-uploaded media mkdir .media","title":"Install the Mathesar application"},{"location":"installation/build-from-source/#set-up-gunicorn","text":"Elevated permissions needed Most of the commands below need to be run as a root user, or using sudo . If you try to run one of these commands, and see an error about \u201cpermission denied\u201d, use one of those methods. Create a user for running Gunicorn groupadd gunicorn && \\ useradd gunicorn -g gunicorn Make the gunicorn user the owner of the .media directory chown -R gunicorn:gunicorn .media/ Create the Gunicorn SystemD service file. touch /lib/systemd/system/gunicorn.service and copy the following code into it. [Unit] Description=gunicorn daemon After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=gunicorn Group=gunicorn RuntimeDirectory=gunicorn WorkingDirectory=xMATHESAR_INSTALLATION_DIRx ExecStart=/bin/bash -c 'xMATHESAR_INSTALLATION_DIRx/mathesar-venv/bin/gunicorn config.wsgi:application' EnvironmentFile=xMATHESAR_INSTALLATION_DIRx/.env [Install] WantedBy=multi-user.target Reload systemctl and start the Gunicorn socket systemctl daemon-reload systemctl start gunicorn.service systemctl enable gunicorn.service Check the logs to verify if Gunicorn is running without any errors journalctl --priority=notice --unit=gunicorn.service","title":"Set up Gunicorn"},{"location":"installation/build-from-source/#set-up-the-caddy-reverse-proxy","text":"We will use the Caddy Reverse proxy to serve the static files and set up SSL certificates. Create the CaddyFile touch /etc/caddy/Caddyfile Add the configuration details to the CaddyFile https://xDOMAIN_NAMEx { log { output stdout } respond /caddy-health-check 200 encode zstd gzip handle_path /media/* { @downloads { query dl=* } header @downloads Content-disposition \"attachment; filename={query.dl}\" file_server { precompressed br zstd gzip root {$MEDIA_ROOT:xMATHESAR_INSTALLATION_DIRx/.media/} } } handle_path /static/* { file_server { precompressed br zstd gzip root {$STATIC_ROOT:xMATHESAR_INSTALLATION_DIRx/static/} } } reverse_proxy localhost:8000 } Create a user for running Caddy groupadd caddy && \\ useradd caddy -g caddy Create the Caddy systemd service file. touch /lib/systemd/system/caddy.service and copy the following code into it. [Unit] Description=Caddy Documentation=https://caddyserver.com/docs/ After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 LimitNPROC=512 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target Reload the systemctl and start the Caddy socket systemctl daemon-reload && \\ systemctl start caddy.service && \\ systemctl enable caddy.service Check the logs to verify if Caddy is running without any errors journalctl --priority=notice --unit=caddy.service","title":"Set up the Caddy reverse proxy"},{"location":"installation/build-from-source/#set-up-your-user-account","text":"Mathesar is now installed! You can use it by visiting the URL xDOMAIN_NAMEx . You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Follow the instructions on screen.","title":"Set up your user account"},{"location":"installation/docker-compose/","text":"Install Mathesar via Docker Compose \u00b6 Prerequisites \u00b6 Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information Step-by-Step Guide \u00b6 Note Depending on your Docker setup, you may need to run docker commands with sudo . Video walkthrough (Click to expand) Download our docker-compose.yml file. wget https://github.com/mathesar-foundation/mathesar/raw/0.1.7/docker-compose.yml Open the downloaded docker-compose file using your text editor. Set the required environment variables in the x-config section of the docker compose file. Config x-config : &config # (REQUIRED) Replace '?' with '-' followed by a 50 character random string. # You can generate one at https://djecrety.ir/ or by running: # echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) SECRET_KEY : ${SECRET_KEY:?} # (Optional) Replace 'http://localhost' with custom domain(s) e.g. # 'yourdomain.com, 127.0.0.1' to manage the host(s) at which you want to # access Mathesar over http or https DOMAIN_NAME : ${DOMAIN_NAME:-http://localhost} # Edit the POSTGRES_* variables if you are not using the db service provided # below, or if you want to use a custom database user. # (Optional) Replace 'mathesar_django' with any custom name for the internal # database managed by mathesar web-service POSTGRES_DB : ${POSTGRES_DB:-mathesar_django} # (Optional) Replace 'mathesar' with any custom username for the # aforementioned database POSTGRES_USER : ${POSTGRES_USER:-mathesar} # (Optional) Replace 'mathesar' with any custom password for the # aforementioned database POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-mathesar} # (Optional) Replace 'mathesar_db' with the name of the host running postgres POSTGRES_HOST : ${POSTGRES_HOST:-mathesar_db} # (Optional) Replace '5432' with the port on which postgres is running POSTGRES_PORT : ${POSTGRES_PORT:-5432} Run the docker compose file using: docker compose -f docker-compose.yml up Set up your user account Mathesar is now installed! You can use it by visiting localhost or the domain you\u2019ve set up. You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Just follow the instructions on screen. Starting and stopping Mathesar \u00b6 The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: docker compose -f docker-compose.yml up -d Info Exclude the -d flag if you\u2019d like to see the container\u2019s logs. Stop Mathesar: docker compose -f docker-compose.yml down This stops all Mathesar Docker containers and releases their ports. Optional configurations \u00b6 Hosting Mathesar over a custom domain with https \u00b6 If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Ensure that the DNS for your domain or sub-domain is pointing to the public IP address of the machine that you\u2019re installing Mathesar on . Add your domain(s) or sub-domain(s) to the DOMAIN_NAME environment variable, in the CONFIG section of the docker-compose file. Example DOMAIN_NAME : ${DOMAIN_NAME:-yourdomain.org, yoursubdomain.example.org} Restart the docker containers for the configuration to take effect. Using an external PostgreSQL server for Mathesar\u2019s internal database \u00b6 If you\u2019d like to use an external PostgreSQL server for Mathesar\u2019s internal database, you\u2019ll need to do the following: On the existing database server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the internal database environment variables to point to the database you just created. Ensure that you change the default values for the user, password, and host.","title":"Install using Docker Compose"},{"location":"installation/docker-compose/#install-mathesar-via-docker-compose","text":"","title":"Install Mathesar via Docker Compose"},{"location":"installation/docker-compose/#prerequisites","text":"","title":"Prerequisites"},{"location":"installation/docker-compose/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"installation/docker-compose/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"installation/docker-compose/#steps","text":"Note Depending on your Docker setup, you may need to run docker commands with sudo . Video walkthrough (Click to expand) Download our docker-compose.yml file. wget https://github.com/mathesar-foundation/mathesar/raw/0.1.7/docker-compose.yml Open the downloaded docker-compose file using your text editor. Set the required environment variables in the x-config section of the docker compose file. Config x-config : &config # (REQUIRED) Replace '?' with '-' followed by a 50 character random string. # You can generate one at https://djecrety.ir/ or by running: # echo $(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | head -c 50) SECRET_KEY : ${SECRET_KEY:?} # (Optional) Replace 'http://localhost' with custom domain(s) e.g. # 'yourdomain.com, 127.0.0.1' to manage the host(s) at which you want to # access Mathesar over http or https DOMAIN_NAME : ${DOMAIN_NAME:-http://localhost} # Edit the POSTGRES_* variables if you are not using the db service provided # below, or if you want to use a custom database user. # (Optional) Replace 'mathesar_django' with any custom name for the internal # database managed by mathesar web-service POSTGRES_DB : ${POSTGRES_DB:-mathesar_django} # (Optional) Replace 'mathesar' with any custom username for the # aforementioned database POSTGRES_USER : ${POSTGRES_USER:-mathesar} # (Optional) Replace 'mathesar' with any custom password for the # aforementioned database POSTGRES_PASSWORD : ${POSTGRES_PASSWORD:-mathesar} # (Optional) Replace 'mathesar_db' with the name of the host running postgres POSTGRES_HOST : ${POSTGRES_HOST:-mathesar_db} # (Optional) Replace '5432' with the port on which postgres is running POSTGRES_PORT : ${POSTGRES_PORT:-5432} Run the docker compose file using: docker compose -f docker-compose.yml up Set up your user account Mathesar is now installed! You can use it by visiting localhost or the domain you\u2019ve set up. You\u2019ll be prompted to set up an admin user account the first time you open Mathesar. Just follow the instructions on screen.","title":"Step-by-Step Guide"},{"location":"installation/docker-compose/#start-stop","text":"The Mathesar server needs to be running for you to use Mathesar. If you restart your machine, you\u2019ll need to start the server again. Start Mathesar: docker compose -f docker-compose.yml up -d Info Exclude the -d flag if you\u2019d like to see the container\u2019s logs. Stop Mathesar: docker compose -f docker-compose.yml down This stops all Mathesar Docker containers and releases their ports.","title":"Starting and stopping Mathesar"},{"location":"installation/docker-compose/#optional-configurations","text":"","title":"Optional configurations"},{"location":"installation/docker-compose/#hosting-mathesar-over-a-custom-domain-with-https","text":"If you want Mathesar to be accessible over the internet, you\u2019ll probably want to set up a domain or sub-domain to use. If you don\u2019t need a domain, you can skip this section. Ensure that the DNS for your domain or sub-domain is pointing to the public IP address of the machine that you\u2019re installing Mathesar on . Add your domain(s) or sub-domain(s) to the DOMAIN_NAME environment variable, in the CONFIG section of the docker-compose file. Example DOMAIN_NAME : ${DOMAIN_NAME:-yourdomain.org, yoursubdomain.example.org} Restart the docker containers for the configuration to take effect.","title":"Hosting Mathesar over a custom domain with https"},{"location":"installation/docker-compose/#using-an-external-postgresql-server-for-mathesars-internal-database","text":"If you\u2019d like to use an external PostgreSQL server for Mathesar\u2019s internal database, you\u2019ll need to do the following: On the existing database server, create a new database for Mathesar to store its metadata. psql -c 'create database mathesar_django;' Configure the internal database environment variables to point to the database you just created. Ensure that you change the default values for the user, password, and host.","title":"Using an external PostgreSQL server for Mathesar's internal database"},{"location":"releases/","text":"Release notes \u00b6 This is developer documentation to help with release notes. It is not published in our docs guide. Requirements \u00b6 Install DuckDB . On Macs, the easiest way to do this is via Homebrew : brew install duckdb . Install the GitHub CLI . On Macs, the easiest way to do this is via Homebrew : brew install gh . How to generate release notes \u00b6 Run the find_missing_prs.sh script, passing the release version number as the only argument. ./find_missing_prs.sh 1.2.3 You can run this any time during the development cycle. If there is not yet a release branch, the script will compare develop to the previous release. If you haven\u2019t yet created a release notes file for this release, it will create one for you. The script will find PRs which have been merged but not yet included in the release notes file. Open the release notes file and find a new section at the end titled (TO CATEGORIZE) . Incorporate PRs listed within this section into the release notes as you see fit. Rewrite the title text that appears directly in the markdown. Leave the titles as-written within the quotes (these will appear within hover text). Save the release notes and commit them. Edit mkdocs.yml , adding the newly-generated release notes file to the nav menu. Re-run the script as needed.","title":"Release notes"},{"location":"releases/#release-notes","text":"This is developer documentation to help with release notes. It is not published in our docs guide.","title":"Release notes"},{"location":"releases/#requirements","text":"Install DuckDB . On Macs, the easiest way to do this is via Homebrew : brew install duckdb . Install the GitHub CLI . On Macs, the easiest way to do this is via Homebrew : brew install gh .","title":"Requirements"},{"location":"releases/#how-to-generate-release-notes","text":"Run the find_missing_prs.sh script, passing the release version number as the only argument. ./find_missing_prs.sh 1.2.3 You can run this any time during the development cycle. If there is not yet a release branch, the script will compare develop to the previous release. If you haven\u2019t yet created a release notes file for this release, it will create one for you. The script will find PRs which have been merged but not yet included in the release notes file. Open the release notes file and find a new section at the end titled (TO CATEGORIZE) . Incorporate PRs listed within this section into the release notes as you see fit. Rewrite the title text that appears directly in the markdown. Leave the titles as-written within the quotes (these will appear within hover text). Save the release notes and commit them. Edit mkdocs.yml , adding the newly-generated release notes file to the nav menu. Re-run the script as needed.","title":"How to generate release notes"},{"location":"releases/0.1.0/","text":"Mathesar 0.1.0 (alpha release) \u00b6 Mathesar\u2019s first alpha release! Features: Built on Postgres : Connect to an existing Postgres database or set one up from scratch. Set up your data models : Easily create and update Postgres schemas and tables. Data entry : Use our spreadsheet-like interface to view, create, update, and delete table records. Filter, sort, and group : Quickly slice your data in different ways. Query builder : Use our Data Explorer to build queries without knowing anything about SQL or joins. Schema migrations : Transfer columns between tables in two clicks. Uses Postgres features : Mathesar uses and manipulates Postgres schemas, primary keys, foreign keys, constraints and data types. e.g. \u201cLinks\u201d in the UI are foreign keys in the database. Custom data types : Custom data types for emails and URLs (more coming soon), validated at the database level. Basic access control : Users can have Viewer (read-only), Editor (can only edit data, but not data structure), or Manager (can edit both data and its structure) roles. Basic documentation : Users can install Mathesar using Docker Compose, and tricky product features are documented. Full Changelog","title":"0.1.0"},{"location":"releases/0.1.0/#mathesar-010-alpha-release","text":"Mathesar\u2019s first alpha release! Features: Built on Postgres : Connect to an existing Postgres database or set one up from scratch. Set up your data models : Easily create and update Postgres schemas and tables. Data entry : Use our spreadsheet-like interface to view, create, update, and delete table records. Filter, sort, and group : Quickly slice your data in different ways. Query builder : Use our Data Explorer to build queries without knowing anything about SQL or joins. Schema migrations : Transfer columns between tables in two clicks. Uses Postgres features : Mathesar uses and manipulates Postgres schemas, primary keys, foreign keys, constraints and data types. e.g. \u201cLinks\u201d in the UI are foreign keys in the database. Custom data types : Custom data types for emails and URLs (more coming soon), validated at the database level. Basic access control : Users can have Viewer (read-only), Editor (can only edit data, but not data structure), or Manager (can edit both data and its structure) roles. Basic documentation : Users can install Mathesar using Docker Compose, and tricky product features are documented. Full Changelog","title":"Mathesar 0.1.0 (alpha release)"},{"location":"releases/0.1.1/","text":"Mathesar 0.1.1 (alpha release) \u00b6 This is a minor release focused on addressing bugs and improving user experience. Bug fixes \u00b6 The UI now supports non-ASCII characters in column names and column settings. The record page works when the primary key is not an integer. Mathesar can now support primary keys that are UUIDs. Access level permissions presented on the UI are now consistent with the API access levels. Deleting newly created records immediately no longer results in getting stuck in a loading screen. Empty columns are now inferred as text instead of boolean during import. The UI now displays an appropriate failure message when failing to delete rows. Mathesar no longer crashes when attempting to order rows by non-orderable columns. Row selection gets cleared correctly when a placeholder cell is selected. Improvements \u00b6 The UI cancels edits when users press the Esc key in table cells. Group headers with record summaries now have links to allow users to navigate to the associated record. Dropdown positioning is improved across the app, so that they do not overflow the browser window. A bunch of smaller visual and UX improvements made by our Google Summer of Code (GSoC) applicants. Full Changelog","title":"0.1.1"},{"location":"releases/0.1.1/#mathesar-011-alpha-release","text":"This is a minor release focused on addressing bugs and improving user experience.","title":"Mathesar 0.1.1 (alpha release)"},{"location":"releases/0.1.1/#bug-fixes","text":"The UI now supports non-ASCII characters in column names and column settings. The record page works when the primary key is not an integer. Mathesar can now support primary keys that are UUIDs. Access level permissions presented on the UI are now consistent with the API access levels. Deleting newly created records immediately no longer results in getting stuck in a loading screen. Empty columns are now inferred as text instead of boolean during import. The UI now displays an appropriate failure message when failing to delete rows. Mathesar no longer crashes when attempting to order rows by non-orderable columns. Row selection gets cleared correctly when a placeholder cell is selected.","title":"Bug fixes"},{"location":"releases/0.1.1/#improvements","text":"The UI cancels edits when users press the Esc key in table cells. Group headers with record summaries now have links to allow users to navigate to the associated record. Dropdown positioning is improved across the app, so that they do not overflow the browser window. A bunch of smaller visual and UX improvements made by our Google Summer of Code (GSoC) applicants. Full Changelog","title":"Improvements"},{"location":"releases/0.1.2/","text":"Mathesar 0.1.2 (alpha release) \u00b6 This release focuses on documenting additional options for installing Mathesar, some improvements to the user experience, and some bug fixes. We\u2019ve also added support for switching between multiple databases in the UI. Improvements to the UI \u00b6 Mathesar now supports switching between multiple databases using the UI. ( #2847 ) You can now copy data from the Mathesar UI to paste into other applications. ( #2773 ) The first non-primary key column is now highlighted when a new record is created. ( #2515 ) Form inputs are disabled when the form is being submitted. ( #2762 ) Action pane sidebars are now resizable. ( #2808 ) Table deletion now requires you to enter the table\u2019s name (to prevent accidental deletion). ( #2858 ) Long table names are now truncated and the full name is shown on hover. ( #2825 ) We\u2019ve disabled setting columns to JSON List and Map types using the UI until we have a better editing experience for cells of those types. ( #2772 ) Filter conditions can now be added and removed via the column header menu ( #2782 ) Cell level context menus now also show menu items related to the row and column. ( #2803 ) Improvements to installation \u00b6 We have documented additional installation options for Mathesar. Visit the Mathesar docs site to explore these options. ( #2809 #2826 #2824 ) A reference for Mathesar configuration options has been added to our documentation. ( #2824 ) We have documented connecting to databases running on localhost outside of Docker. ( #2819 ) The Mathesar Docker image is now standalone and can be started using the docker run command. ( #2848 ) Superuser and database passwords are now validated when using the guided install script. ( #2625 ) Bug fixes \u00b6 Mathesar no longer crashes when importing tables with long column names. ( #2725 ) Static default values can no longer be assigned to a dynamic default column. ( #2780 ) Column names no longer overlap when the browser window is resized. ( #2856 ) Databases removed from the configuration environment file won\u2019t show up in the UI anymore. ( #2891 ) Fixed inconsistencies with the foreign key column icon. ( #2768 ) API changes \u00b6 The URL for the database page has been moved from /<db_name>/ to /db/<db_name>/ to avoid conflicts with other Mathesar URLs. ( #2791 ) Maintenance \u00b6 A \u201csponsors\u201d section has been added to the README. ( #2710 ) Full Changelog","title":"0.1.2"},{"location":"releases/0.1.2/#mathesar-012-alpha-release","text":"This release focuses on documenting additional options for installing Mathesar, some improvements to the user experience, and some bug fixes. We\u2019ve also added support for switching between multiple databases in the UI.","title":"Mathesar 0.1.2 (alpha release)"},{"location":"releases/0.1.2/#improvements-to-the-ui","text":"Mathesar now supports switching between multiple databases using the UI. ( #2847 ) You can now copy data from the Mathesar UI to paste into other applications. ( #2773 ) The first non-primary key column is now highlighted when a new record is created. ( #2515 ) Form inputs are disabled when the form is being submitted. ( #2762 ) Action pane sidebars are now resizable. ( #2808 ) Table deletion now requires you to enter the table\u2019s name (to prevent accidental deletion). ( #2858 ) Long table names are now truncated and the full name is shown on hover. ( #2825 ) We\u2019ve disabled setting columns to JSON List and Map types using the UI until we have a better editing experience for cells of those types. ( #2772 ) Filter conditions can now be added and removed via the column header menu ( #2782 ) Cell level context menus now also show menu items related to the row and column. ( #2803 )","title":"Improvements to the UI"},{"location":"releases/0.1.2/#improvements-to-installation","text":"We have documented additional installation options for Mathesar. Visit the Mathesar docs site to explore these options. ( #2809 #2826 #2824 ) A reference for Mathesar configuration options has been added to our documentation. ( #2824 ) We have documented connecting to databases running on localhost outside of Docker. ( #2819 ) The Mathesar Docker image is now standalone and can be started using the docker run command. ( #2848 ) Superuser and database passwords are now validated when using the guided install script. ( #2625 )","title":"Improvements to installation"},{"location":"releases/0.1.2/#bug-fixes","text":"Mathesar no longer crashes when importing tables with long column names. ( #2725 ) Static default values can no longer be assigned to a dynamic default column. ( #2780 ) Column names no longer overlap when the browser window is resized. ( #2856 ) Databases removed from the configuration environment file won\u2019t show up in the UI anymore. ( #2891 ) Fixed inconsistencies with the foreign key column icon. ( #2768 )","title":"Bug fixes"},{"location":"releases/0.1.2/#api-changes","text":"The URL for the database page has been moved from /<db_name>/ to /db/<db_name>/ to avoid conflicts with other Mathesar URLs. ( #2791 )","title":"API changes"},{"location":"releases/0.1.2/#maintenance","text":"A \u201csponsors\u201d section has been added to the README. ( #2710 ) Full Changelog","title":"Maintenance"},{"location":"releases/0.1.3/","text":"Mathesar 0.1.3 (alpha release) \u00b6 This release: makes improvements to the installation process, adds support for sharing tables and explorations publicly, begins a framework for internationalization and translation of UI elements, moves DDL (SQL) logic to DB-layer functions to increase performance and reduce complexity, Improves summarization behavior in the data explorer, Adds support for importing JSON and Excel files, fixes user-reported issues, improves developer experience, fixes numerous small backend issues, fixes numerous small frontend issues, improves the user documentation, and improves the API documentation. What\u2019s Changed \u00b6 Installation improvements \u00b6 Add superuser creation page ( #3088 ) Create superuser page\u2019s stylings ( #3131 ) Remove the documented steps for creating a superuser from the command line ( #3134 ) Sharing tables and explorations \u00b6 Shareable links backend - Models, APIs, bypass auth for table requests ( #3092 ) Shareable links frontend - shared table consumer view ( #3093 ) Shared queries - Auth handling for query requests, frontend consumer view, API tests ( #3113 ) UI for creating & managing shares for tables and explorations ( #3127 ) Shares - regenerate link, general fixes ( #3133 ) Internationalization \u00b6 Install typesafe-i18n & translates one component ( #3099 ) RichText component ( #3100 ) Django templates translatable ( #3101 ) RSQLA1: Move DDL Operations to SQL functions \u00b6 Sql test setup ( #2903 ) Add SQL for column adding ( #2923 ) Move constraint creation to SQL ( #2952 ) Cleaner consolidated logic for adding constraints ( #2976 ) Column creation and duplication DDL 2 ( #2978 ) SQL for links creation ( #2986 ) Table create ddl ( #3016 ) Add DDL functions for altering columns ( #3097 ) SQL tests for schema ddl ( #3098 ) Remove pglast , use SQL function instead ( #3107 ) Move table splitting logic to SQL ( #3119 ) Tests for links & constraints ddl ( #3120 ) Properly detect identity columns ( #3125 ) Wiring sql functions for links and tables ( #3130 ) Tests for alter table ( #3139 ) Add constraint copying to column extration logic ( #3168 ) Summarization improvements \u00b6 Fix SQL Syntax error while summarizing Money, URI, Email column ( #2911 ) Add Sum aggregation function ( #2893 ) Add max aggregation function ( #2912 ) Add min aggregation function ( #2914 ) Add mean aggregation function ( #2916 ) Add median aggregation function ( #2932 ) Add Mode aggregation function ( #2940 ) Add Percentage True aggregation function ( #2945 ) Add Peak Time aggregation function. ( #2981 ) Add Peak Day of Week aggregation function. ( #3004 ) Add Peak Month aggregation function. ( #3006 ) Fix NaN:NaN error while aggregating duration column ( #3136 ) JSON and Excel file improvements \u00b6 Updated datafile model to store file type ( #2890 ) Added methods to import a perfect JSON ( #2906 ) Removed code duplication while importing datafiles ( #2926 ) Added tests to check importing json feature ( #2933 ) Added pandas and JSON normalization code ( #2968 ) Added api tests for importing JSON feature ( #2977 ) Added documentation for importing data into tables ( #2992 ) Extended import via copy-paste for JSON and updated UI ( #3008 ) Updated documentation navigation to show importing data doc ( #3023 ) Added max_level param for JSON import feature in the backend ( #3039 ) Added functionality to import perfect Excel ( #3059 ) Fixes for user-reported issues \u00b6 Help text: \u201cits linked tables\u201d (possessive adjective) ( #3086 ) DX improvements \u00b6 Remove .env from developer guide. ( #2925 ) Add SQL files to the pytest workflow ( #3082 ) New linting rule ( #3116 ) Repeat failed tests ( #3118 ) Add pldebugger to dev db ( #3126 ) Backend fixes and improvements \u00b6 Fix migrations ( #2899 ) Remove lazydict dependency ( #2993 ) Add API tests for multi-column primary key constraints ( #3025 ) Support unknown types (backend) ( #3040 ) Allow usage of local.py for untracked settings ( #3064 ) Fix the error when list aggregation on mathesar custom array ( #3106 ) Merge db list demo mode commits into release 0.1.3 ( #3171 ) Frontend fixes and improvements \u00b6 Schema updates in database page without reloading. Fixes #2736 ( #2745 ) Make columns re-orderable ( #2831 ) Fix caret out of view when using Input on Chrome ( #2836 ) Improve TSV serialization when copying cells ( #2867 ) Add max_split=1 to retrieve the column name ( #2956 ) Fix default value input stealing focus ( #2957 ) Auto-focus input when editing number/money cells ( #2975 ) Updated frontend to send a single bulk delete request instead of one request for each record ( #2985 ) Added margin between breadcrumb selector and bottom of the veiwport ( #3014 ) Date Input closes now on tab ( #3038 ) Scroll sheet all the way down when clicking the New Record button ( #3045 ) Use Truncate component in Record Selector table cells ( #3077 ) Copy formatted cell values to clipboard instead of raw values ( #3094 ) Fix regression: Move UserProfile to the App level context from Route level context ( #3175 ) Documentation \u00b6 Update README.md with troubleshooting instructions ( #2751 ) Update documentation styles for active and hover ( #2937 ) Added the command that generates the API documentation schema file to\u2026 ( #2970 ) Added the command to copy the .env file, to the DEVELOPER GUIDE ( #2972 ) Update demo\u2019s documentation ( #2996 ) Fix typo error in DEVELOPER_GUIDE.md ( #2999 ) Update build from source documentation ( #3029 ) Clean up import docs ( #3042 ) API documentation \u00b6 Integrated drf-spectacular library ( #2939 ) Improved the operationIds by implementing a post hook function ( #3021 ) Added OpenAPI spec for datafiles endpoint ( #3044 ) Added OpenAPI specification for databases endpoint ( #3047 ) Added OpenAPI specification for /schemas/ endpoint ( #3074 ) Full Changelog","title":"0.1.3"},{"location":"releases/0.1.3/#mathesar-013-alpha-release","text":"This release: makes improvements to the installation process, adds support for sharing tables and explorations publicly, begins a framework for internationalization and translation of UI elements, moves DDL (SQL) logic to DB-layer functions to increase performance and reduce complexity, Improves summarization behavior in the data explorer, Adds support for importing JSON and Excel files, fixes user-reported issues, improves developer experience, fixes numerous small backend issues, fixes numerous small frontend issues, improves the user documentation, and improves the API documentation.","title":"Mathesar 0.1.3 (alpha release)"},{"location":"releases/0.1.3/#whats-changed","text":"","title":"What's Changed"},{"location":"releases/0.1.3/#installation-improvements","text":"Add superuser creation page ( #3088 ) Create superuser page\u2019s stylings ( #3131 ) Remove the documented steps for creating a superuser from the command line ( #3134 )","title":"Installation improvements"},{"location":"releases/0.1.3/#sharing-tables-and-explorations","text":"Shareable links backend - Models, APIs, bypass auth for table requests ( #3092 ) Shareable links frontend - shared table consumer view ( #3093 ) Shared queries - Auth handling for query requests, frontend consumer view, API tests ( #3113 ) UI for creating & managing shares for tables and explorations ( #3127 ) Shares - regenerate link, general fixes ( #3133 )","title":"Sharing tables and explorations"},{"location":"releases/0.1.3/#internationalization","text":"Install typesafe-i18n & translates one component ( #3099 ) RichText component ( #3100 ) Django templates translatable ( #3101 )","title":"Internationalization"},{"location":"releases/0.1.3/#rsqla1-move-ddl-operations-to-sql-functions","text":"Sql test setup ( #2903 ) Add SQL for column adding ( #2923 ) Move constraint creation to SQL ( #2952 ) Cleaner consolidated logic for adding constraints ( #2976 ) Column creation and duplication DDL 2 ( #2978 ) SQL for links creation ( #2986 ) Table create ddl ( #3016 ) Add DDL functions for altering columns ( #3097 ) SQL tests for schema ddl ( #3098 ) Remove pglast , use SQL function instead ( #3107 ) Move table splitting logic to SQL ( #3119 ) Tests for links & constraints ddl ( #3120 ) Properly detect identity columns ( #3125 ) Wiring sql functions for links and tables ( #3130 ) Tests for alter table ( #3139 ) Add constraint copying to column extration logic ( #3168 )","title":"RSQLA1: Move DDL Operations to SQL functions"},{"location":"releases/0.1.3/#summarization-improvements","text":"Fix SQL Syntax error while summarizing Money, URI, Email column ( #2911 ) Add Sum aggregation function ( #2893 ) Add max aggregation function ( #2912 ) Add min aggregation function ( #2914 ) Add mean aggregation function ( #2916 ) Add median aggregation function ( #2932 ) Add Mode aggregation function ( #2940 ) Add Percentage True aggregation function ( #2945 ) Add Peak Time aggregation function. ( #2981 ) Add Peak Day of Week aggregation function. ( #3004 ) Add Peak Month aggregation function. ( #3006 ) Fix NaN:NaN error while aggregating duration column ( #3136 )","title":"Summarization improvements"},{"location":"releases/0.1.3/#json-and-excel-file-improvements","text":"Updated datafile model to store file type ( #2890 ) Added methods to import a perfect JSON ( #2906 ) Removed code duplication while importing datafiles ( #2926 ) Added tests to check importing json feature ( #2933 ) Added pandas and JSON normalization code ( #2968 ) Added api tests for importing JSON feature ( #2977 ) Added documentation for importing data into tables ( #2992 ) Extended import via copy-paste for JSON and updated UI ( #3008 ) Updated documentation navigation to show importing data doc ( #3023 ) Added max_level param for JSON import feature in the backend ( #3039 ) Added functionality to import perfect Excel ( #3059 )","title":"JSON and Excel file improvements"},{"location":"releases/0.1.3/#fixes-for-user-reported-issues","text":"Help text: \u201cits linked tables\u201d (possessive adjective) ( #3086 )","title":"Fixes for user-reported issues"},{"location":"releases/0.1.3/#dx-improvements","text":"Remove .env from developer guide. ( #2925 ) Add SQL files to the pytest workflow ( #3082 ) New linting rule ( #3116 ) Repeat failed tests ( #3118 ) Add pldebugger to dev db ( #3126 )","title":"DX improvements"},{"location":"releases/0.1.3/#backend-fixes-and-improvements","text":"Fix migrations ( #2899 ) Remove lazydict dependency ( #2993 ) Add API tests for multi-column primary key constraints ( #3025 ) Support unknown types (backend) ( #3040 ) Allow usage of local.py for untracked settings ( #3064 ) Fix the error when list aggregation on mathesar custom array ( #3106 ) Merge db list demo mode commits into release 0.1.3 ( #3171 )","title":"Backend fixes and improvements"},{"location":"releases/0.1.3/#frontend-fixes-and-improvements","text":"Schema updates in database page without reloading. Fixes #2736 ( #2745 ) Make columns re-orderable ( #2831 ) Fix caret out of view when using Input on Chrome ( #2836 ) Improve TSV serialization when copying cells ( #2867 ) Add max_split=1 to retrieve the column name ( #2956 ) Fix default value input stealing focus ( #2957 ) Auto-focus input when editing number/money cells ( #2975 ) Updated frontend to send a single bulk delete request instead of one request for each record ( #2985 ) Added margin between breadcrumb selector and bottom of the veiwport ( #3014 ) Date Input closes now on tab ( #3038 ) Scroll sheet all the way down when clicking the New Record button ( #3045 ) Use Truncate component in Record Selector table cells ( #3077 ) Copy formatted cell values to clipboard instead of raw values ( #3094 ) Fix regression: Move UserProfile to the App level context from Route level context ( #3175 )","title":"Frontend fixes and improvements"},{"location":"releases/0.1.3/#documentation","text":"Update README.md with troubleshooting instructions ( #2751 ) Update documentation styles for active and hover ( #2937 ) Added the command that generates the API documentation schema file to\u2026 ( #2970 ) Added the command to copy the .env file, to the DEVELOPER GUIDE ( #2972 ) Update demo\u2019s documentation ( #2996 ) Fix typo error in DEVELOPER_GUIDE.md ( #2999 ) Update build from source documentation ( #3029 ) Clean up import docs ( #3042 )","title":"Documentation"},{"location":"releases/0.1.3/#api-documentation","text":"Integrated drf-spectacular library ( #2939 ) Improved the operationIds by implementing a post hook function ( #3021 ) Added OpenAPI spec for datafiles endpoint ( #3044 ) Added OpenAPI specification for databases endpoint ( #3047 ) Added OpenAPI specification for /schemas/ endpoint ( #3074 ) Full Changelog","title":"API documentation"},{"location":"releases/0.1.4/","text":"Mathesar 0.1.4 \u00b6 Summary \u00b6 Mathesar 0.1.4 focuses on improving the installation and setup experience. This page provides a comprehensive list of all changes in the release. Upgrading to 0.1.4 \u00b6 See our guide on upgrading Mathesar to 0.1.4 . New Features \u00b6 UI for configuring database connections \u00b6 Now you can add, edit, and delete connections to multiple databases from within Mathesar\u2019s UI. Previously this was only possible via editing text-based configuration. #3170 #3223 #3299 #3309 #3319 #3326 #3341 #3348 #3349 #3352 #3354 #3356 #3368 #3377 #3387 Sample data loader \u00b6 When adding a new database connection, you can choose to load sample data into that database. Sample data will be contained within specific schemas and may be useful to help new users play with Mathesar\u2019s features. #3368 PostgreSQL column COMMENTs \u00b6 PostgreSQL COMMENT values on columns are now exposed via a read/write \u201cdescription\u201d field within Mathesar. This feature was previously available for schemas and tables and is now available for columns too. #3186 #3219 Text-only imports \u00b6 When importing CSV data, Mathesar now gives you the option to use TEXT as the database type for all columns. This choice speeds up the import for larger data sets by skipping the process of guessing colum types. #3050 We are still considering additional ways to improve performance when importing \u2014 especially for data sets with lots of columns. Reduced database privilege installations \u00b6 Mathesar can now be installed as long as the database role used during the installation has at least CONNECT and CREATE privileges on the database targeted by the installation. If you want to create a new database for Mathesar\u2019s use, the installation will (naturally) require a role with the CREATEDB privilege. #3117 Unified Mathesar Docker image \u00b6 The published Mathesar Docker image now contains a PostgreSQL server. This is used to provide a database backend in cases where Mathesar is started via Docker without being configured to connect to any other database. #3121 #3212 Metadata storage within SQLite \u00b6 We\u2019ve added experimental SQLite support for the storage of Mathesar metadata. This will allow brave (or foolish) users to run Mathesar with this lighter-weight DB when installing from scratch on Linux. #3203 #3225 #2778 Improved PostgreSQL compatibility \u00b6 Mathesar now officially supports, and is tested against, Postgres versions 13, 14, and 15. It\u2019s also possible (but not yet recommended) to run Mathesar using Postgres 16. #3206 Easier modification of sorting precedence \u00b6 When you have multiple sorting conditions applied to a table, you can now rearrange them via drag and drop to adjust the precedence of the sorting conditions. #3316 Cell values displayed within sidebar \u00b6 The table sidebar features a new \u201cCell\u201d tab to show the content of cells, simplifying the process of viewing large text cells. Groundwork \u00b6 We made significant progress towards internationalizing Mathesar\u2019s user interface. We expect to our next release to offer users the ability to toggle between English and Japanese. Subsequent releases will continue to add additional languages. #3102 #3103 #3104 #3302 #3321 #3337 #3340 #3350 #3389 We began some work that will help us eventually distribute Mathesar via a Debian .deb package. Some additional work remains but we hope to introduce this installation method in a future version. #3189 #3225 We implemented the backend side of a new feature to import Excel and JSON files through Mathesar\u2019s import UI. More work still remains to implement the frontend side of this feature. #3083 #3195 #3132 We took some baby steps towards building a system to automatically generate human-readable documentation for all our API endpoints. Significant work still remains. #3271 #3146 Documentation \u00b6 We improved and updated our documentation for installing and updating Mathesar. ( #3227 ) Bug fixes \u00b6 Tables having CHECK constraints are now usable within Mathesar. ( #3243 ) Records can now be inserted into tables without primary keys. ( #3252 ) We fixed inconsistent state when selecting a different column while editing a column\u2019s name. ( #3219 ) URL cells now retain their focus after a contained hyperlink is clicked. ( #3012 ) Searching for a record via a partially-entered date string no longer gives an error. ( #3343 ) The Database Page now shows loading and error indicators. ( #3351 ) The Schema Page now displays more detailed information about errors encountered when loading tables and explorations. ( #3323 ) Exclusion constraint violations now produce more helpful error messages. ( #3200 ) Files with missing or duplicate id values can now be imported without error. ( #3155 ) The record selector can now be closed by clicking on the overlay outside its modal. ( #3220 ) Help text for foreign key column data types is now more accurate. ( #3260 ) Users of Mathesar\u2019s public demo site will no longer see database connections listed for other demo users. ( #3129 ) More UI elements have visually distinctive focus states. ( #3313 ) Date formatting is applied to arrays of date values. ( #3325 ) On the record page, values within foreign key columns can now be set to NULL more intuitively. ( #3310 ) A visual layout overflow bug on the record page is fixed. ( #3303 ) Foreign keys referencing non-primary-key columns now display properly. ( #3239 ) Maintenance \u00b6 We made our CI pipeline more robust. ( #3254 ) We made some updates to our workflows and developer documentation to support improvements to our issue labeling scheme. ( #3338 #3298 #3280 #3336 ) We made some routine upgrades to dependencies and small adjustments to development tooling. ( #3214 #3353 #3334 #3201 #3295 #3156 #3234 #3229 #3317 ) We addressed regressions from work during this release. ( #3197 ) We improved error handling by preventing storing non-positive IDs for certain objects. ( #3177 ) We clarified the API behavior by specifying JSON-only requests ( #3090 ) We improved testing against DB objects with long names ( #3140 ) We updated our org name to reflect a change from \u201cCenter of Complex Interventions\u201d to \u201cMathesar Foundation\u201d. ( #3312 ) We made some improvements to our developer documentation. ( #3300 #3210 #3279 ) We improved our process for generating release notes. ( #3427 ) We resolved some merge conflicts after finalizing our previous release. ( #3190 )","title":"0.1.4"},{"location":"releases/0.1.4/#mathesar-014","text":"","title":"Mathesar 0.1.4"},{"location":"releases/0.1.4/#summary","text":"Mathesar 0.1.4 focuses on improving the installation and setup experience. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.4/#upgrading-to-014","text":"See our guide on upgrading Mathesar to 0.1.4 .","title":"Upgrading to 0.1.4"},{"location":"releases/0.1.4/#new-features","text":"","title":"New Features"},{"location":"releases/0.1.4/#ui-for-configuring-database-connections","text":"Now you can add, edit, and delete connections to multiple databases from within Mathesar\u2019s UI. Previously this was only possible via editing text-based configuration. #3170 #3223 #3299 #3309 #3319 #3326 #3341 #3348 #3349 #3352 #3354 #3356 #3368 #3377 #3387","title":"UI for configuring database connections"},{"location":"releases/0.1.4/#sample-data-loader","text":"When adding a new database connection, you can choose to load sample data into that database. Sample data will be contained within specific schemas and may be useful to help new users play with Mathesar\u2019s features. #3368","title":"Sample data loader"},{"location":"releases/0.1.4/#postgresql-column-comments","text":"PostgreSQL COMMENT values on columns are now exposed via a read/write \u201cdescription\u201d field within Mathesar. This feature was previously available for schemas and tables and is now available for columns too. #3186 #3219","title":"PostgreSQL column COMMENTs"},{"location":"releases/0.1.4/#text-only-imports","text":"When importing CSV data, Mathesar now gives you the option to use TEXT as the database type for all columns. This choice speeds up the import for larger data sets by skipping the process of guessing colum types. #3050 We are still considering additional ways to improve performance when importing \u2014 especially for data sets with lots of columns.","title":"Text-only imports"},{"location":"releases/0.1.4/#reduced-database-privilege-installations","text":"Mathesar can now be installed as long as the database role used during the installation has at least CONNECT and CREATE privileges on the database targeted by the installation. If you want to create a new database for Mathesar\u2019s use, the installation will (naturally) require a role with the CREATEDB privilege. #3117","title":"Reduced database privilege installations"},{"location":"releases/0.1.4/#unified-mathesar-docker-image","text":"The published Mathesar Docker image now contains a PostgreSQL server. This is used to provide a database backend in cases where Mathesar is started via Docker without being configured to connect to any other database. #3121 #3212","title":"Unified Mathesar Docker image"},{"location":"releases/0.1.4/#metadata-storage-within-sqlite","text":"We\u2019ve added experimental SQLite support for the storage of Mathesar metadata. This will allow brave (or foolish) users to run Mathesar with this lighter-weight DB when installing from scratch on Linux. #3203 #3225 #2778","title":"Metadata storage within SQLite"},{"location":"releases/0.1.4/#improved-postgresql-compatibility","text":"Mathesar now officially supports, and is tested against, Postgres versions 13, 14, and 15. It\u2019s also possible (but not yet recommended) to run Mathesar using Postgres 16. #3206","title":"Improved PostgreSQL compatibility"},{"location":"releases/0.1.4/#easier-modification-of-sorting-precedence","text":"When you have multiple sorting conditions applied to a table, you can now rearrange them via drag and drop to adjust the precedence of the sorting conditions. #3316","title":"Easier modification of sorting precedence"},{"location":"releases/0.1.4/#cell-values-displayed-within-sidebar","text":"The table sidebar features a new \u201cCell\u201d tab to show the content of cells, simplifying the process of viewing large text cells.","title":"Cell values displayed within sidebar"},{"location":"releases/0.1.4/#groundwork","text":"We made significant progress towards internationalizing Mathesar\u2019s user interface. We expect to our next release to offer users the ability to toggle between English and Japanese. Subsequent releases will continue to add additional languages. #3102 #3103 #3104 #3302 #3321 #3337 #3340 #3350 #3389 We began some work that will help us eventually distribute Mathesar via a Debian .deb package. Some additional work remains but we hope to introduce this installation method in a future version. #3189 #3225 We implemented the backend side of a new feature to import Excel and JSON files through Mathesar\u2019s import UI. More work still remains to implement the frontend side of this feature. #3083 #3195 #3132 We took some baby steps towards building a system to automatically generate human-readable documentation for all our API endpoints. Significant work still remains. #3271 #3146","title":"Groundwork"},{"location":"releases/0.1.4/#documentation","text":"We improved and updated our documentation for installing and updating Mathesar. ( #3227 )","title":"Documentation"},{"location":"releases/0.1.4/#bug-fixes","text":"Tables having CHECK constraints are now usable within Mathesar. ( #3243 ) Records can now be inserted into tables without primary keys. ( #3252 ) We fixed inconsistent state when selecting a different column while editing a column\u2019s name. ( #3219 ) URL cells now retain their focus after a contained hyperlink is clicked. ( #3012 ) Searching for a record via a partially-entered date string no longer gives an error. ( #3343 ) The Database Page now shows loading and error indicators. ( #3351 ) The Schema Page now displays more detailed information about errors encountered when loading tables and explorations. ( #3323 ) Exclusion constraint violations now produce more helpful error messages. ( #3200 ) Files with missing or duplicate id values can now be imported without error. ( #3155 ) The record selector can now be closed by clicking on the overlay outside its modal. ( #3220 ) Help text for foreign key column data types is now more accurate. ( #3260 ) Users of Mathesar\u2019s public demo site will no longer see database connections listed for other demo users. ( #3129 ) More UI elements have visually distinctive focus states. ( #3313 ) Date formatting is applied to arrays of date values. ( #3325 ) On the record page, values within foreign key columns can now be set to NULL more intuitively. ( #3310 ) A visual layout overflow bug on the record page is fixed. ( #3303 ) Foreign keys referencing non-primary-key columns now display properly. ( #3239 )","title":"Bug fixes"},{"location":"releases/0.1.4/#maintenance","text":"We made our CI pipeline more robust. ( #3254 ) We made some updates to our workflows and developer documentation to support improvements to our issue labeling scheme. ( #3338 #3298 #3280 #3336 ) We made some routine upgrades to dependencies and small adjustments to development tooling. ( #3214 #3353 #3334 #3201 #3295 #3156 #3234 #3229 #3317 ) We addressed regressions from work during this release. ( #3197 ) We improved error handling by preventing storing non-positive IDs for certain objects. ( #3177 ) We clarified the API behavior by specifying JSON-only requests ( #3090 ) We improved testing against DB objects with long names ( #3140 ) We updated our org name to reflect a change from \u201cCenter of Complex Interventions\u201d to \u201cMathesar Foundation\u201d. ( #3312 ) We made some improvements to our developer documentation. ( #3300 #3210 #3279 ) We improved our process for generating release notes. ( #3427 ) We resolved some merge conflicts after finalizing our previous release. ( #3190 )","title":"Maintenance"},{"location":"releases/0.1.5/","text":"Mathesar 0.1.5 \u00b6 Summary \u00b6 Mathesar 0.1.5 is a small, bug fix release. This page provides a comprehensive list of all changes in the release. Upgrading to Mathesar 0.1.5 \u00b6 See our guide on upgrading Mathesar to 0.1.5 . Improvements \u00b6 Improve performance of loading sample data when adding a new connection #3448 Constrain the width of the connections page #3439 Bug fixes \u00b6 Fix \u201cPage not found\u201d error when viewing a shared exploration #3456 Fix bugs preventing Mathesar from running in demo mode #3459 Fix timeout when setting up a new database with sample data in installations with higher network latency #3448 Restore display of column type icons within shared tables #3456 Temporarily hide link to missing docs page #3451 Fix active cell displaying above row header cell #3382 Documentation \u00b6 Improve docs on using an external PostgreSQL server for Mathesar\u2019s internal database #3457 Add embedded video walkthrough within installation steps #3437 #3443 0.1.5 release notes #3449 Maintenance \u00b6 Improve our release notes helper script #3435 Post-release cleanup #3432","title":"0.1.5"},{"location":"releases/0.1.5/#mathesar-015","text":"","title":"Mathesar 0.1.5"},{"location":"releases/0.1.5/#summary","text":"Mathesar 0.1.5 is a small, bug fix release. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.5/#upgrading-to-mathesar-015","text":"See our guide on upgrading Mathesar to 0.1.5 .","title":"Upgrading to Mathesar 0.1.5"},{"location":"releases/0.1.5/#improvements","text":"Improve performance of loading sample data when adding a new connection #3448 Constrain the width of the connections page #3439","title":"Improvements"},{"location":"releases/0.1.5/#bug-fixes","text":"Fix \u201cPage not found\u201d error when viewing a shared exploration #3456 Fix bugs preventing Mathesar from running in demo mode #3459 Fix timeout when setting up a new database with sample data in installations with higher network latency #3448 Restore display of column type icons within shared tables #3456 Temporarily hide link to missing docs page #3451 Fix active cell displaying above row header cell #3382","title":"Bug fixes"},{"location":"releases/0.1.5/#documentation","text":"Improve docs on using an external PostgreSQL server for Mathesar\u2019s internal database #3457 Add embedded video walkthrough within installation steps #3437 #3443 0.1.5 release notes #3449","title":"Documentation"},{"location":"releases/0.1.5/#maintenance","text":"Improve our release notes helper script #3435 Post-release cleanup #3432","title":"Maintenance"},{"location":"releases/0.1.6/","text":"Mathesar 0.1.6 \u00b6 Summary \u00b6 Mathesar 0.1.6 introduces Japanese localization of the UI and adds better support for working with long text in individual record pages. Improvements for administrators include compatibility with Python 3.10 and 3.11, support for databases running PostgreSQL 16, and the removal of npm and nodejs as dependencies when installing from scratch. This page provides a comprehensive list of all changes in the release. Upgrading to 0.1.6 \u00b6 See our guide on upgrading Mathesar to 0.1.6 . Improvements \u00b6 You can now configure Mathesar\u2019s UI to display in Japanese \u00b6 The language setting is stored per-user and can be modified when logging in or when editing a user. This changes the text displayed on buttons and other UI elements within Mathesar. It does not change the display of data within your database (e.g. table names, column names, and cell values). We are hoping to support more languages beyond English and Japanese eventually. Please reach out to us if your are interested in helping to add more translations! #3486 , #3484 , #3483 , #3472 , #3501 Text fields now auto-expands on the record page to accommodate longer texts \u00b6 Before All text inputs on the record page had the same height, regardless of their content. After All text inputs in record page dynamically adjust to accommodate the content seamlessly. #3470 , #3488 , #3495 Mathesar is now compatible with Python versions: 3.10 and 3.11 along with 3.9 \u00b6 Mathesar now officially supports Python versions 3.10 and 3.11, in addition to the existing 3.9 compatibility. This will provide great flexibility while building Mathesar from source on an OS that natively ships with relatively newer versions of Python. #3478 , #3499 , #3503 , #3504 Mathesar is now compatible with PostgreSQL 16 \u00b6 Mathesar now officially supports, and is tested against, Postgres versions 13, 14, 15 and 16. #3480 NodeJS is no longer a requirement for building Mathesar from source \u00b6 We removed NodeJS as a dependency in favour of providing users with pre-built static assest for building Mathesar from source. #3489 Bug fix \u00b6 Fixed connection creation failures due to schema name collisions while adding provided sample schema(s) in the database #3490 Documentation \u00b6 Documented upgrade instructions for v0.1.6 #3507 0.1.6 release notes #3506 Documented mathesar-debug image for Docker based installations #3513 Fixed upgrade instructions for v0.1.5 #3469 Updated Mathesar\u2019s version number in docs #3476 Added MkDocs edit URI #3482 Removed stale code coverage badge #3491 Maintenance \u00b6 Added a health check endpoint for Mathesar #3479 Bumped Django from 4.2.8 to 4.2.10 #3492 Removed NodeJS from Docker production image #3474 Post release cleanup #3463","title":"0.1.6"},{"location":"releases/0.1.6/#mathesar-016","text":"","title":"Mathesar 0.1.6"},{"location":"releases/0.1.6/#summary","text":"Mathesar 0.1.6 introduces Japanese localization of the UI and adds better support for working with long text in individual record pages. Improvements for administrators include compatibility with Python 3.10 and 3.11, support for databases running PostgreSQL 16, and the removal of npm and nodejs as dependencies when installing from scratch. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.6/#upgrading-to-016","text":"See our guide on upgrading Mathesar to 0.1.6 .","title":"Upgrading to 0.1.6"},{"location":"releases/0.1.6/#improvements","text":"","title":"Improvements"},{"location":"releases/0.1.6/#you-can-now-configure-mathesars-ui-to-display-in-japanese","text":"The language setting is stored per-user and can be modified when logging in or when editing a user. This changes the text displayed on buttons and other UI elements within Mathesar. It does not change the display of data within your database (e.g. table names, column names, and cell values). We are hoping to support more languages beyond English and Japanese eventually. Please reach out to us if your are interested in helping to add more translations! #3486 , #3484 , #3483 , #3472 , #3501","title":"You can now configure Mathesar's UI to display in Japanese"},{"location":"releases/0.1.6/#text-fields-now-auto-expands-on-the-record-page-to-accommodate-longer-texts","text":"Before All text inputs on the record page had the same height, regardless of their content. After All text inputs in record page dynamically adjust to accommodate the content seamlessly. #3470 , #3488 , #3495","title":"Text fields now auto-expands on the record page to accommodate longer texts"},{"location":"releases/0.1.6/#mathesar-is-now-compatible-with-python-versions-310-and-311-along-with-39","text":"Mathesar now officially supports Python versions 3.10 and 3.11, in addition to the existing 3.9 compatibility. This will provide great flexibility while building Mathesar from source on an OS that natively ships with relatively newer versions of Python. #3478 , #3499 , #3503 , #3504","title":"Mathesar is now compatible with Python versions: 3.10 and 3.11 along with 3.9"},{"location":"releases/0.1.6/#mathesar-is-now-compatible-with-postgresql-16","text":"Mathesar now officially supports, and is tested against, Postgres versions 13, 14, 15 and 16. #3480","title":"Mathesar is now compatible with PostgreSQL 16"},{"location":"releases/0.1.6/#nodejs-is-no-longer-a-requirement-for-building-mathesar-from-source","text":"We removed NodeJS as a dependency in favour of providing users with pre-built static assest for building Mathesar from source. #3489","title":"NodeJS is no longer a requirement for building Mathesar from source"},{"location":"releases/0.1.6/#bug-fix","text":"Fixed connection creation failures due to schema name collisions while adding provided sample schema(s) in the database #3490","title":"Bug fix"},{"location":"releases/0.1.6/#documentation","text":"Documented upgrade instructions for v0.1.6 #3507 0.1.6 release notes #3506 Documented mathesar-debug image for Docker based installations #3513 Fixed upgrade instructions for v0.1.5 #3469 Updated Mathesar\u2019s version number in docs #3476 Added MkDocs edit URI #3482 Removed stale code coverage badge #3491","title":"Documentation"},{"location":"releases/0.1.6/#maintenance","text":"Added a health check endpoint for Mathesar #3479 Bumped Django from 4.2.8 to 4.2.10 #3492 Removed NodeJS from Docker production image #3474 Post release cleanup #3463","title":"Maintenance"},{"location":"releases/0.1.7/","text":"Mathesar 0.1.7 \u00b6 Summary \u00b6 Mathesar 0.1.7 introduces linked table navigation from the data cell context menu. This release also fixes the regeneration of exploration share URLs and removes the \u2018group\u2019 suffix in the Data Explorer column names. This page provides a comprehensive list of all changes in the release. Upgrading to 0.1.7 \u00b6 See our guide on upgrading Mathesar to 0.1.7 . Improvements \u00b6 Linked Table Navigation from Cell Context Menu \u00b6 Users can now navigate to linked tables from the cell context menu, providing a more seamless experience when working with linked data. #3526 Bug fixes \u00b6 Fixed Regeneration of Exploration Share URL \u00b6 Fixed an issue where clicking \u201cRegenerate Link\u201d for a shared exploration failed to create a new URL and resulted in a 404 API request. Now, users will see a successful API call with a new, regenerated share URL. #3521 Remove \u2018group\u2019 Suffix in Data Explorer \u00b6 Resolved an issue in the Data Explorer where the grouping column name was incorrectly suffixed with \u2018group\u2019. Now, the original column names are preserved when summarizing data. #3357 Documentation \u00b6 Upgrade Instructions for 0.1.7 #3534 Maintenance \u00b6 Bump Django from 4.2.10 to 4.2.11 #3496 Made Release Notes Script Portable #3529 Removed Stray Changes Post Script Update #3530 Integrated Changes from Previous Release Preparation #3517 Added Demo Target in Dockerfile for Future Deployments #3523 New RPC Endpoint Implementation for Superuser Functions #3524","title":"0.1.7"},{"location":"releases/0.1.7/#mathesar-017","text":"","title":"Mathesar 0.1.7"},{"location":"releases/0.1.7/#summary","text":"Mathesar 0.1.7 introduces linked table navigation from the data cell context menu. This release also fixes the regeneration of exploration share URLs and removes the \u2018group\u2019 suffix in the Data Explorer column names. This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/0.1.7/#upgrading-to-017","text":"See our guide on upgrading Mathesar to 0.1.7 .","title":"Upgrading to 0.1.7"},{"location":"releases/0.1.7/#improvements","text":"","title":"Improvements"},{"location":"releases/0.1.7/#linked-table-navigation-from-cell-context-menu","text":"Users can now navigate to linked tables from the cell context menu, providing a more seamless experience when working with linked data. #3526","title":"Linked Table Navigation from Cell Context Menu"},{"location":"releases/0.1.7/#bug-fixes","text":"","title":"Bug fixes"},{"location":"releases/0.1.7/#fixed-regeneration-of-exploration-share-url","text":"Fixed an issue where clicking \u201cRegenerate Link\u201d for a shared exploration failed to create a new URL and resulted in a 404 API request. Now, users will see a successful API call with a new, regenerated share URL. #3521","title":"Fixed Regeneration of Exploration Share URL"},{"location":"releases/0.1.7/#remove-group-suffix-in-data-explorer","text":"Resolved an issue in the Data Explorer where the grouping column name was incorrectly suffixed with \u2018group\u2019. Now, the original column names are preserved when summarizing data. #3357","title":"Remove 'group' Suffix in Data Explorer"},{"location":"releases/0.1.7/#documentation","text":"Upgrade Instructions for 0.1.7 #3534","title":"Documentation"},{"location":"releases/0.1.7/#maintenance","text":"Bump Django from 4.2.10 to 4.2.11 #3496 Made Release Notes Script Portable #3529 Removed Stray Changes Post Script Update #3530 Integrated Changes from Previous Release Preparation #3517 Added Demo Target in Dockerfile for Future Deployments #3523 New RPC Endpoint Implementation for Superuser Functions #3524","title":"Maintenance"},{"location":"releases/TEMPLATE/","text":"Mathesar VERSION \u00b6 Summary \u00b6 TODO This page provides a comprehensive list of all changes in the release. Upgrading to VERSION \u00b6 TODO","title":"Mathesar __VERSION__"},{"location":"releases/TEMPLATE/#mathesar-version","text":"","title":"Mathesar VERSION"},{"location":"releases/TEMPLATE/#summary","text":"TODO This page provides a comprehensive list of all changes in the release.","title":"Summary"},{"location":"releases/TEMPLATE/#upgrading-to-version","text":"TODO","title":"Upgrading to VERSION"},{"location":"snippets/docker-compose-prerequisites/","text":"Operating System \u00b6 You can install Mathesar using this method on Linux, MacOS, and Windows. Software \u00b6 You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Docker compose prerequisites"},{"location":"snippets/docker-compose-prerequisites/#operating-system","text":"You can install Mathesar using this method on Linux, MacOS, and Windows.","title":"Operating System"},{"location":"snippets/docker-compose-prerequisites/#software","text":"You\u2019ll need to install the following software before you install Mathesar: Docker v23+ Docker Compose v2.10+ If you\u2019re installing on Windows: Ensure you have WSL installed Turn on Docker Desktop WSL 2, see Docker docs for more information","title":"Software"},{"location":"snippets/uninstall-schemas/","text":"Remove Mathesar internal schemas. If you\u2019d like to continue using your PostgreSQL database , you\u2019ll need to remove the schemas created for Mathesar\u2019s use during installation. You can remove them from the database as follows: Connect to the database. psql -h <DB HOSTNAME> -p <DB PORT> -U <DB_USER> <DB_NAME> Delete the types schema. DROP SCHEMA mathesar_types CASCADE ; Deleting this schema will also delete any database objects that depend on it. This should not be an issue if you don\u2019t have any data using Mathesar\u2019s custom data types. Delete the function schemas. DROP SCHEMA msar CASCADE ; DROP SCHEMA __msar CASCADE ;","title":"Uninstall schemas"},{"location":"user-guide/","text":"Using Mathesar \u00b6 Welcome! At this point, we assume you\u2019ve installed Mathesar successfully and have logged into the web UI. If you\u2019ve connected Mathesar to an existing database, you should see all your schemas once you log in, and you can work with them as you please. If you\u2019re starting from scratch, we recommend creating a new schema .","title":"Introduction"},{"location":"user-guide/#using-mathesar","text":"Welcome! At this point, we assume you\u2019ve installed Mathesar successfully and have logged into the web UI. If you\u2019ve connected Mathesar to an existing database, you should see all your schemas once you log in, and you can work with them as you please. If you\u2019re starting from scratch, we recommend creating a new schema .","title":"Using Mathesar"},{"location":"user-guide/glossary/","text":"Glossary \u00b6 Internal database \u00b6 The \u201cinternal database\u201d holds Mathesar-specific metadata about the actual data (which lives in the user database ). Examples of such metadata include: Exploration definitions Column display formatting settings Record summary template customizations Custom column ordering Each Mathesar installation requires one and only one internal database, and PostgreSQL and SQLite are both supported. User database \u00b6 The data you see within Mathesar lives in the \u201cuser database\u201d, which must use PostgreSQL. Each Mathesar installation can connect to multiple user databases, potentially on different servers. Mathesar also uses an internal database to store metadata.","title":"Glossary"},{"location":"user-guide/glossary/#glossary","text":"","title":"Glossary"},{"location":"user-guide/glossary/#internal-db","text":"The \u201cinternal database\u201d holds Mathesar-specific metadata about the actual data (which lives in the user database ). Examples of such metadata include: Exploration definitions Column display formatting settings Record summary template customizations Custom column ordering Each Mathesar installation requires one and only one internal database, and PostgreSQL and SQLite are both supported.","title":"Internal database"},{"location":"user-guide/glossary/#user-db","text":"The data you see within Mathesar lives in the \u201cuser database\u201d, which must use PostgreSQL. Each Mathesar installation can connect to multiple user databases, potentially on different servers. Mathesar also uses an internal database to store metadata.","title":"User database"},{"location":"user-guide/importing-data/","text":"Importing data into Mathesar \u00b6 Mathesar allows importing data in CSV and JSON format. It also attempts to automatically infer the data type of the columns. Importing CSV data \u00b6 Delimiters \u00b6 Fields in the CSV data may be delimited by any of the following characters: Name Character Notes Comma , A traditional CSV file (a \u201c C omma S eparated V alue\u201d document) Tab (not printable) This is sometimes referred to as a TSV file (a \u201c T ab S eparated V alue\u201d document) Semicolon ; Colon : Pipe | Header rows \u00b6 By default, Mathesar will use the first row of CSV data to name the columns. If you un-check \u201cUse first row as header\u201d , then Mathesar will generate default names for the columns which you can edit later. Importing JSON data \u00b6 The JSON data must be structured in one of the following ways: An array of objects Each object produces one row in the table, and the object keys become column names. If a key is present is only one object, then the values for that column will be NULL in all other rows. [ { \"first_name\" : \"Matt\" , \"last_name\" : \"Murdock\" , \"gender\" : \"Male\" , \"friends\" : [ \"Stick\" , \"Foggy\" ] }, { \"first_name\" : \"John\" , \"last_name\" : \"Doe\" , \"email\" : \"jd@example.org\" , \"gender\" : \"Male\" } ] A single object This is similar to above but produces a table with only one row. { \"name\" : \"John\" , \"age\" : 21 , \"friends\" : [ \"Bob\" , \"Mary\" ] } Our goal is to support whatever pandas.json_normalize supports.","title":"Importing data"},{"location":"user-guide/importing-data/#importing-data-into-mathesar","text":"Mathesar allows importing data in CSV and JSON format. It also attempts to automatically infer the data type of the columns.","title":"Importing data into Mathesar"},{"location":"user-guide/importing-data/#csv","text":"","title":"Importing CSV data"},{"location":"user-guide/importing-data/#delimiters","text":"Fields in the CSV data may be delimited by any of the following characters: Name Character Notes Comma , A traditional CSV file (a \u201c C omma S eparated V alue\u201d document) Tab (not printable) This is sometimes referred to as a TSV file (a \u201c T ab S eparated V alue\u201d document) Semicolon ; Colon : Pipe |","title":"Delimiters"},{"location":"user-guide/importing-data/#header-rows","text":"By default, Mathesar will use the first row of CSV data to name the columns. If you un-check \u201cUse first row as header\u201d , then Mathesar will generate default names for the columns which you can edit later.","title":"Header rows"},{"location":"user-guide/importing-data/#json","text":"The JSON data must be structured in one of the following ways: An array of objects Each object produces one row in the table, and the object keys become column names. If a key is present is only one object, then the values for that column will be NULL in all other rows. [ { \"first_name\" : \"Matt\" , \"last_name\" : \"Murdock\" , \"gender\" : \"Male\" , \"friends\" : [ \"Stick\" , \"Foggy\" ] }, { \"first_name\" : \"John\" , \"last_name\" : \"Doe\" , \"email\" : \"jd@example.org\" , \"gender\" : \"Male\" } ] A single object This is similar to above but produces a table with only one row. { \"name\" : \"John\" , \"age\" : 21 , \"friends\" : [ \"Bob\" , \"Mary\" ] } Our goal is to support whatever pandas.json_normalize supports.","title":"Importing JSON data"},{"location":"user-guide/syncing-db/","text":"Syncing Database Changes \u00b6 Mathesar is designed to be used in tandem with other database tools. This means that if you make changes to your database structure or data outside of Mathesar, those changes will be reflected in Mathesar\u2019s UI. If you make structural changes to the database outside Mathesar (e.g. using another tool to add a schema, table, or column), those changes will not be reflected in Mathesar until you manually sync them. You can sync them using the \u201cSync Database Changes\u201d button in the database homepage. External changes to data (e.g. adding, editing, or deleting records ) will be automatically reflected without clicking this button.","title":"Syncing database changes"},{"location":"user-guide/syncing-db/#syncing-database-changes","text":"Mathesar is designed to be used in tandem with other database tools. This means that if you make changes to your database structure or data outside of Mathesar, those changes will be reflected in Mathesar\u2019s UI. If you make structural changes to the database outside Mathesar (e.g. using another tool to add a schema, table, or column), those changes will not be reflected in Mathesar until you manually sync them. You can sync them using the \u201cSync Database Changes\u201d button in the database homepage. External changes to data (e.g. adding, editing, or deleting records ) will be automatically reflected without clicking this button.","title":"Syncing Database Changes"},{"location":"user-guide/users/","text":"Users & Access Levels \u00b6 Mathesar allows you to set up users with different access levels. A user\u2019s access levels determine what they can do with the data managed in Mathesar. Mathesar\u2019s installation process includes setting up the first user. This user is an Admin . Managing Users \u00b6 Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Only Admins can add new users. Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. The user will be prompted to change the password when they log in for the first time. User Types \u00b6 Users can be either Admin or Standard users. Admin users \u00b6 Admin users: can manage other users (view, add, edit, delete) have Manager permissions on all databases and schemas You cannot set granular permissions for an Admin user. Standard users \u00b6 By default, Standard users cannot see anything in Mathesar. They will need to be granted database or schema roles individually. Database Roles \u00b6 There are three levels of database roles: Managers own the database. They can edit all data in the database, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the database. Editors can edit all data in the database, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the database. They cannot make any changes. Manager \u00b6 Receives Manager permissions on all schemas in the database. Can view, add, and remove other users\u2019 access to the database. Can view, add, edit, and remove any schema in the database. Can view, add, edit, and remove any table in the database. Can view, add, edit, and remove any column in the database. Can view, add, edit, and remove any constraint in the database. Can view, add, edit, and remove any record in the database. Can view, add, edit, and remove any exploration in the database. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions Editor \u00b6 Receives Editor permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view, add, edit, and remove any exploration in the database. Can view, add, edit, and remove any record in the database. Viewer \u00b6 Receives Viewer permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view any exploration in the database. Can use the Data Explorer to create ad-hoc explorations using data in the database, but cannot save them. Managing Database Roles \u00b6 Note Only Admins and Database Managers can manage access to a database. Click on the Mathesar logo on the top left of the application to go to the database page. Click on the Manage Access button. Schema Roles \u00b6 There are three levels of schema roles: Managers own the schema. They can edit all data in the schema, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the schema. Editors can edit all data in the schema, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the schema. They cannot make any changes. Manager \u00b6 Can view, add, and remove other users\u2019 access to the schema. Can view, add, edit, and remove any schema in the schema. Can view, add, edit, and remove any table in the schema. Can view, add, edit, and remove any column in the schema. Can view, add, edit, and remove any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions Editor \u00b6 Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Viewer \u00b6 Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view any exploration in the schema. Can use the Data Explorer to create ad-hoc explorations using data in the schema, but cannot save them. Managing Schema Roles \u00b6 Note Only Admins , Database Managers , and Schema Managers can manage access to a schema. Click on the Mathesar logo on the top left of the application to go to the database page. Select the appropriate schema from the list to navigate to the schema\u2019s homepage. Click on the Manage Access button. Order of Precedence \u00b6 If a user has both a Database Role and a Schema Role for a schema within the same database, the Schema Role will only have an effect if it grants more permissions. Examples: If a user is a Database Manager but has Viewer permissions on a given schema, the schema role has no effect. If a user is a Database Editor but has Manager permissions on a given schema, the schema role will take precedence.","title":"Users & access levels"},{"location":"user-guide/users/#users-access-levels","text":"Mathesar allows you to set up users with different access levels. A user\u2019s access levels determine what they can do with the data managed in Mathesar. Mathesar\u2019s installation process includes setting up the first user. This user is an Admin .","title":"Users &amp; Access Levels"},{"location":"user-guide/users/#managing-users","text":"Click on the gear icon on the top right of the application and select Administration . In the left sidebar, click on Users . Note Only Admins can add new users. Mathesar does not send invitation emails to new users (yet). You\u2019ll need to send the user their username and password yourself. The user will be prompted to change the password when they log in for the first time.","title":"Managing Users"},{"location":"user-guide/users/#user-types","text":"Users can be either Admin or Standard users.","title":"User Types"},{"location":"user-guide/users/#admin-users","text":"Admin users: can manage other users (view, add, edit, delete) have Manager permissions on all databases and schemas You cannot set granular permissions for an Admin user.","title":"Admin users"},{"location":"user-guide/users/#standard-users","text":"By default, Standard users cannot see anything in Mathesar. They will need to be granted database or schema roles individually.","title":"Standard users"},{"location":"user-guide/users/#database-roles","text":"There are three levels of database roles: Managers own the database. They can edit all data in the database, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the database. Editors can edit all data in the database, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the database. They cannot make any changes.","title":"Database Roles"},{"location":"user-guide/users/#manager","text":"Receives Manager permissions on all schemas in the database. Can view, add, and remove other users\u2019 access to the database. Can view, add, edit, and remove any schema in the database. Can view, add, edit, and remove any table in the database. Can view, add, edit, and remove any column in the database. Can view, add, edit, and remove any constraint in the database. Can view, add, edit, and remove any record in the database. Can view, add, edit, and remove any exploration in the database. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions","title":"Manager"},{"location":"user-guide/users/#editor","text":"Receives Editor permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view, add, edit, and remove any exploration in the database. Can view, add, edit, and remove any record in the database.","title":"Editor"},{"location":"user-guide/users/#viewer","text":"Receives Viewer permissions on all schemas in the database. Can view any schema in the database. Can view any table in the database. Can view any column in the database. Can view any constraint in the database. Can view any exploration in the database. Can use the Data Explorer to create ad-hoc explorations using data in the database, but cannot save them.","title":"Viewer"},{"location":"user-guide/users/#managing-database-roles","text":"Note Only Admins and Database Managers can manage access to a database. Click on the Mathesar logo on the top left of the application to go to the database page. Click on the Manage Access button.","title":"Managing Database Roles"},{"location":"user-guide/users/#schema-roles","text":"There are three levels of schema roles: Managers own the schema. They can edit all data in the schema, as well as edit the structure of data (e.g. create tables, add and remove columns, etc.). They also manage access to the schema. Editors can edit all data in the schema, but cannot change the underlying data structures or manage access. Viewers have read-only access to all data in the schema. They cannot make any changes.","title":"Schema Roles"},{"location":"user-guide/users/#manager_1","text":"Can view, add, and remove other users\u2019 access to the schema. Can view, add, edit, and remove any schema in the schema. Can view, add, edit, and remove any table in the schema. Can view, add, edit, and remove any column in the schema. Can view, add, edit, and remove any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema. Can perform \u201cextract column\u201d and \u201cmove column\u201d actions","title":"Manager"},{"location":"user-guide/users/#editor_1","text":"Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view, add, edit, and remove any record in the schema. Can view, add, edit, and remove any exploration in the schema.","title":"Editor"},{"location":"user-guide/users/#viewer_1","text":"Can view any table in the schema. Can view any column in the schema. Can view any constraint in the schema. Can view any exploration in the schema. Can use the Data Explorer to create ad-hoc explorations using data in the schema, but cannot save them.","title":"Viewer"},{"location":"user-guide/users/#managing-schema-roles","text":"Note Only Admins , Database Managers , and Schema Managers can manage access to a schema. Click on the Mathesar logo on the top left of the application to go to the database page. Select the appropriate schema from the list to navigate to the schema\u2019s homepage. Click on the Manage Access button.","title":"Managing Schema Roles"},{"location":"user-guide/users/#order-of-precedence","text":"If a user has both a Database Role and a Schema Role for a schema within the same database, the Schema Role will only have an effect if it grants more permissions. Examples: If a user is a Database Manager but has Viewer permissions on a given schema, the schema role has no effect. If a user is a Database Editor but has Manager permissions on a given schema, the schema role will take precedence.","title":"Order of Precedence"}]}