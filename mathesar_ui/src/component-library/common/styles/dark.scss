// ********************************************
// DARK MODE
// ********************************************

// Utility functions
@function adjust-lightness($color, $delta) {
  @if type-of($delta) == "number" {
    @if $delta > 0 {
      @return lighten($color, $delta);
    } @else {
      @return darken($color, abs($delta));
    }
  } @else {
    @warn "adjust-lightness() expects a numeric percentage, got #{$delta}";
    @return $color;
  }
}

// ------------------------------------------
// Base color
// ------------------------------------------

$base-hue: 230;
$base-sat: 4%;

// ------------------------------------------
// Surfaces
// ------------------------------------------

// Colors, ordered by elevation / lightness
$surface-colors: (
  "inset": hsl($base-hue, $base-sat, 0%),
  "input": hsl($base-hue, $base-sat, 1%),
  "base": hsl($base-hue, $base-sat, 2%),
  "card": hsl($base-hue, $base-sat, 3%),
  "canvas": hsl($base-hue, $base-sat, 3%),
  "supporting": hsl($base-hue, $base-sat, 3%),
  "fieldset": hsl($base-hue, $base-sat, 4%),
  "header": hsl($base-hue, $base-sat, 5%),
  "control": hsl($base-hue, $base-sat, 5%),
  "elevated-low": hsl($base-hue, $base-sat, 5%),
  "elevated-mid": hsl($base-hue, $base-sat, 7%),
  "elevated-high": hsl($base-hue, $base-sat, 10%),
  "elevated-top": hsl($base-hue, $base-sat, 15%),
  "token": hsl($base-hue, $base-sat, 20%),
  "input-fill": hsl(212, 84%, 44.1%),
  "light": hsl($base-hue, $base-sat, 100%)
);

$surface-states: (
  "hover": (0, 0%, 7%),
  "active": (0, 0%, 9%),
  "focused": (0, 0%, 2%),
  "disabled": (0, 0%, 20%),
  "muted": (0, 0%, -5%)
);

// Token generator mixin
@mixin generate-surface-tokens($prefix, $base-color, $states) {
  --SYS-surface-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    $dh: nth($delta, 1);
    $ds: nth($delta, 2);
    $dl: nth($delta, 3);
    $h-new: (hue($base-color) + $dh) % 360;
    $s-new: max(0%, min(100%,  saturation($base-color) + $ds));
    $l-new: max(0%, min(100%,  lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --SYS-surface-#{$prefix}-#{$state}: #{$variant};
  }
}

// ------------------------------------------
// Borders
// ------------------------------------------

// Ordered by prominence.
$border-roles: (
  "grid": 12%,
  "container": 12%,
  "row": 12%,
  "shadow": 12%,
  "card": 15%,
  "dropdown": 15%,
  "divider": 20%,
  "elevated-low": 20%,
  "header": 20%,
  "control": 25%,
  "elevated-mid": 25%,
  "fieldset": 25%,
  "input": 25%,
  "elevated-high": 30%,
  "section": 30%,
  "token": 40%
);

$border-states: (
  "hover": 6%,
  "active": 14%,
  "focused": 10%
);

// Token generator mixin
@mixin generate-border-tokens($prefix, $base-color, $states) {
  --SYS-border-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    --SYS-border-#{$prefix}-#{$state}: #{adjust-lightness($base-color, $delta)};
  }
}

// ------------------------------------------
// Text
// ------------------------------------------

$text-tokens: (
  "code": (h: 32, l:80%, s: 4%),
  "control": (h: 32, l:80%, s: 5%),
  "disabled": (h: none, l:35%, s: 2%),
  "faint": (h: none, l:15%, s: 1%),
  "header": (h: none, l:92%, s: 5%),
  "highlighted": (h: 38, l:8%, s: 80%),
  "highlighted-elevated": (h: 38, l:30%, s: 80%),
  "navigation": (h: none, l:85%, s: 8%),
  "icon": (h: 220, l:55%, s: 10%),
  "input": (h: none, l:95%, s: 10%),
  "label": (h: none, l:70%, s: 4%),
  "inverted": (h: none, l:10%, s: 4%),
  "link": (h: 220, l:60%, s: 50%),
  "muted": (h: none, l:45%, s: 2%),
  "primary": (h: 32, l:80%, s: 12%),
  "secondary": (h: 32, l:65%, s: 4%),
  "tertiary": (h: none, l:60%, s: 3%),
  "token": (h: none, l:85%, s: 4%),
  "tooltip": (h: none, l:88%, s: 4%)
);

$text-states: (
  "hover": 12%,
  "active": 18%
);

// Token generator mixin
@mixin generate-text-tokens($prefix, $base-color, $states) {
  --SYS-text-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    --SYS-text-#{$prefix}-#{$state}: #{adjust-lightness($base-color, $delta)};
  }
}

// ------------------------------------------
// Utility boxes + buttons
// ------------------------------------------

$semantic-families: (
  "success": (145, 40%),
  "warning": (50, 60%),
  "danger": (12, 70%),
  "info": (215, 40%),
  "help": (185, 50%),
  "tip": (150, 30%),
  "outcome": (275, 60%)
);

$semantic-roles: (
  "bg": (1.0, 7%),
  "text": (1.0, 50%),
  "icon": (1.0, 70%),
  "border": (0.8, 30%),
  "button-bg": (0.6, 18%),
  "button-text": (0.3, 55%),
  "button-icon": (1.0, 75%),
  "button-border": (0.6, 26%)
);

$semantic-states: (
  "hover": (6%, 6%, 0),
  "active": (10%, 2%, 0),
  "focused": (3%, 5%, 5)
);

@mixin generate-semantic-tokens($name, $hue, $sat, $roles) {
   @each $role, $params in $roles {
      $sat-mult: nth($params, 1);
      $l: nth($params, 2);
      $s: $sat * $sat-mult;
      $color: hsl($hue, $s, $l);
      --SYS-semantic-#{$name}-#{$role}: #{$color};
      @each $state, $delta in $semantic-states {
        $dl: nth($delta, 1);
        $ds: nth($delta, 2);
        $dh: nth($delta, 3);
        $sh: max(0%, min(100%, $s + $ds));
        $lh: max(0%, min(100%, $l + $dl));
        $hh: ($hue + $dh) % 360;
        $variant: hsl($hh, $sh, $lh);
        --SYS-semantic-#{$name}-#{$role}-#{$state}: #{$variant};
      }
   }
}

// ------------------------------------------
// Accents
// ------------------------------------------

$accent-families: (
  "tomato": (8, 60%),
  "pumpkin": (33, 90%),
  "amethyst": (270, 35%),
  "salmon": (12, 79%),
  "wisteria": (250, 35%),
  "glacier": (190, 35%),
  "asparagus": (90, 45%),
  "fjord": (220, 30%)
);

$accent-roles: (
  "base": (1.0, 1.0, 50%),
  "faint": (1.0, 0.6, 5%),
  "muted": (1.0, 0.6, 15%),
  "dull": (1.0, 0.6, 30%),
  "bright": (1.0, 1.0, 75%),
  "contrast": (1.0, 1.0, 85%),
  "inverted": (1.0, 1.0, 95%)
);

$accent-states: (
  "hover": (-3%, 3%, 0),
  "active": (-6%, 0%, 0),
  "focused": (-3%, 5%, 5),
  "muted": (5%, -20%, 0),
  "highlighted": (-4%, -12%, -10)
);

// Token generator mixin
@mixin generate-accent-tokens($name, $hue, $sat, $roles) {
  @each $role, $params in $roles {
    $sat-mult: nth($params, 1);
    $light-mult: nth($params, 2);
    $light: nth($params, 3);
    $s: $sat * $sat-mult;
    $l: $light;
    $color: hsl($hue, $s, $l);
    --SYS-accent-#{$name}-#{$role}: #{$color};
    @each $state, $delta in $accent-states {
      $dl: nth($delta, 1);
      $ds: nth($delta, 2);
      $dh: nth($delta, 3);
      $sh: max(0%, min(100%, $s + $ds));
      $lh: max(0%, min(100%, $l + $dl));
      $hh: ($hue + $dh) % 360;
      $variant: hsl($hh, $sh, $lh);
      --SYS-accent-#{$name}-#{$role}-#{$state}: #{$variant};
    }
  }
}


// ------------------------------------------
// GENERATE COLORS FOR THEME
// ------------------------------------------
body.theme-dark {
  // Surfaces
  @each $name, $color in $surface-colors {
    @include generate-surface-tokens(#{$name}, $color, $surface-states);
  }

  // Borders
  @each $name, $delta in $border-roles {
    $base: hsl($base-hue, $base-sat, $delta);
    @include generate-border-tokens(#{$name}, $base, $border-states);
  }

  // Text
  @each $name, $props in $text-tokens {
    $hue: map-get($props, h);
    @if $hue == none {
      $hue: $base-hue;
    }
    $base: hsl($hue, map-get($props, s), map-get($props, l));
    @include generate-text-tokens(#{$name}, $base, $text-states);
  }

  // Semantic colors
  @each $name, $props in $semantic-families {
    $hue: nth($props, 1);
    $sat: nth($props, 2);
    @include generate-semantic-tokens($name, $hue, $sat, $semantic-roles);
  }

  // Accent colors
  @each $name, $props in $accent-families {
    $hue: nth($props, 1);
    $sat: nth($props, 2);
    @include generate-accent-tokens($name, $hue, $sat, $accent-roles);
  }
}
