@use 'sass:list';

// Semantic colors
@mixin generate-semantic-tokens($name, $base-color, $roles) {
  @each $role, $role-delta in $roles {
    $role-dh: map-get($role-delta, 'h_delta');
    $role-ds: map-get($role-delta, 's_delta');
    $role-dl: map-get($role-delta, 'l_delta');
    $h-role-new: (hue($base-color) + $role-dh) % 360deg;
    $s-role-new: max(0%, min(100%, saturation($base-color) + $role-ds));
    $l-role-new: max(0%, min(100%, lightness($base-color) + $role-dl));
    $role-variant: hsl($h-role-new, $s-role-new, $l-role-new);
    --semantic-#{$name}-#{$role}: #{$role-variant};
    @each $state, $state-delta in $semantic-states {
      $state-dh: map-get($state-delta, 'h_delta');
      $state-ds: map-get($state-delta, 's_delta');
      $state-dl: map-get($state-delta, 'l_delta');
      $h-state-new: (hue($role-variant) + $state-dh) % 360deg;
      $s-state-new: max(0%, min(100%, saturation($role-variant) + $state-ds));
      $l-state-new: max(0%, min(100%, lightness($role-variant) + $state-dl));
      $state-variant: hsl($h-state-new, $s-state-new, $l-state-new);
      --semantic-#{$name}-#{$role}-#{$state}: #{$state-variant};
    }
  }
}

@function _suffix($token) {
  @return if($token == '', '', '-#{$token}');
}

@mixin generate-color-tokens(
  $name,
  $base-color,
  $color-intensities,
  $color-states
) {
  --color-#{$name}: #{$base-color};

  @each $intensity, $delta in $color-intensities {
    $base-variant: hsla(
      hue($base-color),
      saturation($base-color),
      lightness($base-color),
      $delta
    );
    --color-#{$name}-#{$intensity}: #{$base-variant};
  }

  @each $state, $delta in $color-states {
    $dh: map-get($delta, 'h_delta');
    $ds: map-get($delta, 's_delta');
    $dl: map-get($delta, 'l_delta');
    $h-new: (hue($base-color) + $dh) % 360deg;
    $s-new: max(0%, min(100%, saturation($base-color) + $ds));
    $l-new: max(0%, min(100%, lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --color-#{$name}-#{$state}: #{$variant};

    @each $intensity, $delta in $color-intensities {
      $new-variant: hsla($h-new, $s-new, $l-new, $delta);
      --color-#{$name}-#{$intensity}-#{$state}: #{$new-variant};
    }
  }
}

@mixin generate-new-color-tokens($prefix, $exports) {
  $stateless-color-group: map-get($exports, 'stateless');
  $stateful-color-group: map-get($exports, 'stateful');

  @if $stateless-color-group {
    @each $stateless-colors in $stateless-color-group {
      @each $name, $color in $stateless-colors {
        --color-#{$prefix}-#{$name}: #{$color};
      }
    }
  }

  @if $stateful-color-group {
    @each $stateful-colors, $state-deltas in $stateful-color-group {
      @each $name, $color in $stateful-colors {
        --color-#{$prefix}-#{$name}: #{$color};

        @each $state, $delta in $state-deltas {
          $dh: list.nth($delta, 1);
          $ds: list.nth($delta, 2);
          $dl: list.nth($delta, 3);

          $h-new: (hue($color) + $dh) % 360deg;
          $s-new: max(0%, min(100%, saturation($color) + $ds));
          $l-new: max(0%, min(100%, lightness($color) + $dl));

          $variant: hsl($h-new, $s-new, $l-new);

          --color-#{$prefix}-#{$name}-#{$state}: #{$variant};
        }
      }
    }
  }
}
