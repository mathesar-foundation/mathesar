// Accent colors
$tomato: hsl(8, 60%, 50%);
$pumpkin: hsl(33, 90%, 50%);
$amethyst: hsl(270, 40%, 55%);
$salmon: hsl(12, 60%, 50%);
$wisteria: hsl(250, 45%, 60%);
$glacier: hsl(190, 60%, 50%);
$asparagus: hsl(90, 45%, 30%);
$fjord: hsl(220, 60%, 60%);
$teal: hsl(180, 100%, 25%);

// Main semantic colors
$success: hsl(145, 50%, 50%);
$warning: hsl(50, 50%, 50%);
$danger: hsl(12, 50%, 50%);
$info: hsl(215, 50%, 50%);
$help: hsl(185, 50%, 50%);
$tip: hsl(150, 50%, 50%);
$outcome: hsl(275, 50%, 50%);

// Special semantic colors
$input-fill: hsl(212, 84%, 44.1%);

//-----------------------------
// MIXINS FOR GENERATING COLORS
//-----------------------------

// Surface colors
@mixin generate-surface-tokens($prefix, $base-color, $states) {
  --surface-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    $dh: map-get($delta, 'h_delta');
    $ds: map-get($delta, 's_delta');
    $dl: map-get($delta, 'l_delta');
    $h-new: (hue($base-color) + $dh) % 360deg;
    $s-new: max(0%, min(100%, saturation($base-color) + $ds));
    $l-new: max(0%, min(100%, lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --surface-#{$prefix}-#{$state}: #{$variant};
  }
}

// Border colors
@mixin generate-border-tokens($prefix, $base-color, $states) {
  --border-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    $dh: map-get($delta, 'h_delta');
    $ds: map-get($delta, 's_delta');
    $dl: map-get($delta, 'l_delta');
    $h-new: (hue($base-color) + $dh) % 360deg;
    $s-new: max(0%, min(100%, saturation($base-color) + $ds));
    $l-new: max(0%, min(100%, lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --border-#{$prefix}-#{$state}: #{$variant};
  }
}

// Text colors
@mixin generate-text-tokens($prefix, $base-color, $states) {
  --text-#{$prefix}: #{$base-color};
  @each $state, $delta in $states {
    $dh: map-get($delta, 'h_delta');
    $ds: map-get($delta, 's_delta');
    $dl: map-get($delta, 'l_delta');
    $h-new: (hue($base-color) + $dh) % 360deg;
    $s-new: max(0%, min(100%, saturation($base-color) + $ds));
    $l-new: max(0%, min(100%, lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --text-#{$prefix}-#{$state}: #{$variant};
  }
}

// Semantic colors
@mixin generate-semantic-tokens($name, $base-color, $roles) {
  @each $role, $role-delta in $roles {
    $role-dh: map-get($role-delta, 'h_delta');
    $role-ds: map-get($role-delta, 's_delta');
    $role-dl: map-get($role-delta, 'l_delta');
    $h-role-new: (hue($base-color) + $role-dh) % 360deg;
    $s-role-new: max(0%, min(100%, saturation($base-color) + $role-ds));
    $l-role-new: max(0%, min(100%, lightness($base-color) + $role-dl));
    $role-variant: hsl($h-role-new, $s-role-new, $l-role-new);
    --semantic-#{$name}-#{$role}: #{$role-variant};
    @each $state, $state-delta in $semantic-states {
      $state-dh: map-get($state-delta, 'h_delta');
      $state-ds: map-get($state-delta, 's_delta');
      $state-dl: map-get($state-delta, 'l_delta');
      $h-state-new: (hue($role-variant) + $state-dh) % 360deg;
      $s-state-new: max(0%, min(100%, saturation($role-variant) + $state-ds));
      $l-state-new: max(0%, min(100%, lightness($role-variant) + $state-dl));
      $state-variant: hsl($h-state-new, $s-state-new, $l-state-new);
      --semantic-#{$name}-#{$role}-#{$state}: #{$state-variant};
    }
  }
}

@mixin generate-color-tokens(
  $name,
  $base-color,
  $color-intensities,
  $color-states
) {
  --color-#{$name}: #{$base-color};

  @each $intensity, $delta in $color-intensities {
    $base-variant: hsla(
      hue($base-color),
      saturation($base-color),
      lightness($base-color),
      $delta
    );
    --color-#{$name}-#{$intensity}: #{$base-variant};
  }

  @each $state, $delta in $color-states {
    $dh: map-get($delta, 'h_delta');
    $ds: map-get($delta, 's_delta');
    $dl: map-get($delta, 'l_delta');
    $h-new: (hue($base-color) + $dh) % 360deg;
    $s-new: max(0%, min(100%, saturation($base-color) + $ds));
    $l-new: max(0%, min(100%, lightness($base-color) + $dl));
    $variant: hsl($h-new, $s-new, $l-new);
    --color-#{$name}-#{$state}: #{$variant};

    @each $intensity, $delta in $color-intensities {
      $new-variant: hsla($h-new, $s-new, $l-new, $delta);
      --color-#{$name}-#{$intensity}-#{$state}: #{$new-variant};
    }
  }
}
